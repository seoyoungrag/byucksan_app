package com.sds.acube.app.common.interceptor;import java.io.PrintWriter;import java.util.Enumeration;import java.util.Locale;import javax.inject.Inject;import javax.inject.Named;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.jconfig.Configuration;import org.springframework.context.MessageSource;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import com.sds.acube.esso.agent.SSOAgent;import com.sds.acube.esso.vo.SSOData;import com.sds.acube.app.common.util.AppCode;import com.sds.acube.app.common.util.AppConfig;import com.sds.acube.app.common.util.CommonUtil;import com.sds.acube.app.common.util.ConstantList;import com.sds.acube.app.common.util.DateUtil;import com.sds.acube.app.common.util.GuidUtil;import com.sds.acube.app.common.util.MemoryUtil;import com.sds.acube.app.common.util.Transform;import com.sds.acube.app.login.security.UtilSSO;import com.sds.acube.app.login.security.seed.SeedBean;import com.sds.acube.app.login.service.ILoginService;import com.sds.acube.app.login.vo.LoginHistoryVO;import com.sds.acube.app.login.vo.LoginVO;import com.sds.acube.app.login.vo.UserProfileVO;/** * Class Name  : RequestInterceptor.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br> * @author   kimside  * @since  2012. 5. 23. * @version  1.0  * @see com.sds.acube.app.common.interceptor.RequestInterceptor.java */public class SSOInterceptor extends HandlerInterceptorAdapter {	@Inject	@Named("messageSource")	MessageSource messageSource;	/**	 */	@Inject	@Named("loginService")	private ILoginService loginService;	@Override	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object hadler) throws Exception {		HttpSession session = request.getSession();									String webUri = AppConfig.getProperty("web_uri", "/ep", "path");		String D1 = CommonUtil.nullTrim(request.getParameter("D1"));		if (!"".equals(D1)) {			String externalWeb = AppConfig.getProperty("external_web", "192.168.115.101,192.168.115.111,192.168.115.112", "path");			String serverName = request.getServerName();			String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));			if (userIp.length() == 0) {				userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));			}			if (userIp.length() == 0) {				userIp = CommonUtil.nullTrim(request.getRemoteAddr());			}			boolean isExtWeb = (externalWeb.indexOf(userIp) == -1 && externalWeb.indexOf(serverName) == -1) ? false : true;			session.setAttribute("IS_EXTWEB", isExtWeb);				LoginVO loginVO = (LoginVO)Transform.transformToDmo("com.sds.acube.app.login.vo.LoginVO", request);			String loginIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));			if (loginIp.length() == 0) {				loginIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));			}			if (loginIp.length() == 0) {				loginIp = CommonUtil.nullTrim(request.getRemoteAddr());			}			loginVO.setLoginIp(loginIp);			String decodeD1 = UtilSSO.decodeData(D1);									loginVO.setLoginId(UtilSSO.getData(decodeD1, "F1", ";"));			loginVO.setPassword(UtilSSO.getData(decodeD1, "F12", ";"));			UserProfileVO userProfile = loginService.loginProcess(loginVO);			if (loginVO.getLanguage() == null || "".equals(loginVO.getLanguage())) {				userProfile.setLanguage(UtilSSO.getData(decodeD1, "F15", ";"));				AppConfig.setCurrentLangType(UtilSSO.getData(decodeD1, "F15", ";"));			}			else			{				userProfile.setLanguage(loginVO.getLanguage());			}			// 로그인 성공인 경우에 세션 저장			if(userProfile.getLoginResult() == ConstantList.LOGIN_SUCCESS) {				setUserSession(session, userProfile, userIp);			} else {				String sessionMsg = messageSource.getMessage("common.msg.not.session", null, (Locale)session.getAttribute("LANG_TYPE"));				CommonUtil.script(response, "alert('" + sessionMsg + "');top.location.href = '" + webUri + "/app/login/logout.do'");				return false;			}		} else {			// 메신저에서 겸직자 아이디가 넘어 온다면 강제로 겸직자로 세션생성해주어야 한다. D1값은 없어야 한다.			String usrIdForMessanger = CommonUtil.nullTrim(request.getParameter("usrIdForMessanger"));			if(!usrIdForMessanger.equals("")){				String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));				if (userIp.length() == 0) {					userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));				}				if (userIp.length() == 0) {					userIp = CommonUtil.nullTrim(request.getRemoteAddr());				}								UserProfileVO userProfile = loginService.loginProcessByUserId(usrIdForMessanger);				setUserSession(session, userProfile, userIp);			}else{				String userId = (String) session.getAttribute("USER_ID");				if (userId == null || "".equals(userId)) {					String sessionMsg = messageSource.getMessage("common.msg.not.session", null, (Locale)session.getAttribute("LANG_TYPE"));					//아래 CommonUtil에서 로그아웃 얼럿과 페이지이동 스크립트를 보낸다.					//CommonUtil.script(response, "alert('" + sessionMsg + "');top.location.href = '" + webUri + "/app/login/logout.do'");					CommonUtil.script(response, "alert('" + sessionMsg + "');top.location.href = '" + webUri + "/app/jsp/login/sessionWindowCheck.jsp'"); //session체크하는 서블릿을 호출 by 서영락, 2016-01-11					return false;				}			}		}		return true;	}	private void setUserSession(HttpSession session, UserProfileVO userProfileVO, String userIp) throws Exception {		session.setAttribute("userProfile", userProfileVO);		session.setAttribute("COMP_ID", userProfileVO.getCompId()); // 사용자 소속 회사 아이디		session.setAttribute("COMP_NAME", userProfileVO.getCompName()); // 사용자 소속 회사 이름		session.setAttribute("USER_ID", userProfileVO.getUserUid()); // 사용자  아이디		session.setAttribute("USER_NAME", userProfileVO.getUserName()); // 사용자  이름		session.setAttribute("USER_POSITION", userProfileVO.getPositionName()); // 사용자  직위		session.setAttribute("DEPT_ID", userProfileVO.getDeptId()); // 사용자 부서 아이디		session.setAttribute("DEPT_NAME", userProfileVO.getDeptName()); // 사용자 부서 이름		session.setAttribute("PART_ID", userProfileVO.getPartId()); // 사용자 파트 아이디		session.setAttribute("PART_NAME", userProfileVO.getPartName()); // 사용자 파트 이름		session.setAttribute("LOGIN_ID", userProfileVO.getLoginId()); // 사용자 로그인 아이디		session.setAttribute("TELEPHONE", userProfileVO.getOfficeTel()); // 사용자 사무실 전화번호		session.setAttribute("TELEPHONE2", userProfileVO.getOfficeTel2()); // 사용자 사무실 전화번호2		//session.setAttribute("FAX", userProfileVO.getOfficeFax()); // 사용자 사무실 팩스번호		session.setAttribute("EMAIL", userProfileVO.getEmail()); // 사용자 이메일		session.setAttribute("DEPARTMENT_LIST", userProfileVO.getDepartmentList());		session.setAttribute("LANG_TYPE", new Locale(userProfileVO.getLanguage()));		session.setAttribute("ROLE_CODES", userProfileVO.getRoleCodes());		session.setAttribute("DISPLAY_POSITION", userProfileVO.getDisplayPosition());		session.setAttribute("org.springframework.web.servlet.i18n.SessionLocaleResolver.LOCALE", new Locale(userProfileVO.getLanguage()));		session.setAttribute("USER_RID", userProfileVO.getUserRid());		session.setAttribute("USE_TRAY", "N");		session.setAttribute("LAST_SIGN_DATE", "");		session.setAttribute("CHECK_LAST_SIGN", "N");		String proxyDeptId = CommonUtil.nullTrim(userProfileVO.getProxyDocHandleDeptCode());		if ("".equals(proxyDeptId)) {			session.setAttribute("PROXY_DOC_HANDLE_DEPT_CODE", "");			session.setAttribute("PROXY_DOC_HANDLE_DEPT_NAME", "");		} else {			session.setAttribute("PROXY_DOC_HANDLE_DEPT_CODE", proxyDeptId);			session.setAttribute("PROXY_DOC_HANDLE_DEPT_NAME", userProfileVO.getProxyDocHandleDeptName());		}		// 파일 업로드 경로 확인		CommonUtil.verifyPath(AppConfig.getProperty("upload_temp", "", "attach"));		CommonUtil.verifyPath(AppConfig.getProperty("upload_temp", "", "attach") + "/" + session.getAttribute("COMP_ID"));		// 로그인 이력		AppCode appCode = MemoryUtil.getCodeInstance();		String dhu005 = appCode.getProperty("DHU005", "DHU005", "DHU"); // 로그인		LoginHistoryVO loginHistoryVO = new LoginHistoryVO();		loginHistoryVO.setCompId(userProfileVO.getCompId());		loginHistoryVO.setHisId(GuidUtil.getGUID());		loginHistoryVO.setUserId(userProfileVO.getUserUid());		loginHistoryVO.setUserName(userProfileVO.getUserName());		loginHistoryVO.setPos(userProfileVO.getDisplayPosition());		loginHistoryVO.setUserIp(userIp);		loginHistoryVO.setDeptId(userProfileVO.getDeptId());		loginHistoryVO.setDeptName(userProfileVO.getDeptName());		loginHistoryVO.setUseDate(DateUtil.getCurrentDate());		loginHistoryVO.setUsedType(dhu005);		loginService.insertLoginHistory(loginHistoryVO);	}	@Override	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object hadler, ModelAndView mav) throws Exception {	}	@Override	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object hadler, Exception exception)			throws Exception {	}}