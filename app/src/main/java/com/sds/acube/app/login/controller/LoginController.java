/*
 * @(#) LoginController.java 2010. 5. 25.
 * Copyright (c) 2010 Samsung SDS Co., Ltd. All Rights Reserved.
 */
package com.sds.acube.app.login.controller;
import java.util.List;import java.util.Locale;import javax.inject.Inject;import javax.inject.Named;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import org.anyframe.util.StringUtil;import com.sds.acube.app.common.controller.BaseController;import com.sds.acube.app.common.service.IOrgService;import com.sds.acube.app.common.util.AppConfig;import com.sds.acube.app.common.util.CommonUtil;import com.sds.acube.app.common.util.ConstantList;import com.sds.acube.app.common.util.DateUtil;import com.sds.acube.app.common.util.GuidUtil;import com.sds.acube.app.common.util.Transform;import com.sds.acube.app.common.vo.UserVO;import com.sds.acube.app.login.security.EnDecode;import com.sds.acube.app.login.security.seed.SeedBean;import com.sds.acube.app.login.service.ILoginService;import com.sds.acube.app.login.vo.LoginHistoryVO;import com.sds.acube.app.login.vo.LoginVO;import com.sds.acube.app.login.vo.UserProfileVO;


/** * @author  Alex, Eum * @version  $Revision: 1.1.4.12.4.6.2.3 $ $Date: 2010/12/29 01:40:40 $ */@SuppressWarnings("serial")@Controller@RequestMapping("/app/login/*.do")public class LoginController extends BaseController {
    /**	 */    @Inject    @Named("loginService")    private ILoginService loginService;
    /**	 */    @Inject    @Named("orgService")    private IOrgService orgService;    //	@Value("#{modelviewProperties['LoginController.adminLoginProcess']}")    //	private String adminLoginProcessUri;    // 메신저에서 들어오는 경로    @RequestMapping("/app/login/loginOnlyId.do")    public ModelAndView loginOnlyId(HttpServletRequest request, HttpServletResponse response) throws Exception {	logger.debug("loginOnlyId called...");	LoginVO loginVO = (LoginVO)Transform.transformToDmo("com.sds.acube.app.login.vo.LoginVO", request);	logger.debug("loginVO data --> " +  loginVO.toString());		String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));	if (userIp.length() == 0) {	    userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));	}		if (userIp.length() == 0) {	    userIp = CommonUtil.nullTrim(request.getRemoteAddr());	}		String returnUrl = CommonUtil.nullTrim(request.getParameter("returnUrl"));	String lobCode = CommonUtil.nullTrim(request.getParameter("lobCode"));	String compId = CommonUtil.nullTrim(request.getParameter("compId"));	returnUrl = returnUrl.replaceAll("\\*", "?")+"&lobCode="+lobCode+"&compId="+compId;	if(returnUrl.indexOf("docId")>-1){		returnUrl += "&isMessenger=Y";	}		loginVO.setLoginIp(userIp);		UserProfileVO userProfile = loginService.loginProcessByUserId(loginVO.getLoginId());	HttpSession session = request.getSession();	if ("".equals(loginVO.getLanguage())) {	    userProfile.setLanguage("ko");	    AppConfig.setCurrentLangType("ko");		// 다국어 때문에 추가함 	}	else	{	    userProfile.setLanguage(loginVO.getLanguage());	    AppConfig.setCurrentLangType(loginVO.getLanguage());	// 다국어 때문에 추가함	}		ModelAndView mav = new ModelAndView();	// 로그인 성공인 경우에 세션 저장	logger.debug("userProfile.getLoginResult()=="+userProfile.getLoginResult());	if(userProfile.getLoginResult() == ConstantList.LOGIN_SUCCESS) {					    setUserSession(session, userProfile, userIp);	    mav.setViewName("appLayoutWithTop");	    mav.addObject("jsonResult", userProfile);	} else if(userProfile.getLoginResult() == ConstantList.LOGIN_FAIL_NO_ID) {			    mav.setViewName("LoginController.logout");	    mav.addObject("message", "common.msg.login.no.id");	} else if(userProfile.getLoginResult() == ConstantList.LOGIN_FAIL_WRONG_PASSWORD) {			    mav.setViewName("LoginController.logout");	    mav.addObject("message", "common.msg.login.wrong.password");		} else if(userProfile.getLoginResult() == ConstantList.LOGIN_OBJECT_NULL){				mav.setViewName("LoginController.logout");		mav.addObject("message", "common.msg.login.fail");					}			mav = new ModelAndView("redirect:"+returnUrl);	return mav;    }

    /**
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    @RequestMapping("/app/login/loginProcess.do")    public ModelAndView loginProcessByPortlet(HttpServletRequest request, HttpServletResponse response) throws Exception {
	logger.debug("loginProcessByPortlet called...");
	//LoginVO loginVO = new LoginVO();	//bind(request, loginVO);
	LoginVO loginVO = (LoginVO)Transform.transformToDmo("com.sds.acube.app.login.vo.LoginVO", request);	logger.debug("loginVO data --> " +  loginVO.toString());	
	String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));	if (userIp.length() == 0) {	    userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));	}		if (userIp.length() == 0) {	    userIp = CommonUtil.nullTrim(request.getRemoteAddr());	}		loginVO.setLoginIp(userIp);
	if(!AppConfig.getBooleanProperty("use_https", true)) {
	    // Seed Decode
	    SeedBean.setRoundKey(request);
	    loginVO.setLoginId(SeedBean.doDecode(request, loginVO.getLoginId()));
	    loginVO.setPassword(SeedBean.doDecode(request, loginVO.getPassword()));
	}		String encodePassword = "";		
	if((AppConfig.getProperty("systemUser", "", "systemOperation")).equals(loginVO.getLoginId())) {		encodePassword = EnDecode.EncodeBySType(AppConfig.getProperty("systemUserCert", "", "systemOperation"));	} else {		encodePassword = EnDecode.EncodeBySType(loginVO.getPassword());	}		logger.debug("encodePassword : " + encodePassword);		loginVO.setPassword(encodePassword);	
	UserProfileVO userProfile = loginService.loginProcess(loginVO);
	HttpSession session = request.getSession();	if ("".equals(loginVO.getLanguage())) {	    userProfile.setLanguage("ko");	    AppConfig.setCurrentLangType("ko");		// 다국어 때문에 추가함 	}	else	{	    userProfile.setLanguage(loginVO.getLanguage());	    AppConfig.setCurrentLangType(loginVO.getLanguage());	// 다국어 때문에 추가함	}	
	ModelAndView mav = new ModelAndView();	// 로그인 성공인 경우에 세션 저장	logger.debug("userProfile.getLoginResult()=="+userProfile.getLoginResult());	if(userProfile.getLoginResult() == ConstantList.LOGIN_SUCCESS) {					    setUserSession(session, userProfile, userIp);	    mav.setViewName("appLayoutWithTop");	    mav.addObject("jsonResult", userProfile);
	} else if(userProfile.getLoginResult() == ConstantList.LOGIN_FAIL_NO_ID) {			    mav.setViewName("LoginController.logout");	    mav.addObject("message", "common.msg.login.no.id");	} else if(userProfile.getLoginResult() == ConstantList.LOGIN_FAIL_WRONG_PASSWORD) {			    mav.setViewName("LoginController.logout");	    mav.addObject("message", "common.msg.login.wrong.password");		} else if(userProfile.getLoginResult() == ConstantList.LOGIN_OBJECT_NULL){				mav.setViewName("LoginController.logout");		mav.addObject("message", "common.msg.login.fail");					} else if(userProfile.getLoginResult() == ConstantList.LOGIN_FAIL_AUTHORIZATION){				mav.setViewName("LoginController.logout");		mav.addObject("message", "common.msg.dont.confirm");				} else if(userProfile.getLoginResult() == ConstantList.LOGIN_SUCCESS_WOORI){				mav.setViewName("LoginController.wooriBank");		mav.addObject("message", "common.msg.woori.bank");					}				
	return mav;
    }    @RequestMapping("/app/login/loginProcessByConcurrent.do")    public ModelAndView loginProcessByConcurrent(HttpServletRequest request, HttpServletResponse response) throws Exception {	logger.debug("loginProcessByConcurrent called...");	HttpSession session = request.getSession();	String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));	if (userIp.length() == 0) {	    userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));	}	if (userIp.length() == 0) {	    userIp = CommonUtil.nullTrim(request.getRemoteAddr());	}	UserProfileVO oldUserProfileVO = (UserProfileVO)session.getAttribute("userProfile");	String loginId = oldUserProfileVO.getLoginId(); // 사용자 로그인 아이디	List<UserVO> concurrentList = orgService.selectConcurrentUserListByLoginId(loginId);	String concurrentUserId = StringUtil.null2str(request.getParameter("concurrentUserId"), "");	UserProfileVO userProfileVO = null;	int concurrentListSize = concurrentList.size();	for(int i=0; i<concurrentListSize; i++) {	    if(concurrentUserId.equals((concurrentList.get(i)).getUserUID())) {		userProfileVO = loginService.loginProcessByUserId(concurrentUserId);		userProfileVO.setLoginId(loginId);		userProfileVO.setLanguage(oldUserProfileVO.getLanguage());		setUserSession(session, userProfileVO, userIp);		break;	    }	}	ModelAndView mav = new ModelAndView("appLayout");	// docId 리퀘스트가 있으면 수신함으로 보낸 뒤 해당 문서를 열어줘야 한다.	String docId = CommonUtil.nullTrim(request.getParameter("docId"));	if(!docId.equals("")){		mav.addObject("docId", docId);	}	mav.addObject("jsonResult", userProfileVO);	return mav;    }        @RequestMapping("/app/login/loginProcessByConcurrentForMobile.do")    public ModelAndView loginProcessByConcurrentForMobile(HttpServletRequest request, HttpServletResponse response) throws Exception {		logger.debug("loginProcessByConcurrent called...");		HttpSession session = request.getSession();			String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));		if (userIp.length() == 0) {		    userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));		}		if (userIp.length() == 0) {		    userIp = CommonUtil.nullTrim(request.getRemoteAddr());		}		UserProfileVO oldUserProfileVO = (UserProfileVO)session.getAttribute("userProfile");		String loginId = oldUserProfileVO.getLoginId(); // 사용자 로그인 아이디		List<UserVO> concurrentList = orgService.selectConcurrentUserListByLoginId(loginId);		String concurrentUserId = StringUtil.null2str(request.getParameter("concurrentUserId"), "");		String D1 = CommonUtil.nullTrim(request.getParameter("D1"));				UserProfileVO userProfileVO = null;		int concurrentListSize = concurrentList.size();		for(int i=0; i<concurrentListSize; i++) {		    if(concurrentUserId.equals((concurrentList.get(i)).getUserUID())) {				userProfileVO = loginService.loginProcessByUserId(concurrentUserId);				userProfileVO.setLoginId(loginId);				userProfileVO.setLanguage(oldUserProfileVO.getLanguage());				setUserSession(session, userProfileVO, userIp);				break;		    }		}			ModelAndView mav = new ModelAndView("redirect:/app/list/webservice/approval/receive.do");		return mav;    }
    private void setUserSession(HttpSession session, UserProfileVO userProfileVO, String userIp) throws Exception {	session.setAttribute("userProfile", userProfileVO);	session.setAttribute("COMP_ID", userProfileVO.getCompId()); // 사용자 소속 회사 아이디	session.setAttribute("COMP_NAME", userProfileVO.getCompName()); // 사용자 소속 회사 이름	session.setAttribute("USER_ID", userProfileVO.getUserUid()); // 사용자  아이디	session.setAttribute("USER_NAME", userProfileVO.getUserName()); // 사용자  이름	session.setAttribute("USER_POSITION", userProfileVO.getPositionName()); // 사용자  직위	session.setAttribute("DEPT_ID", userProfileVO.getDeptId()); // 사용자 부서 아이디	session.setAttribute("DEPT_NAME", userProfileVO.getDeptName()); // 사용자 부서 이름	session.setAttribute("PART_ID", userProfileVO.getPartId()); // 사용자 파트 아이디	session.setAttribute("PART_NAME", userProfileVO.getPartName()); // 사용자 파트 이름	session.setAttribute("LOGIN_ID", userProfileVO.getLoginId()); // 사용자 로그인 아이디	session.setAttribute("TELEPHONE", userProfileVO.getOfficeTel()); // 사용자 사무실 전화번호	session.setAttribute("TELEPHONE2", userProfileVO.getOfficeTel2()); // 사용자 사무실 전화번호2		//session.setAttribute("FAX", userProfileVO.getOfficeFax()); // 사용자 사무실 팩스번호	session.setAttribute("EMAIL", userProfileVO.getEmail()); // 사용자 이메일	session.setAttribute("DEPARTMENT_LIST", userProfileVO.getDepartmentList());	//session.setAttribute("ACCESS_ID_LIST", getAccessIdList(request));	session.setAttribute("LANG_TYPE", new Locale(userProfileVO.getLanguage()));	String systemAdmin = AppConfig.getProperty("role_appadmin", "", "role");	String limitedAdmin = AppConfig.getProperty("limitedAdmin", "", "systemOperation");	String roleCodes = userProfileVO.getRoleCodes();	if (roleCodes.indexOf(systemAdmin) == -1 || (limitedAdmin.toLowerCase()).indexOf((userProfileVO.getLoginId()).toLowerCase()) == -1) {	    session.setAttribute("ROLE_CODES", roleCodes);	} else {	    session.setAttribute("ROLE_CODES", "");	}	session.setAttribute("DISPLAY_POSITION", userProfileVO.getDisplayPosition());	session.setAttribute("org.springframework.web.servlet.i18n.SessionLocaleResolver.LOCALE", new Locale(userProfileVO.getLanguage()));	session.setAttribute("USER_RID", userProfileVO.getUserRid());	session.setAttribute("USE_TRAY", "N");	session.setAttribute("LAST_SIGN_DATE", "");	session.setAttribute("CHECK_LAST_SIGN", "N");		session.setAttribute("EMPLOYEE_ID", userProfileVO.getEmployeeId()); // 사용자 사번	String proxyDeptId = CommonUtil.nullTrim(userProfileVO.getProxyDocHandleDeptCode());	if ("".equals(proxyDeptId)) {	    session.setAttribute("PROXY_DOC_HANDLE_DEPT_CODE", "");	    session.setAttribute("PROXY_DOC_HANDLE_DEPT_NAME", "");	} else {	    session.setAttribute("PROXY_DOC_HANDLE_DEPT_CODE", proxyDeptId);	    session.setAttribute("PROXY_DOC_HANDLE_DEPT_NAME", userProfileVO.getProxyDocHandleDeptName());	}	// 파일 업로드 경로 확인	CommonUtil.verifyPath(AppConfig.getProperty("upload_temp", "", "attach"));	CommonUtil.verifyPath(AppConfig.getProperty("upload_temp", "", "attach") + "/" + session.getAttribute("COMP_ID"));	// 로그인 이력	String dhu005 = appCode.getProperty("DHU005", "DHU005", "DHU"); // 로그인	LoginHistoryVO loginHistoryVO = new LoginHistoryVO();	loginHistoryVO.setCompId(userProfileVO.getCompId());	loginHistoryVO.setHisId(GuidUtil.getGUID());	loginHistoryVO.setUserId(userProfileVO.getUserUid());	loginHistoryVO.setUserName(userProfileVO.getUserName());	loginHistoryVO.setPos(userProfileVO.getDisplayPosition());	loginHistoryVO.setUserIp(userIp);	loginHistoryVO.setDeptId(userProfileVO.getDeptId());	loginHistoryVO.setDeptName(userProfileVO.getDeptName());	loginHistoryVO.setUseDate(DateUtil.getCurrentDate());	loginHistoryVO.setUsedType(dhu005);	loginService.insertLoginHistory(loginHistoryVO);    }    /**     * @param request     * @param response     * @return     * @throws Exception     */    @RequestMapping("/app/login/logout.do")    public ModelAndView logout(HttpServletRequest request, HttpServletResponse response) throws Exception {
	HttpSession session = request.getSession();
	UserProfileVO userProfile = (UserProfileVO) session.getAttribute("userProfile");
	if(userProfile!=null) {
	    logger.info(userProfile.getLoginId()+" logout..");
	    String dhu006 = appCode.getProperty("DHU006", "DHU006", "DHU"); // 로그아웃	    String userIp = CommonUtil.nullTrim(request.getHeader("WL-Proxy-Client-IP"));	    if (userIp.length() == 0) {		userIp = CommonUtil.nullTrim(request.getHeader("Proxy-Client-IP"));	    }	    if (userIp.length() == 0) {		userIp = CommonUtil.nullTrim(request.getRemoteAddr());	    }	    LoginHistoryVO loginHistoryVO = new LoginHistoryVO();	    loginHistoryVO.setCompId(userProfile.getCompId());	    loginHistoryVO.setHisId(GuidUtil.getGUID());	    loginHistoryVO.setUserId(userProfile.getUserUid());	    loginHistoryVO.setUserName(userProfile.getUserName());	    loginHistoryVO.setPos(userProfile.getDisplayPosition());	    loginHistoryVO.setUserIp(userIp);	    loginHistoryVO.setDeptId(userProfile.getDeptId());	    loginHistoryVO.setDeptName(userProfile.getDeptName());	    loginHistoryVO.setUseDate(DateUtil.getCurrentDate());	    loginHistoryVO.setUsedType(dhu006);	    loginService.insertLoginHistory(loginHistoryVO);	}	ModelAndView mav = new ModelAndView("LoginController.logout");
	return mav;
    }    /**     * <pre>      * 전자결재암호인증      * </pre>     * @param request      * @param response     * @return ModelAndView      * @exception Exception      * @see       * */     @RequestMapping("/app/login/certificationAppPwd.do")    public ModelAndView certificationAppPwd(HttpServletRequest request, HttpServletResponse response) throws Exception {	ModelAndView mav = new ModelAndView("LoginController.certificationAppPwd");	String loginId = CommonUtil.nullTrim(request.getParameter("loginId"));	String encryptedpassword = CommonUtil.nullTrim(request.getParameter("encryptedpassword"));	String roundkey = CommonUtil.nullTrim(request.getParameter("roundkey"));	if(!"".equals(loginId) && !"".equals(encryptedpassword) && !"".equals(roundkey)) {	    SeedBean.setRoundKey(request);	    String password = SeedBean.doDecode(request, encryptedpassword);	    String encryptedPwd = EnDecode.EncodeBySType(password);	    if (orgService.compareApprovalPasswordByLoginId(loginId, encryptedPwd)) {		mav.addObject("result", "true");	    } else {		mav.addObject("result", "false");	    }	} else {	    mav.addObject("result", "false");	}	return mav;    }
}
