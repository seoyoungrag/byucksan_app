
/**
 * DocumentServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.4.1  Built on : Aug 13, 2008 (05:03:35 LKT)
 */
        package com.sds.acube.app.ws.client.document;

        

        /*
        *  DocumentServiceStub java implementation
        */

        
        public class DocumentServiceStub extends org.apache.axis2.client.Stub
        {
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1; 
            return Long.toString(System.currentTimeMillis()) + "_" + counter;
        }

    
    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("DocumentService" + getUniqueSuffix());
     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[5];
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://service.ws.dms.ion.net", "move"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[0]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://service.ws.dms.ion.net", "remove"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[1]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://service.ws.dms.ion.net", "create"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[2]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://service.ws.dms.ion.net", "retrieve"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[3]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://service.ws.dms.ion.net", "update"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[4]=__operation;
            
        
        }

    //populates the faults
    private void populateFaults(){
         
              faultExceptionNameMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultMessageMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.DocumentServiceStub$ExceptionE");
           
              faultExceptionNameMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultMessageMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.DocumentServiceStub$ExceptionE");
           
              faultExceptionNameMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultMessageMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.DocumentServiceStub$ExceptionE");
           
              faultExceptionNameMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultMessageMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.DocumentServiceStub$ExceptionE");
           
              faultExceptionNameMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.ExceptionException0");
              faultMessageMap.put( new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),"com.sds.acube.app.ws.client.document.DocumentServiceStub$ExceptionE");
           


    }

    /**
      *Constructor that takes in a configContext
      */

    public DocumentServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public DocumentServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);

        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
        
            //Set the soap version
            _serviceClient.getOptions().setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        
    
    }

    /**
     * Default Constructor
     */
    public DocumentServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
        
                    this(configurationContext,"http://10.1.20.123:80/rat/services/DocumentService.DocumentServiceHttpSoap12Endpoint/" );
                
    }

    /**
     * Default Constructor
     */
    public DocumentServiceStub() throws org.apache.axis2.AxisFault {
        
                    this("http://10.1.20.123:80/rat/services/DocumentService.DocumentServiceHttpSoap12Endpoint/" );
                
    }

    /**
     * Constructor taking the target endpoint
     */
    public DocumentServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }



        
                    /**
                     * Auto generated method signature
                     * 
                     * @see com.sds.acube.app.ws.client.document.DocumentService#move
                     * @param move0
                    
                     * @throws com.sds.acube.app.ws.client.document.ExceptionException0 : 
                     */

                    

                            public  com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse move(

                            com.sds.acube.app.ws.client.document.DocumentServiceStub.Move move0)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,com.sds.acube.app.ws.client.document.ExceptionException0{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("urn:move");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    move0,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "move")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
                          throw (com.sds.acube.app.ws.client.document.ExceptionException0)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see com.sds.acube.app.ws.client.document.DocumentService#startmove
                    * @param move0
                
                */
                public  void startmove(

                 com.sds.acube.app.ws.client.document.DocumentServiceStub.Move move0,

                  final com.sds.acube.app.ws.client.document.DocumentServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("urn:move");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    move0,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "move")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultmove(
                                        (com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrormove(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
														callback.receiveErrormove((com.sds.acube.app.ws.client.document.ExceptionException0)ex);
											            return;
										            }
										            
					
										            callback.receiveErrormove(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrormove(f);
                                            }
									    } else {
										    callback.receiveErrormove(f);
									    }
									} else {
									    callback.receiveErrormove(f);
									}
								} else {
								    callback.receiveErrormove(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrormove(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see com.sds.acube.app.ws.client.document.DocumentService#remove
                     * @param remove2
                    
                     * @throws com.sds.acube.app.ws.client.document.ExceptionException0 : 
                     */

                    

                            public  com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse remove(

                            com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove remove2)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,com.sds.acube.app.ws.client.document.ExceptionException0{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
              _operationClient.getOptions().setAction("urn:remove");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    remove2,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "remove")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
                          throw (com.sds.acube.app.ws.client.document.ExceptionException0)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see com.sds.acube.app.ws.client.document.DocumentService#startremove
                    * @param remove2
                
                */
                public  void startremove(

                 com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove remove2,

                  final com.sds.acube.app.ws.client.document.DocumentServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
             _operationClient.getOptions().setAction("urn:remove");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    remove2,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "remove")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultremove(
                                        (com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorremove(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
														callback.receiveErrorremove((com.sds.acube.app.ws.client.document.ExceptionException0)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorremove(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorremove(f);
                                            }
									    } else {
										    callback.receiveErrorremove(f);
									    }
									} else {
									    callback.receiveErrorremove(f);
									}
								} else {
								    callback.receiveErrorremove(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorremove(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[1].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see com.sds.acube.app.ws.client.document.DocumentService#create
                     * @param create4
                    
                     * @throws com.sds.acube.app.ws.client.document.ExceptionException0 : 
                     */

                    

                            public  com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse create(

                            com.sds.acube.app.ws.client.document.DocumentServiceStub.Create create4)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,com.sds.acube.app.ws.client.document.ExceptionException0{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
              _operationClient.getOptions().setAction("urn:create");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    create4,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "create")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
                          throw (com.sds.acube.app.ws.client.document.ExceptionException0)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see com.sds.acube.app.ws.client.document.DocumentService#startcreate
                    * @param create4
                
                */
                public  void startcreate(

                 com.sds.acube.app.ws.client.document.DocumentServiceStub.Create create4,

                  final com.sds.acube.app.ws.client.document.DocumentServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
             _operationClient.getOptions().setAction("urn:create");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    create4,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "create")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcreate(
                                        (com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcreate(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
														callback.receiveErrorcreate((com.sds.acube.app.ws.client.document.ExceptionException0)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorcreate(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcreate(f);
                                            }
									    } else {
										    callback.receiveErrorcreate(f);
									    }
									} else {
									    callback.receiveErrorcreate(f);
									}
								} else {
								    callback.receiveErrorcreate(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcreate(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[2].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[2].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see com.sds.acube.app.ws.client.document.DocumentService#retrieve
                     * @param retrieve6
                    
                     * @throws com.sds.acube.app.ws.client.document.ExceptionException0 : 
                     */

                    

                            public  com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse retrieve(

                            com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve retrieve6)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,com.sds.acube.app.ws.client.document.ExceptionException0{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
              _operationClient.getOptions().setAction("urn:retrieve");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    retrieve6,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "retrieve")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
                          throw (com.sds.acube.app.ws.client.document.ExceptionException0)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see com.sds.acube.app.ws.client.document.DocumentService#startretrieve
                    * @param retrieve6
                
                */
                public  void startretrieve(

                 com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve retrieve6,

                  final com.sds.acube.app.ws.client.document.DocumentServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
             _operationClient.getOptions().setAction("urn:retrieve");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    retrieve6,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "retrieve")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultretrieve(
                                        (com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorretrieve(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
														callback.receiveErrorretrieve((com.sds.acube.app.ws.client.document.ExceptionException0)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorretrieve(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorretrieve(f);
                                            }
									    } else {
										    callback.receiveErrorretrieve(f);
									    }
									} else {
									    callback.receiveErrorretrieve(f);
									}
								} else {
								    callback.receiveErrorretrieve(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorretrieve(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[3].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[3].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see com.sds.acube.app.ws.client.document.DocumentService#update
                     * @param update8
                    
                     * @throws com.sds.acube.app.ws.client.document.ExceptionException0 : 
                     */

                    

                            public  com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse update(

                            com.sds.acube.app.ws.client.document.DocumentServiceStub.Update update8)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,com.sds.acube.app.ws.client.document.ExceptionException0{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
              _operationClient.getOptions().setAction("urn:update");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    update8,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "update")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
                          throw (com.sds.acube.app.ws.client.document.ExceptionException0)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see com.sds.acube.app.ws.client.document.DocumentService#startupdate
                    * @param update8
                
                */
                public  void startupdate(

                 com.sds.acube.app.ws.client.document.DocumentServiceStub.Update update8,

                  final com.sds.acube.app.ws.client.document.DocumentServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
             _operationClient.getOptions().setAction("urn:update");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    update8,
                                                    optimizeContent(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                    "update")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultupdate(
                                        (com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorupdate(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof com.sds.acube.app.ws.client.document.ExceptionException0){
														callback.receiveErrorupdate((com.sds.acube.app.ws.client.document.ExceptionException0)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorupdate(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorupdate(f);
                                            }
									    } else {
										    callback.receiveErrorupdate(f);
									    }
									} else {
									    callback.receiveErrorupdate(f);
									}
								} else {
								    callback.receiveErrorupdate(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorupdate(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[4].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[4].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                


       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }

    
    
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;   
            }
        }
        return false;
    }
     //http://10.1.20.123:80/rat/services/DocumentService.DocumentServiceHttpSoap12Endpoint/
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class DocumentWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DocumentWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for AppDocWS
						 */

                        
                                    protected AppDocWS localAppDocWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppDocWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return AppDocWS
                           */
                           public  AppDocWS getAppDocWS(){
                               return localAppDocWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AppDocWS
                               */
                               public void setAppDocWS(AppDocWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAppDocWSTracker = true;
                                       } else {
                                          localAppDocWSTracker = true;
                                              
                                       }
                                   
                                            this.localAppDocWS=param;
                                    

                               }
                            

                        /**
						 * field for BindWS
						 */

                        
                                    protected BindWS localBindWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return BindWS
                           */
                           public  BindWS getBindWS(){
                               return localBindWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindWS
                               */
                               public void setBindWS(BindWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindWSTracker = true;
                                       } else {
                                          localBindWSTracker = true;
                                              
                                       }
                                   
                                            this.localBindWS=param;
                                    

                               }
                            

                        /**
                        * field for Binder
                        */

                        
                                    protected boolean localBinder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBinderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getBinder(){
                               return localBinder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Binder
                               */
                               public void setBinder(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localBinderTracker = false;
                                              
                                       } else {
                                          localBinderTracker = true;
                                       }
                                   
                                            this.localBinder=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for CreateYear
                        */

                        
                                    protected java.lang.String localCreateYear ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreateYearTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreateYear(){
                               return localCreateYear;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreateYear
                               */
                               public void setCreateYear(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreateYearTracker = true;
                                       } else {
                                          localCreateYearTracker = true;
                                              
                                       }
                                   
                                            this.localCreateYear=param;
                                    

                               }
                            

                        /**
                        * field for DeptId
                        */

                        
                                    protected java.lang.String localDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeptId(){
                               return localDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeptId
                               */
                               public void setDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeptIdTracker = true;
                                       } else {
                                          localDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localDeptId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
						 * field for EnfDocWS
						 */

                        
                                    protected EnfDocWS localEnfDocWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfDocWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return EnfDocWS
                           */
                           public  EnfDocWS getEnfDocWS(){
                               return localEnfDocWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfDocWS
                               */
                               public void setEnfDocWS(EnfDocWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfDocWSTracker = true;
                                       } else {
                                          localEnfDocWSTracker = true;
                                              
                                       }
                                   
                                            this.localEnfDocWS=param;
                                    

                               }
                            

                        /**
                        * field for Type
                        */

                        
                                    protected java.lang.String localType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getType(){
                               return localType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type
                               */
                               public void setType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTypeTracker = true;
                                       } else {
                                          localTypeTracker = true;
                                              
                                       }
                                   
                                            this.localType=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       DocumentWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DocumentWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DocumentWS",
                           xmlWriter);
                   }

               
                   }
                if (localAppDocWSTracker){
                                    if (localAppDocWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"appDocWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"appDocWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("appDocWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAppDocWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appDocWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localBindWSTracker){
                                    if (localBindWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"bindWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"bindWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("bindWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localBindWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localBinderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"binder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"binder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("binder");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("binder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBinder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreateYearTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"createYear", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"createYear");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("createYear");
                                    }
                                

                                          if (localCreateYear==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreateYear);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deptId");
                                    }
                                

                                          if (localDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfDocWSTracker){
                                    if (localEnfDocWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"enfDocWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"enfDocWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("enfDocWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEnfDocWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfDocWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"type", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"type");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("type");
                                    }
                                

                                          if (localType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAppDocWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "appDocWS"));
                            
                            
                                    elementList.add(localAppDocWS==null?null:
                                    localAppDocWS);
                                } if (localBindWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindWS"));
                            
                            
                                    elementList.add(localBindWS==null?null:
                                    localBindWS);
                                } if (localBinderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "binder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBinder));
                            } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localCreateYearTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "createYear"));
                                 
                                         elementList.add(localCreateYear==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreateYear));
                                    } if (localDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deptId"));
                                 
                                         elementList.add(localDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localEnfDocWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfDocWS"));
                            
                            
                                    elementList.add(localEnfDocWS==null?null:
                                    localEnfDocWS);
                                } if (localTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "type"));
                                 
                                         elementList.add(localType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DocumentWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DocumentWS object =
                new DocumentWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement()) {
                    reader.next();
                }
                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DocumentWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DocumentWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) {
                                    	reader.next();
                                    }
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appDocWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAppDocWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAppDocWS(AppDocWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    while (!reader.isStartElement() && !reader.isEndElement()) {
                                    	reader.next();
                                    }
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setBindWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setBindWS(BindWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    while (!reader.isStartElement() && !reader.isEndElement()) {
                                    	reader.next();
                                    }
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","binder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBinder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    while (!reader.isStartElement() && !reader.isEndElement()) {
                                    	reader.next();
                                    }
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","createYear").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreateYear(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfDocWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEnfDocWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setEnfDocWS(EnfDocWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","type").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class AppOptionWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = AppOptionWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for AppFormId
                        */

                        
                                    protected java.lang.String localAppFormId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppFormIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAppFormId(){
                               return localAppFormId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AppFormId
                               */
                               public void setAppFormId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAppFormIdTracker = true;
                                       } else {
                                          localAppFormIdTracker = true;
                                              
                                       }
                                   
                                            this.localAppFormId=param;
                                    

                               }
                            

                        /**
                        * field for AppFormName
                        */

                        
                                    protected java.lang.String localAppFormName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppFormNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAppFormName(){
                               return localAppFormName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AppFormName
                               */
                               public void setAppFormName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAppFormNameTracker = true;
                                       } else {
                                          localAppFormNameTracker = true;
                                              
                                       }
                                   
                                            this.localAppFormName=param;
                                    

                               }
                            

                        /**
                        * field for BizCode
                        */

                        
                                    protected java.lang.String localBizCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBizCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBizCode(){
                               return localBizCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BizCode
                               */
                               public void setBizCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBizCodeTracker = true;
                                       } else {
                                          localBizCodeTracker = true;
                                              
                                       }
                                   
                                            this.localBizCode=param;
                                    

                               }
                            

                        /**
                        * field for BizName
                        */

                        
                                    protected java.lang.String localBizName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBizNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBizName(){
                               return localBizName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BizName
                               */
                               public void setBizName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBizNameTracker = true;
                                       } else {
                                          localBizNameTracker = true;
                                              
                                       }
                                   
                                            this.localBizName=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for ReqCode
                        */

                        
                                    protected java.lang.String localReqCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReqCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReqCode(){
                               return localReqCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReqCode
                               */
                               public void setReqCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReqCodeTracker = true;
                                       } else {
                                          localReqCodeTracker = true;
                                              
                                       }
                                   
                                            this.localReqCode=param;
                                    

                               }
                            

                        /**
                        * field for ReqName
                        */

                        
                                    protected java.lang.String localReqName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReqNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReqName(){
                               return localReqName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReqName
                               */
                               public void setReqName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReqNameTracker = true;
                                       } else {
                                          localReqNameTracker = true;
                                              
                                       }
                                   
                                            this.localReqName=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       AppOptionWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AppOptionWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AppOptionWS",
                           xmlWriter);
                   }

               
                   }
                if (localAppFormIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"appFormId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"appFormId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("appFormId");
                                    }
                                

                                          if (localAppFormId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAppFormId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAppFormNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"appFormName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"appFormName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("appFormName");
                                    }
                                

                                          if (localAppFormName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAppFormName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBizCodeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bizCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bizCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bizCode");
                                    }
                                

                                          if (localBizCode==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBizCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBizNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bizName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bizName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bizName");
                                    }
                                

                                          if (localBizName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBizName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReqCodeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"reqCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"reqCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("reqCode");
                                    }
                                

                                          if (localReqCode==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReqCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReqNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"reqName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"reqName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("reqName");
                                    }
                                

                                          if (localReqName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReqName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAppFormIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "appFormId"));
                                 
                                         elementList.add(localAppFormId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppFormId));
                                    } if (localAppFormNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "appFormName"));
                                 
                                         elementList.add(localAppFormName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppFormName));
                                    } if (localBizCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bizCode"));
                                 
                                         elementList.add(localBizCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBizCode));
                                    } if (localBizNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bizName"));
                                 
                                         elementList.add(localBizName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBizName));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localReqCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "reqCode"));
                                 
                                         elementList.add(localReqCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReqCode));
                                    } if (localReqNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "reqName"));
                                 
                                         elementList.add(localReqName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReqName));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AppOptionWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AppOptionWS object =
                new AppOptionWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AppOptionWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AppOptionWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appFormId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAppFormId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appFormName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAppFormName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bizCode").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBizCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bizName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBizName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","reqCode").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReqCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","reqName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReqName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class FileWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = FileWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DataHandler
                        */

                        
                                    protected javax.activation.DataHandler localDataHandler ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDataHandlerTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return javax.activation.DataHandler
                           */
                           public  javax.activation.DataHandler getDataHandler(){
                               return localDataHandler;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DataHandler
                               */
                               public void setDataHandler(javax.activation.DataHandler param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDataHandlerTracker = true;
                                       } else {
                                          localDataHandlerTracker = true;
                                              
                                       }
                                   
                                            this.localDataHandler=param;
                                    

                               }
                            

                        /**
                        * field for DisplayName
                        */

                        
                                    protected java.lang.String localDisplayName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDisplayNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDisplayName(){
                               return localDisplayName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DisplayName
                               */
                               public void setDisplayName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDisplayNameTracker = true;
                                       } else {
                                          localDisplayNameTracker = true;
                                              
                                       }
                                   
                                            this.localDisplayName=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for FileId
                        */

                        
                                    protected java.lang.String localFileId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileId(){
                               return localFileId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileId
                               */
                               public void setFileId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFileIdTracker = true;
                                       } else {
                                          localFileIdTracker = true;
                                              
                                       }
                                   
                                            this.localFileId=param;
                                    

                               }
                            

                        /**
                        * field for FileName
                        */

                        
                                    protected java.lang.String localFileName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileName(){
                               return localFileName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileName
                               */
                               public void setFileName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFileNameTracker = true;
                                       } else {
                                          localFileNameTracker = true;
                                              
                                       }
                                   
                                            this.localFileName=param;
                                    

                               }
                            

                        /**
                        * field for FileOrder
                        */

                        
                                    protected int localFileOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getFileOrder(){
                               return localFileOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileOrder
                               */
                               public void setFileOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localFileOrderTracker = false;
                                              
                                       } else {
                                          localFileOrderTracker = true;
                                       }
                                   
                                            this.localFileOrder=param;
                                    

                               }
                            

                        /**
                        * field for FilePath
                        */

                        
                                    protected java.lang.String localFilePath ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilePathTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilePath(){
                               return localFilePath;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilePath
                               */
                               public void setFilePath(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFilePathTracker = true;
                                       } else {
                                          localFilePathTracker = true;
                                              
                                       }
                                   
                                            this.localFilePath=param;
                                    

                               }
                            

                        /**
                        * field for FileSize
                        */

                        
                                    protected long localFileSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileSizeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getFileSize(){
                               return localFileSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileSize
                               */
                               public void setFileSize(long param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Long.MIN_VALUE) {
                                           localFileSizeTracker = false;
                                              
                                       } else {
                                          localFileSizeTracker = true;
                                       }
                                   
                                            this.localFileSize=param;
                                    

                               }
                            

                        /**
                        * field for FileType
                        */

                        
                                    protected java.lang.String localFileType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileType(){
                               return localFileType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileType
                               */
                               public void setFileType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFileTypeTracker = true;
                                       } else {
                                          localFileTypeTracker = true;
                                              
                                       }
                                   
                                            this.localFileType=param;
                                    

                               }
                            

                        /**
                        * field for ImageHeight
                        */

                        
                                    protected int localImageHeight ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localImageHeightTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getImageHeight(){
                               return localImageHeight;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ImageHeight
                               */
                               public void setImageHeight(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localImageHeightTracker = false;
                                              
                                       } else {
                                          localImageHeightTracker = true;
                                       }
                                   
                                            this.localImageHeight=param;
                                    

                               }
                            

                        /**
                        * field for ImageWidth
                        */

                        
                                    protected int localImageWidth ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localImageWidthTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getImageWidth(){
                               return localImageWidth;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ImageWidth
                               */
                               public void setImageWidth(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localImageWidthTracker = false;
                                              
                                       } else {
                                          localImageWidthTracker = true;
                                       }
                                   
                                            this.localImageWidth=param;
                                    

                               }
                            

                        /**
						 * field for InputStream
						 */

                        
                                    protected InputStream localInputStream ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localInputStreamTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return InputStream
                           */
                           public  InputStream getInputStream(){
                               return localInputStream;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param InputStream
                               */
                               public void setInputStream(InputStream param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localInputStreamTracker = true;
                                       } else {
                                          localInputStreamTracker = true;
                                              
                                       }
                                   
                                            this.localInputStream=param;
                                    

                               }
                            

                        /**
                        * field for MimeType
                        */

                        
                                    protected java.lang.String localMimeType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMimeTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMimeType(){
                               return localMimeType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MimeType
                               */
                               public void setMimeType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMimeTypeTracker = true;
                                       } else {
                                          localMimeTypeTracker = true;
                                              
                                       }
                                   
                                            this.localMimeType=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       FileWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":FileWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "FileWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDataHandlerTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"dataHandler", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"dataHandler");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("dataHandler");
                                    }
                                
                                        
                                    if (localDataHandler!=null)
                                    {
                                       xmlWriter.writeDataHandler(localDataHandler);
                                    }
                                 
                                   xmlWriter.writeEndElement();
                             } if (localDisplayNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"displayName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"displayName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("displayName");
                                    }
                                

                                          if (localDisplayName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDisplayName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileId");
                                    }
                                

                                          if (localFileId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileName");
                                    }
                                

                                          if (localFileName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileOrder");
                                    }
                                
                                               if (localFileOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("fileOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilePathTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"filePath", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"filePath");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("filePath");
                                    }
                                

                                          if (localFilePath==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilePath);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileSizeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileSize", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileSize");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileSize");
                                    }
                                
                                               if (localFileSize==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("fileSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileType");
                                    }
                                

                                          if (localFileType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localImageHeightTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"imageHeight", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"imageHeight");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("imageHeight");
                                    }
                                
                                               if (localImageHeight==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("imageHeight cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImageHeight));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localImageWidthTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"imageWidth", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"imageWidth");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("imageWidth");
                                    }
                                
                                               if (localImageWidth==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("imageWidth cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImageWidth));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localInputStreamTracker){
                                    if (localInputStream==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"inputStream", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"inputStream");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("inputStream");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localInputStream.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","inputStream"),
                                        factory,xmlWriter);
                                    }
                                } if (localMimeTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"mimeType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"mimeType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("mimeType");
                                    }
                                

                                          if (localMimeType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMimeType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDataHandlerTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                        "dataHandler"));
                                
                            elementList.add(localDataHandler);
                        } if (localDisplayNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "displayName"));
                                 
                                         elementList.add(localDisplayName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisplayName));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localFileIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileId"));
                                 
                                         elementList.add(localFileId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileId));
                                    } if (localFileNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileName"));
                                 
                                         elementList.add(localFileName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
                                    } if (localFileOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileOrder));
                            } if (localFilePathTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "filePath"));
                                 
                                         elementList.add(localFilePath==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilePath));
                                    } if (localFileSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSize));
                            } if (localFileTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileType"));
                                 
                                         elementList.add(localFileType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileType));
                                    } if (localImageHeightTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "imageHeight"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImageHeight));
                            } if (localImageWidthTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "imageWidth"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImageWidth));
                            } if (localInputStreamTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "inputStream"));
                            
                            
                                    elementList.add(localInputStream==null?null:
                                    localInputStream);
                                } if (localMimeTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "mimeType"));
                                 
                                         elementList.add(localMimeType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMimeType));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static FileWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            FileWS object =
                new FileWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"FileWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (FileWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","dataHandler").equals(reader.getName())){
                                reader.next();
                                    if (isReaderMTOMAware(reader)
                                            &&
                                            java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_BINARY)))
                                    {
                                        //MTOM aware reader - get the datahandler directly and put it in the object
                                        object.setDataHandler(
                                                (javax.activation.DataHandler) reader.getProperty(org.apache.axiom.om.OMConstants.DATA_HANDLER));
                                    } else {
                                        if (reader.getEventType() == javax.xml.stream.XMLStreamConstants.START_ELEMENT && reader.getName().equals(new javax.xml.namespace.QName(org.apache.axiom.om.impl.MTOMConstants.XOP_NAMESPACE_URI, org.apache.axiom.om.impl.MTOMConstants.XOP_INCLUDE)))
                                        {
                                            java.lang.String id = org.apache.axiom.om.util.ElementHelper.getContentID(reader, "UTF-8");
                                            object.setDataHandler(((org.apache.axiom.soap.impl.builder.MTOMStAXSOAPModelBuilder) ((org.apache.axiom.om.impl.llom.OMStAXWrapper) reader).getBuilder()).getDataHandler(id));
                                            reader.next();
                                            
                                                reader.next();
                                            
                                        } else if(reader.hasText()) {
                                            //Do the usual conversion
                                            java.lang.String content = reader.getText();
                                            object.setDataHandler(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(content));
                                            
                                                reader.next();
                                            
                                        }
                                    }

                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","displayName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDisplayName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setFileOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","filePath").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilePath(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileSize").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setFileSize(java.lang.Long.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","imageHeight").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setImageHeight(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setImageHeight(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","imageWidth").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setImageWidth(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setImageWidth(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","inputStream").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setInputStream(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setInputStream(InputStream.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","mimeType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMimeType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class Create
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "create",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for Vo
						 */

                        
                                    protected DocumentWS localVo ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localVoTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return DocumentWS
                           */
                           public  DocumentWS getVo(){
                               return localVo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Vo
                               */
                               public void setVo(DocumentWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localVoTracker = true;
                                       } else {
                                          localVoTracker = true;
                                              
                                       }
                                   
                                            this.localVo=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Create.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":create",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "create",
                           xmlWriter);
                   }

               
                   }
                if (localVoTracker){
                                    if (localVo==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"vo", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"vo");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("vo");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localVo.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","vo"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localVoTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "vo"));
                            
                            
                                    elementList.add(localVo==null?null:
                                    localVo);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Create parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Create object =
                new Create();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"create".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Create)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","vo").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setVo(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setVo(DocumentWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class PubReaderWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = PubReaderWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DeleteYn
                        */

                        
                                    protected java.lang.String localDeleteYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeleteYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeleteYn(){
                               return localDeleteYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeleteYn
                               */
                               public void setDeleteYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeleteYnTracker = true;
                                       } else {
                                          localDeleteYnTracker = true;
                                              
                                       }
                                   
                                            this.localDeleteYn=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for PubReadDate
                        */

                        
                                    protected java.lang.String localPubReadDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReadDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReadDate(){
                               return localPubReadDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReadDate
                               */
                               public void setPubReadDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReadDateTracker = true;
                                       } else {
                                          localPubReadDateTracker = true;
                                              
                                       }
                                   
                                            this.localPubReadDate=param;
                                    

                               }
                            

                        /**
                        * field for PubReaderDeptId
                        */

                        
                                    protected java.lang.String localPubReaderDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReaderDeptId(){
                               return localPubReaderDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderDeptId
                               */
                               public void setPubReaderDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderDeptIdTracker = true;
                                       } else {
                                          localPubReaderDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderDeptId=param;
                                    

                               }
                            

                        /**
                        * field for PubReaderDeptName
                        */

                        
                                    protected java.lang.String localPubReaderDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReaderDeptName(){
                               return localPubReaderDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderDeptName
                               */
                               public void setPubReaderDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderDeptNameTracker = true;
                                       } else {
                                          localPubReaderDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderDeptName=param;
                                    

                               }
                            

                        /**
                        * field for PubReaderId
                        */

                        
                                    protected java.lang.String localPubReaderId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReaderId(){
                               return localPubReaderId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderId
                               */
                               public void setPubReaderId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderIdTracker = true;
                                       } else {
                                          localPubReaderIdTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderId=param;
                                    

                               }
                            

                        /**
                        * field for PubReaderName
                        */

                        
                                    protected java.lang.String localPubReaderName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReaderName(){
                               return localPubReaderName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderName
                               */
                               public void setPubReaderName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderNameTracker = true;
                                       } else {
                                          localPubReaderNameTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderName=param;
                                    

                               }
                            

                        /**
                        * field for PubReaderPos
                        */

                        
                                    protected java.lang.String localPubReaderPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReaderPos(){
                               return localPubReaderPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderPos
                               */
                               public void setPubReaderPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderPosTracker = true;
                                       } else {
                                          localPubReaderPosTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderPos=param;
                                    

                               }
                            

                        /**
                        * field for PubReaderRole
                        */

                        
                                    protected java.lang.String localPubReaderRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReaderRole(){
                               return localPubReaderRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderRole
                               */
                               public void setPubReaderRole(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderRoleTracker = true;
                                       } else {
                                          localPubReaderRoleTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderRole=param;
                                    

                               }
                            

                        /**
                        * field for ReadDate
                        */

                        
                                    protected java.lang.String localReadDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReadDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReadDate(){
                               return localReadDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReadDate
                               */
                               public void setReadDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReadDateTracker = true;
                                       } else {
                                          localReadDateTracker = true;
                                              
                                       }
                                   
                                            this.localReadDate=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
                        * field for UsingType
                        */

                        
                                    protected java.lang.String localUsingType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUsingTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUsingType(){
                               return localUsingType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UsingType
                               */
                               public void setUsingType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUsingTypeTracker = true;
                                       } else {
                                          localUsingTypeTracker = true;
                                              
                                       }
                                   
                                            this.localUsingType=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       PubReaderWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":PubReaderWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "PubReaderWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeleteYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deleteYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deleteYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deleteYn");
                                    }
                                

                                          if (localDeleteYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeleteYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReadDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReadDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReadDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReadDate");
                                    }
                                

                                          if (localPubReadDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReadDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReaderDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReaderDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReaderDeptId");
                                    }
                                

                                          if (localPubReaderDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReaderDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReaderDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReaderDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReaderDeptName");
                                    }
                                

                                          if (localPubReaderDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReaderDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReaderId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReaderId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReaderId");
                                    }
                                

                                          if (localPubReaderId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReaderId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReaderName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReaderName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReaderName");
                                    }
                                

                                          if (localPubReaderName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReaderName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReaderPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReaderPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReaderPos");
                                    }
                                

                                          if (localPubReaderPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReaderPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderRoleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReaderRole", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReaderRole");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReaderRole");
                                    }
                                

                                          if (localPubReaderRole==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReaderRole);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReadDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"readDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"readDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("readDate");
                                    }
                                

                                          if (localReadDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReadDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUsingTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"usingType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"usingType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("usingType");
                                    }
                                

                                          if (localUsingType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUsingType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDeleteYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deleteYn"));
                                 
                                         elementList.add(localDeleteYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteYn));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localPubReadDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReadDate"));
                                 
                                         elementList.add(localPubReadDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReadDate));
                                    } if (localPubReaderDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderDeptId"));
                                 
                                         elementList.add(localPubReaderDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReaderDeptId));
                                    } if (localPubReaderDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderDeptName"));
                                 
                                         elementList.add(localPubReaderDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReaderDeptName));
                                    } if (localPubReaderIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderId"));
                                 
                                         elementList.add(localPubReaderId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReaderId));
                                    } if (localPubReaderNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderName"));
                                 
                                         elementList.add(localPubReaderName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReaderName));
                                    } if (localPubReaderPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderPos"));
                                 
                                         elementList.add(localPubReaderPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReaderPos));
                                    } if (localPubReaderRoleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderRole"));
                                 
                                         elementList.add(localPubReaderRole==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReaderRole));
                                    } if (localReadDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "readDate"));
                                 
                                         elementList.add(localReadDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadDate));
                                    } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localUsingTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "usingType"));
                                 
                                         elementList.add(localUsingType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUsingType));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static PubReaderWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            PubReaderWS object =
                new PubReaderWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"PubReaderWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (PubReaderWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deleteYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeleteYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReadDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReadDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReaderDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReaderDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReaderId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReaderName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReaderPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderRole").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReaderRole(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","readDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReadDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","usingType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUsingType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class RelatedDocWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = RelatedDocWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for OriginDocId
                        */

                        
                                    protected java.lang.String localOriginDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOriginDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOriginDocId(){
                               return localOriginDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OriginDocId
                               */
                               public void setOriginDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOriginDocIdTracker = true;
                                       } else {
                                          localOriginDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localOriginDocId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

                        /**
                        * field for Title
                        */

                        
                                    protected java.lang.String localTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTitle(){
                               return localTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Title
                               */
                               public void setTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTitleTracker = true;
                                       } else {
                                          localTitleTracker = true;
                                              
                                       }
                                   
                                            this.localTitle=param;
                                    

                               }
                            

                        /**
                        * field for UsingType
                        */

                        
                                    protected java.lang.String localUsingType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUsingTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUsingType(){
                               return localUsingType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UsingType
                               */
                               public void setUsingType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUsingTypeTracker = true;
                                       } else {
                                          localUsingTypeTracker = true;
                                              
                                       }
                                   
                                            this.localUsingType=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       RelatedDocWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":RelatedDocWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "RelatedDocWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOriginDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"originDocId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"originDocId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("originDocId");
                                    }
                                

                                          if (localOriginDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOriginDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTitleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"title", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"title");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("title");
                                    }
                                

                                          if (localTitle==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUsingTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"usingType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"usingType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("usingType");
                                    }
                                

                                          if (localUsingType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUsingType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localOriginDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "originDocId"));
                                 
                                         elementList.add(localOriginDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginDocId));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    } if (localTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "title"));
                                 
                                         elementList.add(localTitle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTitle));
                                    } if (localUsingTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "usingType"));
                                 
                                         elementList.add(localUsingType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUsingType));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static RelatedDocWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            RelatedDocWS object =
                new RelatedDocWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"RelatedDocWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (RelatedDocWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","originDocId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOriginDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","title").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","usingType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUsingType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class EnfLineWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = EnfLineWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for AbsentReason
                        */

                        
                                    protected java.lang.String localAbsentReason ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAbsentReasonTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAbsentReason(){
                               return localAbsentReason;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AbsentReason
                               */
                               public void setAbsentReason(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAbsentReasonTracker = true;
                                       } else {
                                          localAbsentReasonTracker = true;
                                              
                                       }
                                   
                                            this.localAbsentReason=param;
                                    

                               }
                            

                        /**
                        * field for AskType
                        */

                        
                                    protected java.lang.String localAskType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAskTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAskType(){
                               return localAskType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AskType
                               */
                               public void setAskType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAskTypeTracker = true;
                                       } else {
                                          localAskTypeTracker = true;
                                              
                                       }
                                   
                                            this.localAskType=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for EditLineYn
                        */

                        
                                    protected java.lang.String localEditLineYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEditLineYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEditLineYn(){
                               return localEditLineYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EditLineYn
                               */
                               public void setEditLineYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEditLineYnTracker = true;
                                       } else {
                                          localEditLineYnTracker = true;
                                              
                                       }
                                   
                                            this.localEditLineYn=param;
                                    

                               }
                            

                        /**
                        * field for FileHisId
                        */

                        
                                    protected java.lang.String localFileHisId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileHisIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileHisId(){
                               return localFileHisId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileHisId
                               */
                               public void setFileHisId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFileHisIdTracker = true;
                                       } else {
                                          localFileHisIdTracker = true;
                                              
                                       }
                                   
                                            this.localFileHisId=param;
                                    

                               }
                            

                        /**
                        * field for LineHisId
                        */

                        
                                    protected java.lang.String localLineHisId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLineHisIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLineHisId(){
                               return localLineHisId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LineHisId
                               */
                               public void setLineHisId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLineHisIdTracker = true;
                                       } else {
                                          localLineHisIdTracker = true;
                                              
                                       }
                                   
                                            this.localLineHisId=param;
                                    

                               }
                            

                        /**
                        * field for LineOrder
                        */

                        
                                    protected int localLineOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLineOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getLineOrder(){
                               return localLineOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LineOrder
                               */
                               public void setLineOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localLineOrderTracker = false;
                                              
                                       } else {
                                          localLineOrderTracker = true;
                                       }
                                   
                                            this.localLineOrder=param;
                                    

                               }
                            

                        /**
                        * field for MobileYn
                        */

                        
                                    protected java.lang.String localMobileYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMobileYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMobileYn(){
                               return localMobileYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MobileYn
                               */
                               public void setMobileYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMobileYnTracker = true;
                                       } else {
                                          localMobileYnTracker = true;
                                              
                                       }
                                   
                                            this.localMobileYn=param;
                                    

                               }
                            

                        /**
                        * field for ProcOpinion
                        */

                        
                                    protected java.lang.String localProcOpinion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcOpinionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcOpinion(){
                               return localProcOpinion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcOpinion
                               */
                               public void setProcOpinion(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcOpinionTracker = true;
                                       } else {
                                          localProcOpinionTracker = true;
                                              
                                       }
                                   
                                            this.localProcOpinion=param;
                                    

                               }
                            

                        /**
                        * field for ProcType
                        */

                        
                                    protected java.lang.String localProcType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcType(){
                               return localProcType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcType
                               */
                               public void setProcType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcTypeTracker = true;
                                       } else {
                                          localProcTypeTracker = true;
                                              
                                       }
                                   
                                            this.localProcType=param;
                                    

                               }
                            

                        /**
                        * field for ProcessDate
                        */

                        
                                    protected java.lang.String localProcessDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessDate(){
                               return localProcessDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessDate
                               */
                               public void setProcessDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessDateTracker = true;
                                       } else {
                                          localProcessDateTracker = true;
                                              
                                       }
                                   
                                            this.localProcessDate=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorDeptId
                        */

                        
                                    protected java.lang.String localProcessorDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorDeptId(){
                               return localProcessorDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorDeptId
                               */
                               public void setProcessorDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorDeptIdTracker = true;
                                       } else {
                                          localProcessorDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorDeptName
                        */

                        
                                    protected java.lang.String localProcessorDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorDeptName(){
                               return localProcessorDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorDeptName
                               */
                               public void setProcessorDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorDeptNameTracker = true;
                                       } else {
                                          localProcessorDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorDeptName=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorName
                        */

                        
                                    protected java.lang.String localProcessorName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorName(){
                               return localProcessorName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorName
                               */
                               public void setProcessorName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorNameTracker = true;
                                       } else {
                                          localProcessorNameTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorName=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorPos
                        */

                        
                                    protected java.lang.String localProcessorPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorPos(){
                               return localProcessorPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorPos
                               */
                               public void setProcessorPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorPosTracker = true;
                                       } else {
                                          localProcessorPosTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorPos=param;
                                    

                               }
                            

                        /**
                        * field for ReadDate
                        */

                        
                                    protected java.lang.String localReadDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReadDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReadDate(){
                               return localReadDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReadDate
                               */
                               public void setReadDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReadDateTracker = true;
                                       } else {
                                          localReadDateTracker = true;
                                              
                                       }
                                   
                                            this.localReadDate=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeDeptId
                        */

                        
                                    protected java.lang.String localRepresentativeDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeDeptId(){
                               return localRepresentativeDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeDeptId
                               */
                               public void setRepresentativeDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeDeptIdTracker = true;
                                       } else {
                                          localRepresentativeDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeDeptName
                        */

                        
                                    protected java.lang.String localRepresentativeDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeDeptName(){
                               return localRepresentativeDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeDeptName
                               */
                               public void setRepresentativeDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeDeptNameTracker = true;
                                       } else {
                                          localRepresentativeDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeDeptName=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeId
                        */

                        
                                    protected java.lang.String localRepresentativeId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeId(){
                               return localRepresentativeId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeId
                               */
                               public void setRepresentativeId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeIdTracker = true;
                                       } else {
                                          localRepresentativeIdTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeId=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeName
                        */

                        
                                    protected java.lang.String localRepresentativeName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeName(){
                               return localRepresentativeName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeName
                               */
                               public void setRepresentativeName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeNameTracker = true;
                                       } else {
                                          localRepresentativeNameTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeName=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativePos
                        */

                        
                                    protected java.lang.String localRepresentativePos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativePosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativePos(){
                               return localRepresentativePos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativePos
                               */
                               public void setRepresentativePos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativePosTracker = true;
                                       } else {
                                          localRepresentativePosTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativePos=param;
                                    

                               }
                            

                        /**
                        * field for SignFileName
                        */

                        
                                    protected java.lang.String localSignFileName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSignFileNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSignFileName(){
                               return localSignFileName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SignFileName
                               */
                               public void setSignFileName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSignFileNameTracker = true;
                                       } else {
                                          localSignFileNameTracker = true;
                                              
                                       }
                                   
                                            this.localSignFileName=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       EnfLineWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":EnfLineWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "EnfLineWS",
                           xmlWriter);
                   }

               
                   }
                if (localAbsentReasonTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"absentReason", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"absentReason");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("absentReason");
                                    }
                                

                                          if (localAbsentReason==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAbsentReason);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAskTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"askType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"askType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("askType");
                                    }
                                

                                          if (localAskType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAskType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEditLineYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"editLineYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"editLineYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("editLineYn");
                                    }
                                

                                          if (localEditLineYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEditLineYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileHisIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileHisId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileHisId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileHisId");
                                    }
                                

                                          if (localFileHisId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileHisId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLineHisIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lineHisId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lineHisId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lineHisId");
                                    }
                                

                                          if (localLineHisId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLineHisId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLineOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lineOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lineOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lineOrder");
                                    }
                                
                                               if (localLineOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("lineOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMobileYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"mobileYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"mobileYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("mobileYn");
                                    }
                                

                                          if (localMobileYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMobileYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcOpinionTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"procOpinion", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"procOpinion");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("procOpinion");
                                    }
                                

                                          if (localProcOpinion==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcOpinion);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"procType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"procType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("procType");
                                    }
                                

                                          if (localProcType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processDate");
                                    }
                                

                                          if (localProcessDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorDeptId");
                                    }
                                

                                          if (localProcessorDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorDeptName");
                                    }
                                

                                          if (localProcessorDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorName");
                                    }
                                

                                          if (localProcessorName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorPos");
                                    }
                                

                                          if (localProcessorPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReadDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"readDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"readDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("readDate");
                                    }
                                

                                          if (localReadDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReadDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeDeptId");
                                    }
                                

                                          if (localRepresentativeDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeDeptName");
                                    }
                                

                                          if (localRepresentativeDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeId");
                                    }
                                

                                          if (localRepresentativeId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeName");
                                    }
                                

                                          if (localRepresentativeName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativePosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativePos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativePos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativePos");
                                    }
                                

                                          if (localRepresentativePos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativePos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSignFileNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"signFileName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"signFileName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("signFileName");
                                    }
                                

                                          if (localSignFileName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSignFileName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAbsentReasonTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "absentReason"));
                                 
                                         elementList.add(localAbsentReason==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAbsentReason));
                                    } if (localAskTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "askType"));
                                 
                                         elementList.add(localAskType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAskType));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localEditLineYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "editLineYn"));
                                 
                                         elementList.add(localEditLineYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEditLineYn));
                                    } if (localFileHisIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileHisId"));
                                 
                                         elementList.add(localFileHisId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileHisId));
                                    } if (localLineHisIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lineHisId"));
                                 
                                         elementList.add(localLineHisId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineHisId));
                                    } if (localLineOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lineOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineOrder));
                            } if (localMobileYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "mobileYn"));
                                 
                                         elementList.add(localMobileYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMobileYn));
                                    } if (localProcOpinionTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "procOpinion"));
                                 
                                         elementList.add(localProcOpinion==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcOpinion));
                                    } if (localProcTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "procType"));
                                 
                                         elementList.add(localProcType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcType));
                                    } if (localProcessDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processDate"));
                                 
                                         elementList.add(localProcessDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessDate));
                                    } if (localProcessorDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorDeptId"));
                                 
                                         elementList.add(localProcessorDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorDeptId));
                                    } if (localProcessorDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorDeptName"));
                                 
                                         elementList.add(localProcessorDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorDeptName));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localProcessorNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorName"));
                                 
                                         elementList.add(localProcessorName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorName));
                                    } if (localProcessorPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorPos"));
                                 
                                         elementList.add(localProcessorPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorPos));
                                    } if (localReadDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "readDate"));
                                 
                                         elementList.add(localReadDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadDate));
                                    } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localRepresentativeDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeDeptId"));
                                 
                                         elementList.add(localRepresentativeDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeDeptId));
                                    } if (localRepresentativeDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeDeptName"));
                                 
                                         elementList.add(localRepresentativeDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeDeptName));
                                    } if (localRepresentativeIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeId"));
                                 
                                         elementList.add(localRepresentativeId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeId));
                                    } if (localRepresentativeNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeName"));
                                 
                                         elementList.add(localRepresentativeName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeName));
                                    } if (localRepresentativePosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativePos"));
                                 
                                         elementList.add(localRepresentativePos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativePos));
                                    } if (localSignFileNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "signFileName"));
                                 
                                         elementList.add(localSignFileName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSignFileName));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static EnfLineWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            EnfLineWS object =
                new EnfLineWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"EnfLineWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (EnfLineWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","absentReason").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAbsentReason(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","askType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAskType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","editLineYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEditLineYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileHisId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileHisId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lineHisId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLineHisId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lineOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLineOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setLineOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","mobileYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMobileYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","procOpinion").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcOpinion(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","procType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","readDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReadDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativePos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativePos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","signFileName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSignFileName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class InputStream
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = InputStream
                Namespace URI = http://io.java/xsd
                Namespace Prefix = ns3
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://io.java/xsd")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       InputStream.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://io.java/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":InputStream",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "InputStream",
                           xmlWriter);
                   }

               
                   }
               
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static InputStream parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            InputStream object =
                new InputStream();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"InputStream".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (InputStream)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ResponseBean
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ResponseBean
                Namespace URI = http://bean.ws.dms.ion.net/xsd
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://bean.ws.dms.ion.net/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Message
                        */

                        
                                    protected java.lang.String localMessage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMessageTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMessage(){
                               return localMessage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Message
                               */
                               public void setMessage(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMessageTracker = true;
                                       } else {
                                          localMessageTracker = true;
                                              
                                       }
                                   
                                            this.localMessage=param;
                                    

                               }
                            

                        /**
                        * field for Success
                        */

                        
                                    protected boolean localSuccess ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuccessTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getSuccess(){
                               return localSuccess;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Success
                               */
                               public void setSuccess(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localSuccessTracker = false;
                                              
                                       } else {
                                          localSuccessTracker = true;
                                       }
                                   
                                            this.localSuccess=param;
                                    

                               }
                            

                        /**
                        * field for Title
                        */

                        
                                    protected java.lang.String localTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTitle(){
                               return localTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Title
                               */
                               public void setTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTitleTracker = true;
                                       } else {
                                          localTitleTracker = true;
                                              
                                       }
                                   
                                            this.localTitle=param;
                                    

                               }
                            

                        /**
                        * field for Uuid
                        */

                        
                                    protected java.lang.String localUuid ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUuidTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUuid(){
                               return localUuid;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Uuid
                               */
                               public void setUuid(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUuidTracker = true;
                                       } else {
                                          localUuidTracker = true;
                                              
                                       }
                                   
                                            this.localUuid=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ResponseBean.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://bean.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ResponseBean",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ResponseBean",
                           xmlWriter);
                   }

               
                   }
                if (localMessageTracker){
                                    namespace = "http://bean.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"message", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"message");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("message");
                                    }
                                

                                          if (localMessage==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMessage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSuccessTracker){
                                    namespace = "http://bean.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"success", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"success");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("success");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("success cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuccess));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTitleTracker){
                                    namespace = "http://bean.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"title", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"title");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("title");
                                    }
                                

                                          if (localTitle==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUuidTracker){
                                    namespace = "http://bean.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"uuid", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"uuid");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("uuid");
                                    }
                                

                                          if (localUuid==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUuid);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localMessageTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd",
                                                                      "message"));
                                 
                                         elementList.add(localMessage==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessage));
                                    } if (localSuccessTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd",
                                                                      "success"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuccess));
                            } if (localTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd",
                                                                      "title"));
                                 
                                         elementList.add(localTitle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTitle));
                                    } if (localUuidTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd",
                                                                      "uuid"));
                                 
                                         elementList.add(localUuid==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUuid));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ResponseBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ResponseBean object =
                new ResponseBean();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ResponseBean".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ResponseBean)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd","message").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMessage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd","success").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuccess(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd","title").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://bean.ws.dms.ion.net/xsd","uuid").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUuid(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class RelatedRuleWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = RelatedRuleWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for RuleId
                        */

                        
                                    protected java.lang.String localRuleId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRuleIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRuleId(){
                               return localRuleId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RuleId
                               */
                               public void setRuleId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRuleIdTracker = true;
                                       } else {
                                          localRuleIdTracker = true;
                                              
                                       }
                                   
                                            this.localRuleId=param;
                                    

                               }
                            

                        /**
                        * field for RuleLink
                        */

                        
                                    protected java.lang.String localRuleLink ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRuleLinkTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRuleLink(){
                               return localRuleLink;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RuleLink
                               */
                               public void setRuleLink(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRuleLinkTracker = true;
                                       } else {
                                          localRuleLinkTracker = true;
                                              
                                       }
                                   
                                            this.localRuleLink=param;
                                    

                               }
                            

                        /**
                        * field for RuleName
                        */

                        
                                    protected java.lang.String localRuleName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRuleNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRuleName(){
                               return localRuleName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RuleName
                               */
                               public void setRuleName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRuleNameTracker = true;
                                       } else {
                                          localRuleNameTracker = true;
                                              
                                       }
                                   
                                            this.localRuleName=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       RelatedRuleWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":RelatedRuleWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "RelatedRuleWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRuleIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ruleId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ruleId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ruleId");
                                    }
                                

                                          if (localRuleId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRuleId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRuleLinkTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ruleLink", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ruleLink");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ruleLink");
                                    }
                                

                                          if (localRuleLink==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRuleLink);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRuleNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ruleName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ruleName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ruleName");
                                    }
                                

                                          if (localRuleName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRuleName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localRuleIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "ruleId"));
                                 
                                         elementList.add(localRuleId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleId));
                                    } if (localRuleLinkTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "ruleLink"));
                                 
                                         elementList.add(localRuleLink==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleLink));
                                    } if (localRuleNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "ruleName"));
                                 
                                         elementList.add(localRuleName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleName));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static RelatedRuleWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            RelatedRuleWS object =
                new RelatedRuleWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"RelatedRuleWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (RelatedRuleWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ruleId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRuleId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ruleLink").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRuleLink(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ruleName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRuleName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class EnfRecvWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = EnfRecvWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for EnfType
                        */

                        
                                    protected java.lang.String localEnfType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfType(){
                               return localEnfType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfType
                               */
                               public void setEnfType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfTypeTracker = true;
                                       } else {
                                          localEnfTypeTracker = true;
                                              
                                       }
                                   
                                            this.localEnfType=param;
                                    

                               }
                            

                        /**
                        * field for OriginDocId
                        */

                        
                                    protected java.lang.String localOriginDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOriginDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOriginDocId(){
                               return localOriginDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OriginDocId
                               */
                               public void setOriginDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOriginDocIdTracker = true;
                                       } else {
                                          localOriginDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localOriginDocId=param;
                                    

                               }
                            

                        /**
                        * field for ReSendRecvOrder
                        */

                        
                                    protected java.lang.String localReSendRecvOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReSendRecvOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReSendRecvOrder(){
                               return localReSendRecvOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReSendRecvOrder
                               */
                               public void setReSendRecvOrder(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReSendRecvOrderTracker = true;
                                       } else {
                                          localReSendRecvOrderTracker = true;
                                              
                                       }
                                   
                                            this.localReSendRecvOrder=param;
                                    

                               }
                            

                        /**
                        * field for ReceiverOrder
                        */

                        
                                    protected int localReceiverOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiverOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getReceiverOrder(){
                               return localReceiverOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiverOrder
                               */
                               public void setReceiverOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localReceiverOrderTracker = false;
                                              
                                       } else {
                                          localReceiverOrderTracker = true;
                                       }
                                   
                                            this.localReceiverOrder=param;
                                    

                               }
                            

                        /**
                        * field for ReceiverType
                        */

                        
                                    protected java.lang.String localReceiverType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiverTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReceiverType(){
                               return localReceiverType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiverType
                               */
                               public void setReceiverType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReceiverTypeTracker = true;
                                       } else {
                                          localReceiverTypeTracker = true;
                                              
                                       }
                                   
                                            this.localReceiverType=param;
                                    

                               }
                            

                        /**
                        * field for RecvCompId
                        */

                        
                                    protected java.lang.String localRecvCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvCompId(){
                               return localRecvCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvCompId
                               */
                               public void setRecvCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvCompIdTracker = true;
                                       } else {
                                          localRecvCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localRecvCompId=param;
                                    

                               }
                            

                        /**
                        * field for RecvDeptId
                        */

                        
                                    protected java.lang.String localRecvDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvDeptId(){
                               return localRecvDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvDeptId
                               */
                               public void setRecvDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvDeptIdTracker = true;
                                       } else {
                                          localRecvDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRecvDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RecvDeptName
                        */

                        
                                    protected java.lang.String localRecvDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvDeptName(){
                               return localRecvDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvDeptName
                               */
                               public void setRecvDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvDeptNameTracker = true;
                                       } else {
                                          localRecvDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRecvDeptName=param;
                                    

                               }
                            

                        /**
                        * field for RecvUserId
                        */

                        
                                    protected java.lang.String localRecvUserId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvUserIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvUserId(){
                               return localRecvUserId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvUserId
                               */
                               public void setRecvUserId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvUserIdTracker = true;
                                       } else {
                                          localRecvUserIdTracker = true;
                                              
                                       }
                                   
                                            this.localRecvUserId=param;
                                    

                               }
                            

                        /**
                        * field for RecvUserName
                        */

                        
                                    protected java.lang.String localRecvUserName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvUserNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvUserName(){
                               return localRecvUserName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvUserName
                               */
                               public void setRecvUserName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvUserNameTracker = true;
                                       } else {
                                          localRecvUserNameTracker = true;
                                              
                                       }
                                   
                                            this.localRecvUserName=param;
                                    

                               }
                            

                        /**
                        * field for RefDeptId
                        */

                        
                                    protected java.lang.String localRefDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRefDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRefDeptId(){
                               return localRefDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RefDeptId
                               */
                               public void setRefDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRefDeptIdTracker = true;
                                       } else {
                                          localRefDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRefDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RefDeptName
                        */

                        
                                    protected java.lang.String localRefDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRefDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRefDeptName(){
                               return localRefDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RefDeptName
                               */
                               public void setRefDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRefDeptNameTracker = true;
                                       } else {
                                          localRefDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRefDeptName=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       EnfRecvWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":EnfRecvWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "EnfRecvWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfType");
                                    }
                                

                                          if (localEnfType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOriginDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"originDocId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"originDocId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("originDocId");
                                    }
                                

                                          if (localOriginDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOriginDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReSendRecvOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"reSendRecvOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"reSendRecvOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("reSendRecvOrder");
                                    }
                                

                                          if (localReSendRecvOrder==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReSendRecvOrder);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiverOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiverOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiverOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiverOrder");
                                    }
                                
                                               if (localReceiverOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("receiverOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiverTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiverType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiverType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiverType");
                                    }
                                

                                          if (localReceiverType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReceiverType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvCompId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvCompId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvCompId");
                                    }
                                

                                          if (localRecvCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvDeptId");
                                    }
                                

                                          if (localRecvDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvDeptName");
                                    }
                                

                                          if (localRecvDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvUserIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvUserId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvUserId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvUserId");
                                    }
                                

                                          if (localRecvUserId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvUserId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvUserNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvUserName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvUserName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvUserName");
                                    }
                                

                                          if (localRecvUserName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvUserName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRefDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"refDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"refDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("refDeptId");
                                    }
                                

                                          if (localRefDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRefDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRefDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"refDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"refDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("refDeptName");
                                    }
                                

                                          if (localRefDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRefDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localEnfTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfType"));
                                 
                                         elementList.add(localEnfType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfType));
                                    } if (localOriginDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "originDocId"));
                                 
                                         elementList.add(localOriginDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginDocId));
                                    } if (localReSendRecvOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "reSendRecvOrder"));
                                 
                                         elementList.add(localReSendRecvOrder==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReSendRecvOrder));
                                    } if (localReceiverOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiverOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverOrder));
                            } if (localReceiverTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiverType"));
                                 
                                         elementList.add(localReceiverType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverType));
                                    } if (localRecvCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvCompId"));
                                 
                                         elementList.add(localRecvCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvCompId));
                                    } if (localRecvDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvDeptId"));
                                 
                                         elementList.add(localRecvDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptId));
                                    } if (localRecvDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvDeptName"));
                                 
                                         elementList.add(localRecvDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptName));
                                    } if (localRecvUserIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvUserId"));
                                 
                                         elementList.add(localRecvUserId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvUserId));
                                    } if (localRecvUserNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvUserName"));
                                 
                                         elementList.add(localRecvUserName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvUserName));
                                    } if (localRefDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "refDeptId"));
                                 
                                         elementList.add(localRefDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefDeptId));
                                    } if (localRefDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "refDeptName"));
                                 
                                         elementList.add(localRefDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefDeptName));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static EnfRecvWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            EnfRecvWS object =
                new EnfRecvWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"EnfRecvWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (EnfRecvWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","originDocId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOriginDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","reSendRecvOrder").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReSendRecvOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiverOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiverOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setReceiverOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiverType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiverType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvCompId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvUserId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvUserId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvUserName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvUserName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","refDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRefDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","refDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRefDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class AppLineWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = AppLineWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for AbsentReason
                        */

                        
                                    protected java.lang.String localAbsentReason ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAbsentReasonTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAbsentReason(){
                               return localAbsentReason;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AbsentReason
                               */
                               public void setAbsentReason(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAbsentReasonTracker = true;
                                       } else {
                                          localAbsentReasonTracker = true;
                                              
                                       }
                                   
                                            this.localAbsentReason=param;
                                    

                               }
                            

                        /**
                        * field for ApproverDeptId
                        */

                        
                                    protected java.lang.String localApproverDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverDeptId(){
                               return localApproverDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverDeptId
                               */
                               public void setApproverDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverDeptIdTracker = true;
                                       } else {
                                          localApproverDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localApproverDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ApproverDeptName
                        */

                        
                                    protected java.lang.String localApproverDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverDeptName(){
                               return localApproverDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverDeptName
                               */
                               public void setApproverDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverDeptNameTracker = true;
                                       } else {
                                          localApproverDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localApproverDeptName=param;
                                    

                               }
                            

                        /**
                        * field for ApproverId
                        */

                        
                                    protected java.lang.String localApproverId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverId(){
                               return localApproverId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverId
                               */
                               public void setApproverId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverIdTracker = true;
                                       } else {
                                          localApproverIdTracker = true;
                                              
                                       }
                                   
                                            this.localApproverId=param;
                                    

                               }
                            

                        /**
                        * field for ApproverName
                        */

                        
                                    protected java.lang.String localApproverName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverName(){
                               return localApproverName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverName
                               */
                               public void setApproverName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverNameTracker = true;
                                       } else {
                                          localApproverNameTracker = true;
                                              
                                       }
                                   
                                            this.localApproverName=param;
                                    

                               }
                            

                        /**
                        * field for ApproverPos
                        */

                        
                                    protected java.lang.String localApproverPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverPos(){
                               return localApproverPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverPos
                               */
                               public void setApproverPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverPosTracker = true;
                                       } else {
                                          localApproverPosTracker = true;
                                              
                                       }
                                   
                                            this.localApproverPos=param;
                                    

                               }
                            

                        /**
                        * field for ApproverRole
                        */

                        
                                    protected java.lang.String localApproverRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverRole(){
                               return localApproverRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverRole
                               */
                               public void setApproverRole(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverRoleTracker = true;
                                       } else {
                                          localApproverRoleTracker = true;
                                              
                                       }
                                   
                                            this.localApproverRole=param;
                                    

                               }
                            

                        /**
                        * field for AskType
                        */

                        
                                    protected java.lang.String localAskType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAskTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAskType(){
                               return localAskType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AskType
                               */
                               public void setAskType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAskTypeTracker = true;
                                       } else {
                                          localAskTypeTracker = true;
                                              
                                       }
                                   
                                            this.localAskType=param;
                                    

                               }
                            

                        /**
                        * field for BodyHisId
                        */

                        
                                    protected java.lang.String localBodyHisId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBodyHisIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBodyHisId(){
                               return localBodyHisId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BodyHisId
                               */
                               public void setBodyHisId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBodyHisIdTracker = true;
                                       } else {
                                          localBodyHisIdTracker = true;
                                              
                                       }
                                   
                                            this.localBodyHisId=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for EditAttachYn
                        */

                        
                                    protected java.lang.String localEditAttachYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEditAttachYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEditAttachYn(){
                               return localEditAttachYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EditAttachYn
                               */
                               public void setEditAttachYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEditAttachYnTracker = true;
                                       } else {
                                          localEditAttachYnTracker = true;
                                              
                                       }
                                   
                                            this.localEditAttachYn=param;
                                    

                               }
                            

                        /**
                        * field for EditBodyYn
                        */

                        
                                    protected java.lang.String localEditBodyYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEditBodyYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEditBodyYn(){
                               return localEditBodyYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EditBodyYn
                               */
                               public void setEditBodyYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEditBodyYnTracker = true;
                                       } else {
                                          localEditBodyYnTracker = true;
                                              
                                       }
                                   
                                            this.localEditBodyYn=param;
                                    

                               }
                            

                        /**
                        * field for EditLineYn
                        */

                        
                                    protected java.lang.String localEditLineYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEditLineYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEditLineYn(){
                               return localEditLineYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EditLineYn
                               */
                               public void setEditLineYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEditLineYnTracker = true;
                                       } else {
                                          localEditLineYnTracker = true;
                                              
                                       }
                                   
                                            this.localEditLineYn=param;
                                    

                               }
                            

                        /**
                        * field for FileHisId
                        */

                        
                                    protected java.lang.String localFileHisId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileHisIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileHisId(){
                               return localFileHisId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileHisId
                               */
                               public void setFileHisId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFileHisIdTracker = true;
                                       } else {
                                          localFileHisIdTracker = true;
                                              
                                       }
                                   
                                            this.localFileHisId=param;
                                    

                               }
                            

                        /**
                        * field for LineHisId
                        */

                        
                                    protected java.lang.String localLineHisId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLineHisIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLineHisId(){
                               return localLineHisId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LineHisId
                               */
                               public void setLineHisId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLineHisIdTracker = true;
                                       } else {
                                          localLineHisIdTracker = true;
                                              
                                       }
                                   
                                            this.localLineHisId=param;
                                    

                               }
                            

                        /**
                        * field for LineNum
                        */

                        
                                    protected int localLineNum ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLineNumTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getLineNum(){
                               return localLineNum;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LineNum
                               */
                               public void setLineNum(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localLineNumTracker = false;
                                              
                                       } else {
                                          localLineNumTracker = true;
                                       }
                                   
                                            this.localLineNum=param;
                                    

                               }
                            

                        /**
                        * field for LineOrder
                        */

                        
                                    protected int localLineOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLineOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getLineOrder(){
                               return localLineOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LineOrder
                               */
                               public void setLineOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localLineOrderTracker = false;
                                              
                                       } else {
                                          localLineOrderTracker = true;
                                       }
                                   
                                            this.localLineOrder=param;
                                    

                               }
                            

                        /**
                        * field for LineSubOrder
                        */

                        
                                    protected int localLineSubOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLineSubOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getLineSubOrder(){
                               return localLineSubOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LineSubOrder
                               */
                               public void setLineSubOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localLineSubOrderTracker = false;
                                              
                                       } else {
                                          localLineSubOrderTracker = true;
                                       }
                                   
                                            this.localLineSubOrder=param;
                                    

                               }
                            

                        /**
                        * field for MobileYn
                        */

                        
                                    protected java.lang.String localMobileYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMobileYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMobileYn(){
                               return localMobileYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MobileYn
                               */
                               public void setMobileYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMobileYnTracker = true;
                                       } else {
                                          localMobileYnTracker = true;
                                              
                                       }
                                   
                                            this.localMobileYn=param;
                                    

                               }
                            

                        /**
                        * field for ProcOpinion
                        */

                        
                                    protected java.lang.String localProcOpinion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcOpinionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcOpinion(){
                               return localProcOpinion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcOpinion
                               */
                               public void setProcOpinion(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcOpinionTracker = true;
                                       } else {
                                          localProcOpinionTracker = true;
                                              
                                       }
                                   
                                            this.localProcOpinion=param;
                                    

                               }
                            

                        /**
                        * field for ProcType
                        */

                        
                                    protected java.lang.String localProcType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcType(){
                               return localProcType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcType
                               */
                               public void setProcType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcTypeTracker = true;
                                       } else {
                                          localProcTypeTracker = true;
                                              
                                       }
                                   
                                            this.localProcType=param;
                                    

                               }
                            

                        /**
                        * field for ProcessDate
                        */

                        
                                    protected java.lang.String localProcessDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessDate(){
                               return localProcessDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessDate
                               */
                               public void setProcessDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessDateTracker = true;
                                       } else {
                                          localProcessDateTracker = true;
                                              
                                       }
                                   
                                            this.localProcessDate=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for ReadDate
                        */

                        
                                    protected java.lang.String localReadDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReadDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReadDate(){
                               return localReadDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReadDate
                               */
                               public void setReadDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReadDateTracker = true;
                                       } else {
                                          localReadDateTracker = true;
                                              
                                       }
                                   
                                            this.localReadDate=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeDeptId
                        */

                        
                                    protected java.lang.String localRepresentativeDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeDeptId(){
                               return localRepresentativeDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeDeptId
                               */
                               public void setRepresentativeDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeDeptIdTracker = true;
                                       } else {
                                          localRepresentativeDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeDeptName
                        */

                        
                                    protected java.lang.String localRepresentativeDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeDeptName(){
                               return localRepresentativeDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeDeptName
                               */
                               public void setRepresentativeDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeDeptNameTracker = true;
                                       } else {
                                          localRepresentativeDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeDeptName=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeId
                        */

                        
                                    protected java.lang.String localRepresentativeId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeId(){
                               return localRepresentativeId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeId
                               */
                               public void setRepresentativeId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeIdTracker = true;
                                       } else {
                                          localRepresentativeIdTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeId=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativeName
                        */

                        
                                    protected java.lang.String localRepresentativeName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativeNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativeName(){
                               return localRepresentativeName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativeName
                               */
                               public void setRepresentativeName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativeNameTracker = true;
                                       } else {
                                          localRepresentativeNameTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativeName=param;
                                    

                               }
                            

                        /**
                        * field for RepresentativePos
                        */

                        
                                    protected java.lang.String localRepresentativePos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRepresentativePosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRepresentativePos(){
                               return localRepresentativePos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RepresentativePos
                               */
                               public void setRepresentativePos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRepresentativePosTracker = true;
                                       } else {
                                          localRepresentativePosTracker = true;
                                              
                                       }
                                   
                                            this.localRepresentativePos=param;
                                    

                               }
                            

                        /**
                        * field for SignFileName
                        */

                        
                                    protected java.lang.String localSignFileName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSignFileNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSignFileName(){
                               return localSignFileName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SignFileName
                               */
                               public void setSignFileName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSignFileNameTracker = true;
                                       } else {
                                          localSignFileNameTracker = true;
                                              
                                       }
                                   
                                            this.localSignFileName=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       AppLineWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AppLineWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AppLineWS",
                           xmlWriter);
                   }

               
                   }
                if (localAbsentReasonTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"absentReason", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"absentReason");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("absentReason");
                                    }
                                

                                          if (localAbsentReason==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAbsentReason);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverDeptId");
                                    }
                                

                                          if (localApproverDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverDeptName");
                                    }
                                

                                          if (localApproverDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverId");
                                    }
                                

                                          if (localApproverId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverName");
                                    }
                                

                                          if (localApproverName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverPos");
                                    }
                                

                                          if (localApproverPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverRoleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverRole", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverRole");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverRole");
                                    }
                                

                                          if (localApproverRole==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverRole);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAskTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"askType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"askType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("askType");
                                    }
                                

                                          if (localAskType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAskType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBodyHisIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bodyHisId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bodyHisId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bodyHisId");
                                    }
                                

                                          if (localBodyHisId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBodyHisId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEditAttachYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"editAttachYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"editAttachYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("editAttachYn");
                                    }
                                

                                          if (localEditAttachYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEditAttachYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEditBodyYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"editBodyYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"editBodyYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("editBodyYn");
                                    }
                                

                                          if (localEditBodyYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEditBodyYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEditLineYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"editLineYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"editLineYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("editLineYn");
                                    }
                                

                                          if (localEditLineYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEditLineYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileHisIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fileHisId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fileHisId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fileHisId");
                                    }
                                

                                          if (localFileHisId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileHisId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLineHisIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lineHisId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lineHisId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lineHisId");
                                    }
                                

                                          if (localLineHisId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLineHisId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLineNumTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lineNum", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lineNum");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lineNum");
                                    }
                                
                                               if (localLineNum==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("lineNum cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineNum));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLineOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lineOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lineOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lineOrder");
                                    }
                                
                                               if (localLineOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("lineOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLineSubOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lineSubOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lineSubOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lineSubOrder");
                                    }
                                
                                               if (localLineSubOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("lineSubOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineSubOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMobileYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"mobileYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"mobileYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("mobileYn");
                                    }
                                

                                          if (localMobileYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMobileYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcOpinionTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"procOpinion", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"procOpinion");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("procOpinion");
                                    }
                                

                                          if (localProcOpinion==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcOpinion);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"procType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"procType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("procType");
                                    }
                                

                                          if (localProcType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processDate");
                                    }
                                

                                          if (localProcessDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReadDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"readDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"readDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("readDate");
                                    }
                                

                                          if (localReadDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReadDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeDeptId");
                                    }
                                

                                          if (localRepresentativeDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeDeptName");
                                    }
                                

                                          if (localRepresentativeDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeId");
                                    }
                                

                                          if (localRepresentativeId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativeNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativeName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativeName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativeName");
                                    }
                                

                                          if (localRepresentativeName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativeName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRepresentativePosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"representativePos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"representativePos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("representativePos");
                                    }
                                

                                          if (localRepresentativePos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRepresentativePos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSignFileNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"signFileName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"signFileName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("signFileName");
                                    }
                                

                                          if (localSignFileName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSignFileName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAbsentReasonTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "absentReason"));
                                 
                                         elementList.add(localAbsentReason==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAbsentReason));
                                    } if (localApproverDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverDeptId"));
                                 
                                         elementList.add(localApproverDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverDeptId));
                                    } if (localApproverDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverDeptName"));
                                 
                                         elementList.add(localApproverDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverDeptName));
                                    } if (localApproverIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverId"));
                                 
                                         elementList.add(localApproverId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverId));
                                    } if (localApproverNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverName"));
                                 
                                         elementList.add(localApproverName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverName));
                                    } if (localApproverPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverPos"));
                                 
                                         elementList.add(localApproverPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverPos));
                                    } if (localApproverRoleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverRole"));
                                 
                                         elementList.add(localApproverRole==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverRole));
                                    } if (localAskTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "askType"));
                                 
                                         elementList.add(localAskType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAskType));
                                    } if (localBodyHisIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bodyHisId"));
                                 
                                         elementList.add(localBodyHisId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBodyHisId));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localEditAttachYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "editAttachYn"));
                                 
                                         elementList.add(localEditAttachYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEditAttachYn));
                                    } if (localEditBodyYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "editBodyYn"));
                                 
                                         elementList.add(localEditBodyYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEditBodyYn));
                                    } if (localEditLineYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "editLineYn"));
                                 
                                         elementList.add(localEditLineYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEditLineYn));
                                    } if (localFileHisIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fileHisId"));
                                 
                                         elementList.add(localFileHisId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileHisId));
                                    } if (localLineHisIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lineHisId"));
                                 
                                         elementList.add(localLineHisId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineHisId));
                                    } if (localLineNumTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lineNum"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineNum));
                            } if (localLineOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lineOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineOrder));
                            } if (localLineSubOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lineSubOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLineSubOrder));
                            } if (localMobileYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "mobileYn"));
                                 
                                         elementList.add(localMobileYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMobileYn));
                                    } if (localProcOpinionTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "procOpinion"));
                                 
                                         elementList.add(localProcOpinion==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcOpinion));
                                    } if (localProcTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "procType"));
                                 
                                         elementList.add(localProcType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcType));
                                    } if (localProcessDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processDate"));
                                 
                                         elementList.add(localProcessDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessDate));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localReadDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "readDate"));
                                 
                                         elementList.add(localReadDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadDate));
                                    } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localRepresentativeDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeDeptId"));
                                 
                                         elementList.add(localRepresentativeDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeDeptId));
                                    } if (localRepresentativeDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeDeptName"));
                                 
                                         elementList.add(localRepresentativeDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeDeptName));
                                    } if (localRepresentativeIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeId"));
                                 
                                         elementList.add(localRepresentativeId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeId));
                                    } if (localRepresentativeNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativeName"));
                                 
                                         elementList.add(localRepresentativeName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativeName));
                                    } if (localRepresentativePosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "representativePos"));
                                 
                                         elementList.add(localRepresentativePos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRepresentativePos));
                                    } if (localSignFileNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "signFileName"));
                                 
                                         elementList.add(localSignFileName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSignFileName));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AppLineWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AppLineWS object =
                new AppLineWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AppLineWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AppLineWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","absentReason").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAbsentReason(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverRole").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverRole(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","askType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAskType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bodyHisId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBodyHisId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","editAttachYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEditAttachYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","editBodyYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEditBodyYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","editLineYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEditLineYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileHisId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileHisId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lineHisId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLineHisId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lineNum").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLineNum(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setLineNum(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lineOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLineOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setLineOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lineSubOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLineSubOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setLineSubOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","mobileYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMobileYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","procOpinion").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcOpinion(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","procType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","readDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReadDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativeName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativeName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","representativePos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRepresentativePos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","signFileName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSignFileName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Retrieve
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "retrieve",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Retrieve.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":retrieve",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "retrieve",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://service.ws.dms.ion.net";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://service.ws.dms.ion.net";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Retrieve parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Retrieve object =
                new Retrieve();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"retrieve".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Retrieve)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class MoveResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "moveResponse",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for _return
						 */

                        
                                    protected ResponseBean local_return ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean local_returnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ResponseBean
                           */
                           public  ResponseBean get_return(){
                               return local_return;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param _return
                               */
                               public void set_return(ResponseBean param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          local_returnTracker = true;
                                       } else {
                                          local_returnTracker = true;
                                              
                                       }
                                   
                                            this.local_return=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       MoveResponse.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":moveResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "moveResponse",
                           xmlWriter);
                   }

               
                   }
                if (local_returnTracker){
                                    if (local_return==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"return", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"return");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("return");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     local_return.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (local_returnTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "return"));
                            
                            
                                    elementList.add(local_return==null?null:
                                    local_return);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static MoveResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            MoveResponse object =
                new MoveResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"moveResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (MoveResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.set_return(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.set_return(ResponseBean.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class AppDocWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = AppDocWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for AppLineWSs This was an Array!
						 */

                        
                                    protected AppLineWS[] localAppLineWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppLineWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return AppLineWS[]
                           */
                           public  AppLineWS[] getAppLineWSs(){
                               return localAppLineWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for AppLineWSs
                               */
                              protected void validateAppLineWSs(AppLineWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param AppLineWSs
                              */
                              public void setAppLineWSs(AppLineWS[] param){
                              
                                   validateAppLineWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localAppLineWSsTracker = true;
                                          } else {
                                             localAppLineWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localAppLineWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param AppLineWS
                             */
                             public void addAppLineWSs(AppLineWS param){
                                   if (localAppLineWSs == null){
                                   localAppLineWSs = new AppLineWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localAppLineWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localAppLineWSs);
                               list.add(param);
                               this.localAppLineWSs =
                             (AppLineWS[])list.toArray(
                            new AppLineWS[list.size()]);

                             }
                             

                        /**
						 * field for AppOptionWS
						 */

                        
                                    protected AppOptionWS localAppOptionWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppOptionWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return AppOptionWS
                           */
                           public  AppOptionWS getAppOptionWS(){
                               return localAppOptionWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AppOptionWS
                               */
                               public void setAppOptionWS(AppOptionWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAppOptionWSTracker = true;
                                       } else {
                                          localAppOptionWSTracker = true;
                                              
                                       }
                                   
                                            this.localAppOptionWS=param;
                                    

                               }
                            

                        /**
						 * field for AppRecvWSs This was an Array!
						 */

                        
                                    protected AppRecvWS[] localAppRecvWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppRecvWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return AppRecvWS[]
                           */
                           public  AppRecvWS[] getAppRecvWSs(){
                               return localAppRecvWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for AppRecvWSs
                               */
                              protected void validateAppRecvWSs(AppRecvWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param AppRecvWSs
                              */
                              public void setAppRecvWSs(AppRecvWS[] param){
                              
                                   validateAppRecvWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localAppRecvWSsTracker = true;
                                          } else {
                                             localAppRecvWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localAppRecvWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param AppRecvWS
                             */
                             public void addAppRecvWSs(AppRecvWS param){
                                   if (localAppRecvWSs == null){
                                   localAppRecvWSs = new AppRecvWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localAppRecvWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localAppRecvWSs);
                               list.add(param);
                               this.localAppRecvWSs =
                             (AppRecvWS[])list.toArray(
                            new AppRecvWS[list.size()]);

                             }
                             

                        /**
                        * field for ApprovalDate
                        */

                        
                                    protected java.lang.String localApprovalDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApprovalDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApprovalDate(){
                               return localApprovalDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApprovalDate
                               */
                               public void setApprovalDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApprovalDateTracker = true;
                                       } else {
                                          localApprovalDateTracker = true;
                                              
                                       }
                                   
                                            this.localApprovalDate=param;
                                    

                               }
                            

                        /**
                        * field for ApproverDeptId
                        */

                        
                                    protected java.lang.String localApproverDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverDeptId(){
                               return localApproverDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverDeptId
                               */
                               public void setApproverDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverDeptIdTracker = true;
                                       } else {
                                          localApproverDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localApproverDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ApproverDeptName
                        */

                        
                                    protected java.lang.String localApproverDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverDeptName(){
                               return localApproverDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverDeptName
                               */
                               public void setApproverDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverDeptNameTracker = true;
                                       } else {
                                          localApproverDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localApproverDeptName=param;
                                    

                               }
                            

                        /**
                        * field for ApproverId
                        */

                        
                                    protected java.lang.String localApproverId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverId(){
                               return localApproverId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverId
                               */
                               public void setApproverId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverIdTracker = true;
                                       } else {
                                          localApproverIdTracker = true;
                                              
                                       }
                                   
                                            this.localApproverId=param;
                                    

                               }
                            

                        /**
                        * field for ApproverName
                        */

                        
                                    protected java.lang.String localApproverName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverName(){
                               return localApproverName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverName
                               */
                               public void setApproverName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverNameTracker = true;
                                       } else {
                                          localApproverNameTracker = true;
                                              
                                       }
                                   
                                            this.localApproverName=param;
                                    

                               }
                            

                        /**
                        * field for ApproverPos
                        */

                        
                                    protected java.lang.String localApproverPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApproverPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApproverPos(){
                               return localApproverPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApproverPos
                               */
                               public void setApproverPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApproverPosTracker = true;
                                       } else {
                                          localApproverPosTracker = true;
                                              
                                       }
                                   
                                            this.localApproverPos=param;
                                    

                               }
                            

                        /**
                        * field for AttachCount
                        */

                        
                                    protected int localAttachCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAttachCountTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getAttachCount(){
                               return localAttachCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AttachCount
                               */
                               public void setAttachCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localAttachCountTracker = false;
                                              
                                       } else {
                                          localAttachCountTracker = true;
                                       }
                                   
                                            this.localAttachCount=param;
                                    

                               }
                            

                        /**
                        * field for AuditDivision
                        */

                        
                                    protected java.lang.String localAuditDivision ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuditDivisionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAuditDivision(){
                               return localAuditDivision;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuditDivision
                               */
                               public void setAuditDivision(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAuditDivisionTracker = true;
                                       } else {
                                          localAuditDivisionTracker = true;
                                              
                                       }
                                   
                                            this.localAuditDivision=param;
                                    

                               }
                            

                        /**
                        * field for AuditReadReason
                        */

                        
                                    protected java.lang.String localAuditReadReason ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuditReadReasonTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAuditReadReason(){
                               return localAuditReadReason;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuditReadReason
                               */
                               public void setAuditReadReason(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAuditReadReasonTracker = true;
                                       } else {
                                          localAuditReadReasonTracker = true;
                                              
                                       }
                                   
                                            this.localAuditReadReason=param;
                                    

                               }
                            

                        /**
                        * field for AuditReadYn
                        */

                        
                                    protected java.lang.String localAuditReadYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuditReadYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAuditReadYn(){
                               return localAuditReadYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuditReadYn
                               */
                               public void setAuditReadYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAuditReadYnTracker = true;
                                       } else {
                                          localAuditReadYnTracker = true;
                                              
                                       }
                                   
                                            this.localAuditReadYn=param;
                                    

                               }
                            

                        /**
                        * field for AuditYn
                        */

                        
                                    protected java.lang.String localAuditYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuditYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAuditYn(){
                               return localAuditYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuditYn
                               */
                               public void setAuditYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAuditYnTracker = true;
                                       } else {
                                          localAuditYnTracker = true;
                                              
                                       }
                                   
                                            this.localAuditYn=param;
                                    

                               }
                            

                        /**
                        * field for AutoSendYn
                        */

                        
                                    protected java.lang.String localAutoSendYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAutoSendYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAutoSendYn(){
                               return localAutoSendYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AutoSendYn
                               */
                               public void setAutoSendYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAutoSendYnTracker = true;
                                       } else {
                                          localAutoSendYnTracker = true;
                                              
                                       }
                                   
                                            this.localAutoSendYn=param;
                                    

                               }
                            

                        /**
                        * field for BatchDraftNumber
                        */

                        
                                    protected int localBatchDraftNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBatchDraftNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getBatchDraftNumber(){
                               return localBatchDraftNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BatchDraftNumber
                               */
                               public void setBatchDraftNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localBatchDraftNumberTracker = false;
                                              
                                       } else {
                                          localBatchDraftNumberTracker = true;
                                       }
                                   
                                            this.localBatchDraftNumber=param;
                                    

                               }
                            

                        /**
                        * field for BatchDraftYn
                        */

                        
                                    protected java.lang.String localBatchDraftYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBatchDraftYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBatchDraftYn(){
                               return localBatchDraftYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BatchDraftYn
                               */
                               public void setBatchDraftYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBatchDraftYnTracker = true;
                                       } else {
                                          localBatchDraftYnTracker = true;
                                              
                                       }
                                   
                                            this.localBatchDraftYn=param;
                                    

                               }
                            

                        /**
                        * field for BindingId
                        */

                        
                                    protected java.lang.String localBindingId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindingIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBindingId(){
                               return localBindingId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindingId
                               */
                               public void setBindingId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindingIdTracker = true;
                                       } else {
                                          localBindingIdTracker = true;
                                              
                                       }
                                   
                                            this.localBindingId=param;
                                    

                               }
                            

                        /**
                        * field for BindingName
                        */

                        
                                    protected java.lang.String localBindingName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindingNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBindingName(){
                               return localBindingName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindingName
                               */
                               public void setBindingName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindingNameTracker = true;
                                       } else {
                                          localBindingNameTracker = true;
                                              
                                       }
                                   
                                            this.localBindingName=param;
                                    

                               }
                            

                        /**
                        * field for BizSystemCode
                        */

                        
                                    protected java.lang.String localBizSystemCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBizSystemCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBizSystemCode(){
                               return localBizSystemCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BizSystemCode
                               */
                               public void setBizSystemCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBizSystemCodeTracker = true;
                                       } else {
                                          localBizSystemCodeTracker = true;
                                              
                                       }
                                   
                                            this.localBizSystemCode=param;
                                    

                               }
                            

                        /**
                        * field for BizSystemName
                        */

                        
                                    protected java.lang.String localBizSystemName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBizSystemNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBizSystemName(){
                               return localBizSystemName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BizSystemName
                               */
                               public void setBizSystemName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBizSystemNameTracker = true;
                                       } else {
                                          localBizSystemNameTracker = true;
                                              
                                       }
                                   
                                            this.localBizSystemName=param;
                                    

                               }
                            

                        /**
                        * field for BizTypeCode
                        */

                        
                                    protected java.lang.String localBizTypeCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBizTypeCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBizTypeCode(){
                               return localBizTypeCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BizTypeCode
                               */
                               public void setBizTypeCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBizTypeCodeTracker = true;
                                       } else {
                                          localBizTypeCodeTracker = true;
                                              
                                       }
                                   
                                            this.localBizTypeCode=param;
                                    

                               }
                            

                        /**
                        * field for CategoryName
                        */

                        
                                    protected java.lang.String localCategoryName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCategoryNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCategoryName(){
                               return localCategoryName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CategoryName
                               */
                               public void setCategoryName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCategoryNameTracker = true;
                                       } else {
                                          localCategoryNameTracker = true;
                                              
                                       }
                                   
                                            this.localCategoryName=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for ConserveType
                        */

                        
                                    protected java.lang.String localConserveType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localConserveTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getConserveType(){
                               return localConserveType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ConserveType
                               */
                               public void setConserveType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localConserveTypeTracker = true;
                                       } else {
                                          localConserveTypeTracker = true;
                                              
                                       }
                                   
                                            this.localConserveType=param;
                                    

                               }
                            

                        /**
						 * field for CustomerWSs This was an Array!
						 */

                        
                                    protected CustomerWS[] localCustomerWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCustomerWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return CustomerWS[]
                           */
                           public  CustomerWS[] getCustomerWSs(){
                               return localCustomerWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for CustomerWSs
                               */
                              protected void validateCustomerWSs(CustomerWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param CustomerWSs
                              */
                              public void setCustomerWSs(CustomerWS[] param){
                              
                                   validateCustomerWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localCustomerWSsTracker = true;
                                          } else {
                                             localCustomerWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localCustomerWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param CustomerWS
                             */
                             public void addCustomerWSs(CustomerWS param){
                                   if (localCustomerWSs == null){
                                   localCustomerWSs = new CustomerWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localCustomerWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localCustomerWSs);
                               list.add(param);
                               this.localCustomerWSs =
                             (CustomerWS[])list.toArray(
                            new CustomerWS[list.size()]);

                             }
                             

                        /**
                        * field for DeleteYn
                        */

                        
                                    protected java.lang.String localDeleteYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeleteYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeleteYn(){
                               return localDeleteYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeleteYn
                               */
                               public void setDeleteYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeleteYnTracker = true;
                                       } else {
                                          localDeleteYnTracker = true;
                                              
                                       }
                                   
                                            this.localDeleteYn=param;
                                    

                               }
                            

                        /**
                        * field for DeptCategory
                        */

                        
                                    protected java.lang.String localDeptCategory ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeptCategoryTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeptCategory(){
                               return localDeptCategory;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeptCategory
                               */
                               public void setDeptCategory(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeptCategoryTracker = true;
                                       } else {
                                          localDeptCategoryTracker = true;
                                              
                                       }
                                   
                                            this.localDeptCategory=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for DocSource
                        */

                        
                                    protected java.lang.String localDocSource ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocSourceTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocSource(){
                               return localDocSource;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocSource
                               */
                               public void setDocSource(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocSourceTracker = true;
                                       } else {
                                          localDocSourceTracker = true;
                                              
                                       }
                                   
                                            this.localDocSource=param;
                                    

                               }
                            

                        /**
                        * field for DocState
                        */

                        
                                    protected java.lang.String localDocState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocState(){
                               return localDocState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocState
                               */
                               public void setDocState(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocStateTracker = true;
                                       } else {
                                          localDocStateTracker = true;
                                              
                                       }
                                   
                                            this.localDocState=param;
                                    

                               }
                            

                        /**
                        * field for DocType
                        */

                        
                                    protected java.lang.String localDocType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocType(){
                               return localDocType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocType
                               */
                               public void setDocType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocTypeTracker = true;
                                       } else {
                                          localDocTypeTracker = true;
                                              
                                       }
                                   
                                            this.localDocType=param;
                                    

                               }
                            

                        /**
                        * field for DoubleYn
                        */

                        
                                    protected java.lang.String localDoubleYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDoubleYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDoubleYn(){
                               return localDoubleYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DoubleYn
                               */
                               public void setDoubleYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDoubleYnTracker = true;
                                       } else {
                                          localDoubleYnTracker = true;
                                              
                                       }
                                   
                                            this.localDoubleYn=param;
                                    

                               }
                            

                        /**
                        * field for DraftDate
                        */

                        
                                    protected java.lang.String localDraftDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDraftDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDraftDate(){
                               return localDraftDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DraftDate
                               */
                               public void setDraftDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDraftDateTracker = true;
                                       } else {
                                          localDraftDateTracker = true;
                                              
                                       }
                                   
                                            this.localDraftDate=param;
                                    

                               }
                            

                        /**
                        * field for DrafterDeptId
                        */

                        
                                    protected java.lang.String localDrafterDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDrafterDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDrafterDeptId(){
                               return localDrafterDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DrafterDeptId
                               */
                               public void setDrafterDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDrafterDeptIdTracker = true;
                                       } else {
                                          localDrafterDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localDrafterDeptId=param;
                                    

                               }
                            

                        /**
                        * field for DrafterDeptName
                        */

                        
                                    protected java.lang.String localDrafterDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDrafterDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDrafterDeptName(){
                               return localDrafterDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DrafterDeptName
                               */
                               public void setDrafterDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDrafterDeptNameTracker = true;
                                       } else {
                                          localDrafterDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localDrafterDeptName=param;
                                    

                               }
                            

                        /**
                        * field for DrafterId
                        */

                        
                                    protected java.lang.String localDrafterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDrafterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDrafterId(){
                               return localDrafterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DrafterId
                               */
                               public void setDrafterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDrafterIdTracker = true;
                                       } else {
                                          localDrafterIdTracker = true;
                                              
                                       }
                                   
                                            this.localDrafterId=param;
                                    

                               }
                            

                        /**
                        * field for DrafterName
                        */

                        
                                    protected java.lang.String localDrafterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDrafterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDrafterName(){
                               return localDrafterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DrafterName
                               */
                               public void setDrafterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDrafterNameTracker = true;
                                       } else {
                                          localDrafterNameTracker = true;
                                              
                                       }
                                   
                                            this.localDrafterName=param;
                                    

                               }
                            

                        /**
                        * field for DrafterPos
                        */

                        
                                    protected java.lang.String localDrafterPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDrafterPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDrafterPos(){
                               return localDrafterPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DrafterPos
                               */
                               public void setDrafterPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDrafterPosTracker = true;
                                       } else {
                                          localDrafterPosTracker = true;
                                              
                                       }
                                   
                                            this.localDrafterPos=param;
                                    

                               }
                            

                        /**
                        * field for EditbodyYn
                        */

                        
                                    protected java.lang.String localEditbodyYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEditbodyYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEditbodyYn(){
                               return localEditbodyYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EditbodyYn
                               */
                               public void setEditbodyYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEditbodyYnTracker = true;
                                       } else {
                                          localEditbodyYnTracker = true;
                                              
                                       }
                                   
                                            this.localEditbodyYn=param;
                                    

                               }
                            

                        /**
                        * field for EditfileYn
                        */

                        
                                    protected java.lang.String localEditfileYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEditfileYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEditfileYn(){
                               return localEditfileYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EditfileYn
                               */
                               public void setEditfileYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEditfileYnTracker = true;
                                       } else {
                                          localEditfileYnTracker = true;
                                              
                                       }
                                   
                                            this.localEditfileYn=param;
                                    

                               }
                            

                        /**
                        * field for ElectronDocYn
                        */

                        
                                    protected java.lang.String localElectronDocYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localElectronDocYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getElectronDocYn(){
                               return localElectronDocYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ElectronDocYn
                               */
                               public void setElectronDocYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localElectronDocYnTracker = true;
                                       } else {
                                          localElectronDocYnTracker = true;
                                              
                                       }
                                   
                                            this.localElectronDocYn=param;
                                    

                               }
                            

                        /**
                        * field for EnfType
                        */

                        
                                    protected java.lang.String localEnfType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfType(){
                               return localEnfType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfType
                               */
                               public void setEnfType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfTypeTracker = true;
                                       } else {
                                          localEnfTypeTracker = true;
                                              
                                       }
                                   
                                            this.localEnfType=param;
                                    

                               }
                            

                        /**
                        * field for ExecDeptId
                        */

                        
                                    protected java.lang.String localExecDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExecDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExecDeptId(){
                               return localExecDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExecDeptId
                               */
                               public void setExecDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExecDeptIdTracker = true;
                                       } else {
                                          localExecDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localExecDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ExecDeptName
                        */

                        
                                    protected java.lang.String localExecDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExecDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExecDeptName(){
                               return localExecDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExecDeptName
                               */
                               public void setExecDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExecDeptNameTracker = true;
                                       } else {
                                          localExecDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localExecDeptName=param;
                                    

                               }
                            

                        /**
						 * field for FileWSs This was an Array!
						 */

                        
                                    protected FileWS[] localFileWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return FileWS[]
                           */
                           public  FileWS[] getFileWSs(){
                               return localFileWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for FileWSs
                               */
                              protected void validateFileWSs(FileWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param FileWSs
                              */
                              public void setFileWSs(FileWS[] param){
                              
                                   validateFileWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localFileWSsTracker = true;
                                          } else {
                                             localFileWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localFileWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param FileWS
                             */
                             public void addFileWSs(FileWS param){
                                   if (localFileWSs == null){
                                   localFileWSs = new FileWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localFileWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localFileWSs);
                               list.add(param);
                               this.localFileWSs =
                             (FileWS[])list.toArray(
                            new FileWS[list.size()]);

                             }
                             

                        /**
                        * field for HandoverYn
                        */

                        
                                    protected java.lang.String localHandoverYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHandoverYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHandoverYn(){
                               return localHandoverYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HandoverYn
                               */
                               public void setHandoverYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHandoverYnTracker = true;
                                       } else {
                                          localHandoverYnTracker = true;
                                              
                                       }
                                   
                                            this.localHandoverYn=param;
                                    

                               }
                            

                        /**
                        * field for LastUpdateDate
                        */

                        
                                    protected java.lang.String localLastUpdateDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastUpdateDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLastUpdateDate(){
                               return localLastUpdateDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastUpdateDate
                               */
                               public void setLastUpdateDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastUpdateDateTracker = true;
                                       } else {
                                          localLastUpdateDateTracker = true;
                                              
                                       }
                                   
                                            this.localLastUpdateDate=param;
                                    

                               }
                            

                        /**
                        * field for MobileYn
                        */

                        
                                    protected java.lang.String localMobileYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMobileYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMobileYn(){
                               return localMobileYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MobileYn
                               */
                               public void setMobileYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMobileYnTracker = true;
                                       } else {
                                          localMobileYnTracker = true;
                                              
                                       }
                                   
                                            this.localMobileYn=param;
                                    

                               }
                            

                        /**
						 * field for NonElectronWS
						 */

                        
                                    protected NonElectronWS localNonElectronWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNonElectronWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return NonElectronWS
                           */
                           public  NonElectronWS getNonElectronWS(){
                               return localNonElectronWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NonElectronWS
                               */
                               public void setNonElectronWS(NonElectronWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNonElectronWSTracker = true;
                                       } else {
                                          localNonElectronWSTracker = true;
                                              
                                       }
                                   
                                            this.localNonElectronWS=param;
                                    

                               }
                            

                        /**
                        * field for OpenLevel
                        */

                        
                                    protected java.lang.String localOpenLevel ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenLevelTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenLevel(){
                               return localOpenLevel;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenLevel
                               */
                               public void setOpenLevel(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOpenLevelTracker = true;
                                       } else {
                                          localOpenLevelTracker = true;
                                              
                                       }
                                   
                                            this.localOpenLevel=param;
                                    

                               }
                            

                        /**
                        * field for OpenReason
                        */

                        
                                    protected java.lang.String localOpenReason ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenReasonTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenReason(){
                               return localOpenReason;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenReason
                               */
                               public void setOpenReason(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOpenReasonTracker = true;
                                       } else {
                                          localOpenReasonTracker = true;
                                              
                                       }
                                   
                                            this.localOpenReason=param;
                                    

                               }
                            

                        /**
                        * field for OriginDocId
                        */

                        
                                    protected java.lang.String localOriginDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOriginDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOriginDocId(){
                               return localOriginDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OriginDocId
                               */
                               public void setOriginDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOriginDocIdTracker = true;
                                       } else {
                                          localOriginDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localOriginDocId=param;
                                    

                               }
                            

                        /**
                        * field for OriginDocNumber
                        */

                        
                                    protected java.lang.String localOriginDocNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOriginDocNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOriginDocNumber(){
                               return localOriginDocNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OriginDocNumber
                               */
                               public void setOriginDocNumber(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOriginDocNumberTracker = true;
                                       } else {
                                          localOriginDocNumberTracker = true;
                                              
                                       }
                                   
                                            this.localOriginDocNumber=param;
                                    

                               }
                            

                        /**
						 * field for OwnDeptWSs This was an Array!
						 */

                        
                                    protected OwnDeptWS[] localOwnDeptWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnDeptWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return OwnDeptWS[]
                           */
                           public  OwnDeptWS[] getOwnDeptWSs(){
                               return localOwnDeptWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for OwnDeptWSs
                               */
                              protected void validateOwnDeptWSs(OwnDeptWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param OwnDeptWSs
                              */
                              public void setOwnDeptWSs(OwnDeptWS[] param){
                              
                                   validateOwnDeptWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localOwnDeptWSsTracker = true;
                                          } else {
                                             localOwnDeptWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localOwnDeptWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param OwnDeptWS
                             */
                             public void addOwnDeptWSs(OwnDeptWS param){
                                   if (localOwnDeptWSs == null){
                                   localOwnDeptWSs = new OwnDeptWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localOwnDeptWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localOwnDeptWSs);
                               list.add(param);
                               this.localOwnDeptWSs =
                             (OwnDeptWS[])list.toArray(
                            new OwnDeptWS[list.size()]);

                             }
                             

                        /**
                        * field for ProcType
                        */

                        
                                    protected java.lang.String localProcType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcType(){
                               return localProcType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcType
                               */
                               public void setProcType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcTypeTracker = true;
                                       } else {
                                          localProcTypeTracker = true;
                                              
                                       }
                                   
                                            this.localProcType=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorDeptId
                        */

                        
                                    protected java.lang.String localProcessorDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorDeptId(){
                               return localProcessorDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorDeptId
                               */
                               public void setProcessorDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorDeptIdTracker = true;
                                       } else {
                                          localProcessorDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorDeptName
                        */

                        
                                    protected java.lang.String localProcessorDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorDeptName(){
                               return localProcessorDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorDeptName
                               */
                               public void setProcessorDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorDeptNameTracker = true;
                                       } else {
                                          localProcessorDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorDeptName=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorName
                        */

                        
                                    protected java.lang.String localProcessorName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorName(){
                               return localProcessorName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorName
                               */
                               public void setProcessorName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorNameTracker = true;
                                       } else {
                                          localProcessorNameTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorName=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorPos
                        */

                        
                                    protected java.lang.String localProcessorPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorPos(){
                               return localProcessorPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorPos
                               */
                               public void setProcessorPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorPosTracker = true;
                                       } else {
                                          localProcessorPosTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorPos=param;
                                    

                               }
                            

                        /**
                        * field for PubReadDate
                        */

                        
                                    protected java.lang.String localPubReadDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReadDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPubReadDate(){
                               return localPubReadDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReadDate
                               */
                               public void setPubReadDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReadDateTracker = true;
                                       } else {
                                          localPubReadDateTracker = true;
                                              
                                       }
                                   
                                            this.localPubReadDate=param;
                                    

                               }
                            

                        /**
						 * field for PubReaderWS
						 */

                        
                                    protected PubReaderWS localPubReaderWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReaderWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return PubReaderWS
                           */
                           public  PubReaderWS getPubReaderWS(){
                               return localPubReaderWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PubReaderWS
                               */
                               public void setPubReaderWS(PubReaderWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPubReaderWSTracker = true;
                                       } else {
                                          localPubReaderWSTracker = true;
                                              
                                       }
                                   
                                            this.localPubReaderWS=param;
                                    

                               }
                            

                        /**
                        * field for PublicPost
                        */

                        
                                    protected java.lang.String localPublicPost ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPublicPostTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPublicPost(){
                               return localPublicPost;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PublicPost
                               */
                               public void setPublicPost(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPublicPostTracker = true;
                                       } else {
                                          localPublicPostTracker = true;
                                              
                                       }
                                   
                                            this.localPublicPost=param;
                                    

                               }
                            

                        /**
                        * field for ReadRange
                        */

                        
                                    protected java.lang.String localReadRange ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReadRangeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReadRange(){
                               return localReadRange;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReadRange
                               */
                               public void setReadRange(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReadRangeTracker = true;
                                       } else {
                                          localReadRangeTracker = true;
                                              
                                       }
                                   
                                            this.localReadRange=param;
                                    

                               }
                            

                        /**
                        * field for RecvDeptCnt
                        */

                        
                                    protected int localRecvDeptCnt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvDeptCntTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getRecvDeptCnt(){
                               return localRecvDeptCnt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvDeptCnt
                               */
                               public void setRecvDeptCnt(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localRecvDeptCntTracker = false;
                                              
                                       } else {
                                          localRecvDeptCntTracker = true;
                                       }
                                   
                                            this.localRecvDeptCnt=param;
                                    

                               }
                            

                        /**
                        * field for RecvDeptNames
                        */

                        
                                    protected java.lang.String localRecvDeptNames ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvDeptNamesTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvDeptNames(){
                               return localRecvDeptNames;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvDeptNames
                               */
                               public void setRecvDeptNames(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvDeptNamesTracker = true;
                                       } else {
                                          localRecvDeptNamesTracker = true;
                                              
                                       }
                                   
                                            this.localRecvDeptNames=param;
                                    

                               }
                            

                        /**
                        * field for RedraftDocId
                        */

                        
                                    protected java.lang.String localRedraftDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRedraftDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRedraftDocId(){
                               return localRedraftDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RedraftDocId
                               */
                               public void setRedraftDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRedraftDocIdTracker = true;
                                       } else {
                                          localRedraftDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localRedraftDocId=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
						 * field for RelatedDocWSs This was an Array!
						 */

                        
                                    protected RelatedDocWS[] localRelatedDocWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRelatedDocWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return RelatedDocWS[]
                           */
                           public  RelatedDocWS[] getRelatedDocWSs(){
                               return localRelatedDocWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for RelatedDocWSs
                               */
                              protected void validateRelatedDocWSs(RelatedDocWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param RelatedDocWSs
                              */
                              public void setRelatedDocWSs(RelatedDocWS[] param){
                              
                                   validateRelatedDocWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localRelatedDocWSsTracker = true;
                                          } else {
                                             localRelatedDocWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localRelatedDocWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param RelatedDocWS
                             */
                             public void addRelatedDocWSs(RelatedDocWS param){
                                   if (localRelatedDocWSs == null){
                                   localRelatedDocWSs = new RelatedDocWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localRelatedDocWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localRelatedDocWSs);
                               list.add(param);
                               this.localRelatedDocWSs =
                             (RelatedDocWS[])list.toArray(
                            new RelatedDocWS[list.size()]);

                             }
                             

                        /**
						 * field for RelatedRuleWSs This was an Array!
						 */

                        
                                    protected RelatedRuleWS[] localRelatedRuleWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRelatedRuleWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return RelatedRuleWS[]
                           */
                           public  RelatedRuleWS[] getRelatedRuleWSs(){
                               return localRelatedRuleWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for RelatedRuleWSs
                               */
                              protected void validateRelatedRuleWSs(RelatedRuleWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param RelatedRuleWSs
                              */
                              public void setRelatedRuleWSs(RelatedRuleWS[] param){
                              
                                   validateRelatedRuleWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localRelatedRuleWSsTracker = true;
                                          } else {
                                             localRelatedRuleWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localRelatedRuleWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param RelatedRuleWS
                             */
                             public void addRelatedRuleWSs(RelatedRuleWS param){
                                   if (localRelatedRuleWSs == null){
                                   localRelatedRuleWSs = new RelatedRuleWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localRelatedRuleWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localRelatedRuleWSs);
                               list.add(param);
                               this.localRelatedRuleWSs =
                             (RelatedRuleWS[])list.toArray(
                            new RelatedRuleWS[list.size()]);

                             }
                             

                        /**
                        * field for RequesterDeptId
                        */

                        
                                    protected java.lang.String localRequesterDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRequesterDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRequesterDeptId(){
                               return localRequesterDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RequesterDeptId
                               */
                               public void setRequesterDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRequesterDeptIdTracker = true;
                                       } else {
                                          localRequesterDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRequesterDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RequesterDeptName
                        */

                        
                                    protected java.lang.String localRequesterDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRequesterDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRequesterDeptName(){
                               return localRequesterDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RequesterDeptName
                               */
                               public void setRequesterDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRequesterDeptNameTracker = true;
                                       } else {
                                          localRequesterDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRequesterDeptName=param;
                                    

                               }
                            

                        /**
                        * field for RequesterId
                        */

                        
                                    protected java.lang.String localRequesterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRequesterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRequesterId(){
                               return localRequesterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RequesterId
                               */
                               public void setRequesterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRequesterIdTracker = true;
                                       } else {
                                          localRequesterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRequesterId=param;
                                    

                               }
                            

                        /**
                        * field for RequesterName
                        */

                        
                                    protected java.lang.String localRequesterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRequesterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRequesterName(){
                               return localRequesterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RequesterName
                               */
                               public void setRequesterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRequesterNameTracker = true;
                                       } else {
                                          localRequesterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRequesterName=param;
                                    

                               }
                            

                        /**
                        * field for ReturnDocYn
                        */

                        
                                    protected java.lang.String localReturnDocYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReturnDocYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReturnDocYn(){
                               return localReturnDocYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReturnDocYn
                               */
                               public void setReturnDocYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReturnDocYnTracker = true;
                                       } else {
                                          localReturnDocYnTracker = true;
                                              
                                       }
                                   
                                            this.localReturnDocYn=param;
                                    

                               }
                            

                        /**
                        * field for SealDate
                        */

                        
                                    protected java.lang.String localSealDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSealDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSealDate(){
                               return localSealDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SealDate
                               */
                               public void setSealDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSealDateTracker = true;
                                       } else {
                                          localSealDateTracker = true;
                                              
                                       }
                                   
                                            this.localSealDate=param;
                                    

                               }
                            

                        /**
                        * field for SealNumber
                        */

                        
                                    protected int localSealNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSealNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getSealNumber(){
                               return localSealNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SealNumber
                               */
                               public void setSealNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localSealNumberTracker = false;
                                              
                                       } else {
                                          localSealNumberTracker = true;
                                       }
                                   
                                            this.localSealNumber=param;
                                    

                               }
                            

                        /**
						 * field for SendInfoWSs This was an Array!
						 */

                        
                                    protected SendInfoWS[] localSendInfoWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendInfoWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return SendInfoWS[]
                           */
                           public  SendInfoWS[] getSendInfoWSs(){
                               return localSendInfoWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for SendInfoWSs
                               */
                              protected void validateSendInfoWSs(SendInfoWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param SendInfoWSs
                              */
                              public void setSendInfoWSs(SendInfoWS[] param){
                              
                                   validateSendInfoWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localSendInfoWSsTracker = true;
                                          } else {
                                             localSendInfoWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localSendInfoWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param SendInfoWS
                             */
                             public void addSendInfoWSs(SendInfoWS param){
                                   if (localSendInfoWSs == null){
                                   localSendInfoWSs = new SendInfoWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localSendInfoWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localSendInfoWSs);
                               list.add(param);
                               this.localSendInfoWSs =
                             (SendInfoWS[])list.toArray(
                            new SendInfoWS[list.size()]);

                             }
                             

                        /**
                        * field for SenderCompId
                        */

                        
                                    protected java.lang.String localSenderCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderCompId(){
                               return localSenderCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderCompId
                               */
                               public void setSenderCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderCompIdTracker = true;
                                       } else {
                                          localSenderCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderCompId=param;
                                    

                               }
                            

                        /**
                        * field for SenderCompName
                        */

                        
                                    protected java.lang.String localSenderCompName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderCompNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderCompName(){
                               return localSenderCompName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderCompName
                               */
                               public void setSenderCompName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderCompNameTracker = true;
                                       } else {
                                          localSenderCompNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderCompName=param;
                                    

                               }
                            

                        /**
                        * field for SenderDeptId
                        */

                        
                                    protected java.lang.String localSenderDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderDeptId(){
                               return localSenderDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderDeptId
                               */
                               public void setSenderDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderDeptIdTracker = true;
                                       } else {
                                          localSenderDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderDeptId=param;
                                    

                               }
                            

                        /**
                        * field for SenderDeptName
                        */

                        
                                    protected java.lang.String localSenderDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderDeptName(){
                               return localSenderDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderDeptName
                               */
                               public void setSenderDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderDeptNameTracker = true;
                                       } else {
                                          localSenderDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderDeptName=param;
                                    

                               }
                            

                        /**
                        * field for SenderId
                        */

                        
                                    protected java.lang.String localSenderId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderId(){
                               return localSenderId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderId
                               */
                               public void setSenderId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderIdTracker = true;
                                       } else {
                                          localSenderIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderId=param;
                                    

                               }
                            

                        /**
                        * field for SenderName
                        */

                        
                                    protected java.lang.String localSenderName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderName(){
                               return localSenderName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderName
                               */
                               public void setSenderName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderNameTracker = true;
                                       } else {
                                          localSenderNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderName=param;
                                    

                               }
                            

                        /**
                        * field for SenderTitle
                        */

                        
                                    protected java.lang.String localSenderTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderTitle(){
                               return localSenderTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderTitle
                               */
                               public void setSenderTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderTitleTracker = true;
                                       } else {
                                          localSenderTitleTracker = true;
                                              
                                       }
                                   
                                            this.localSenderTitle=param;
                                    

                               }
                            

                        /**
                        * field for SerialNumber
                        */

                        
                                    protected int localSerialNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSerialNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getSerialNumber(){
                               return localSerialNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SerialNumber
                               */
                               public void setSerialNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localSerialNumberTracker = false;
                                              
                                       } else {
                                          localSerialNumberTracker = true;
                                       }
                                   
                                            this.localSerialNumber=param;
                                    

                               }
                            

                        /**
                        * field for SubserialNumber
                        */

                        
                                    protected int localSubserialNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubserialNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getSubserialNumber(){
                               return localSubserialNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubserialNumber
                               */
                               public void setSubserialNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localSubserialNumberTracker = false;
                                              
                                       } else {
                                          localSubserialNumberTracker = true;
                                       }
                                   
                                            this.localSubserialNumber=param;
                                    

                               }
                            

                        /**
                        * field for Summary
                        */

                        
                                    protected java.lang.String localSummary ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSummaryTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSummary(){
                               return localSummary;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Summary
                               */
                               public void setSummary(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSummaryTracker = true;
                                       } else {
                                          localSummaryTracker = true;
                                              
                                       }
                                   
                                            this.localSummary=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

                        /**
                        * field for Title
                        */

                        
                                    protected java.lang.String localTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTitle(){
                               return localTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Title
                               */
                               public void setTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTitleTracker = true;
                                       } else {
                                          localTitleTracker = true;
                                              
                                       }
                                   
                                            this.localTitle=param;
                                    

                               }
                            

                        /**
                        * field for TransferYn
                        */

                        
                                    protected java.lang.String localTransferYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransferYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTransferYn(){
                               return localTransferYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TransferYn
                               */
                               public void setTransferYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTransferYnTracker = true;
                                       } else {
                                          localTransferYnTracker = true;
                                              
                                       }
                                   
                                            this.localTransferYn=param;
                                    

                               }
                            

                        /**
                        * field for UrgencyYn
                        */

                        
                                    protected java.lang.String localUrgencyYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUrgencyYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUrgencyYn(){
                               return localUrgencyYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UrgencyYn
                               */
                               public void setUrgencyYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUrgencyYnTracker = true;
                                       } else {
                                          localUrgencyYnTracker = true;
                                              
                                       }
                                   
                                            this.localUrgencyYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       AppDocWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AppDocWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AppDocWS",
                           xmlWriter);
                   }

               
                   }
                if (localAppLineWSsTracker){
                                       if (localAppLineWSs!=null){
                                            for (int i = 0;i < localAppLineWSs.length;i++){
                                                if (localAppLineWSs[i] != null){
                                                 localAppLineWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appLineWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"appLineWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"appLineWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("appLineWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"appLineWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"appLineWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("appLineWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localAppOptionWSTracker){
                                    if (localAppOptionWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"appOptionWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"appOptionWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("appOptionWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAppOptionWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appOptionWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localAppRecvWSsTracker){
                                       if (localAppRecvWSs!=null){
                                            for (int i = 0;i < localAppRecvWSs.length;i++){
                                                if (localAppRecvWSs[i] != null){
                                                 localAppRecvWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appRecvWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"appRecvWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"appRecvWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("appRecvWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"appRecvWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"appRecvWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("appRecvWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localApprovalDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approvalDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approvalDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approvalDate");
                                    }
                                

                                          if (localApprovalDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApprovalDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverDeptId");
                                    }
                                

                                          if (localApproverDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverDeptName");
                                    }
                                

                                          if (localApproverDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverId");
                                    }
                                

                                          if (localApproverId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverName");
                                    }
                                

                                          if (localApproverName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApproverPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"approverPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"approverPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("approverPos");
                                    }
                                

                                          if (localApproverPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApproverPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAttachCountTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"attachCount", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"attachCount");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("attachCount");
                                    }
                                
                                               if (localAttachCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("attachCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAttachCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAuditDivisionTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"auditDivision", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"auditDivision");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("auditDivision");
                                    }
                                

                                          if (localAuditDivision==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAuditDivision);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAuditReadReasonTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"auditReadReason", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"auditReadReason");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("auditReadReason");
                                    }
                                

                                          if (localAuditReadReason==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAuditReadReason);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAuditReadYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"auditReadYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"auditReadYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("auditReadYn");
                                    }
                                

                                          if (localAuditReadYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAuditReadYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAuditYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"auditYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"auditYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("auditYn");
                                    }
                                

                                          if (localAuditYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAuditYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAutoSendYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"autoSendYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"autoSendYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("autoSendYn");
                                    }
                                

                                          if (localAutoSendYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAutoSendYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBatchDraftNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"batchDraftNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"batchDraftNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("batchDraftNumber");
                                    }
                                
                                               if (localBatchDraftNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("batchDraftNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBatchDraftNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBatchDraftYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"batchDraftYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"batchDraftYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("batchDraftYn");
                                    }
                                

                                          if (localBatchDraftYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBatchDraftYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindingIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bindingId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bindingId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bindingId");
                                    }
                                

                                          if (localBindingId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBindingId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindingNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bindingName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bindingName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bindingName");
                                    }
                                

                                          if (localBindingName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBindingName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBizSystemCodeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bizSystemCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bizSystemCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bizSystemCode");
                                    }
                                

                                          if (localBizSystemCode==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBizSystemCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBizSystemNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bizSystemName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bizSystemName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bizSystemName");
                                    }
                                

                                          if (localBizSystemName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBizSystemName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBizTypeCodeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bizTypeCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bizTypeCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bizTypeCode");
                                    }
                                

                                          if (localBizTypeCode==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBizTypeCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCategoryNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"categoryName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"categoryName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("categoryName");
                                    }
                                

                                          if (localCategoryName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCategoryName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localConserveTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"conserveType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"conserveType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("conserveType");
                                    }
                                

                                          if (localConserveType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localConserveType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCustomerWSsTracker){
                                       if (localCustomerWSs!=null){
                                            for (int i = 0;i < localCustomerWSs.length;i++){
                                                if (localCustomerWSs[i] != null){
                                                 localCustomerWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","customerWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"customerWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"customerWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("customerWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"customerWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"customerWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("customerWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localDeleteYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deleteYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deleteYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deleteYn");
                                    }
                                

                                          if (localDeleteYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeleteYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeptCategoryTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deptCategory", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deptCategory");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deptCategory");
                                    }
                                

                                          if (localDeptCategory==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeptCategory);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocSourceTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docSource", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docSource");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docSource");
                                    }
                                

                                          if (localDocSource==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocSource);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocStateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docState", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docState");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docState");
                                    }
                                

                                          if (localDocState==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocState);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docType");
                                    }
                                

                                          if (localDocType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDoubleYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"doubleYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"doubleYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("doubleYn");
                                    }
                                

                                          if (localDoubleYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDoubleYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDraftDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"draftDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"draftDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("draftDate");
                                    }
                                

                                          if (localDraftDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDraftDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDrafterDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"drafterDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"drafterDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("drafterDeptId");
                                    }
                                

                                          if (localDrafterDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDrafterDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDrafterDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"drafterDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"drafterDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("drafterDeptName");
                                    }
                                

                                          if (localDrafterDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDrafterDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDrafterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"drafterId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"drafterId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("drafterId");
                                    }
                                

                                          if (localDrafterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDrafterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDrafterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"drafterName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"drafterName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("drafterName");
                                    }
                                

                                          if (localDrafterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDrafterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDrafterPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"drafterPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"drafterPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("drafterPos");
                                    }
                                

                                          if (localDrafterPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDrafterPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEditbodyYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"editbodyYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"editbodyYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("editbodyYn");
                                    }
                                

                                          if (localEditbodyYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEditbodyYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEditfileYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"editfileYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"editfileYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("editfileYn");
                                    }
                                

                                          if (localEditfileYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEditfileYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localElectronDocYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"electronDocYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"electronDocYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("electronDocYn");
                                    }
                                

                                          if (localElectronDocYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localElectronDocYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfType");
                                    }
                                

                                          if (localEnfType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExecDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"execDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"execDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("execDeptId");
                                    }
                                

                                          if (localExecDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExecDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExecDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"execDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"execDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("execDeptName");
                                    }
                                

                                          if (localExecDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExecDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileWSsTracker){
                                       if (localFileWSs!=null){
                                            for (int i = 0;i < localFileWSs.length;i++){
                                                if (localFileWSs[i] != null){
                                                 localFileWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"fileWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"fileWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("fileWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"fileWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"fileWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("fileWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localHandoverYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"handoverYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"handoverYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("handoverYn");
                                    }
                                

                                          if (localHandoverYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHandoverYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastUpdateDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lastUpdateDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lastUpdateDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lastUpdateDate");
                                    }
                                

                                          if (localLastUpdateDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLastUpdateDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMobileYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"mobileYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"mobileYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("mobileYn");
                                    }
                                

                                          if (localMobileYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMobileYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNonElectronWSTracker){
                                    if (localNonElectronWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"nonElectronWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"nonElectronWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("nonElectronWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localNonElectronWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","nonElectronWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localOpenLevelTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"openLevel", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"openLevel");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("openLevel");
                                    }
                                

                                          if (localOpenLevel==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenLevel);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOpenReasonTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"openReason", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"openReason");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("openReason");
                                    }
                                

                                          if (localOpenReason==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenReason);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOriginDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"originDocId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"originDocId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("originDocId");
                                    }
                                

                                          if (localOriginDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOriginDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOriginDocNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"originDocNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"originDocNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("originDocNumber");
                                    }
                                

                                          if (localOriginDocNumber==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOriginDocNumber);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnDeptWSsTracker){
                                       if (localOwnDeptWSs!=null){
                                            for (int i = 0;i < localOwnDeptWSs.length;i++){
                                                if (localOwnDeptWSs[i] != null){
                                                 localOwnDeptWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"ownDeptWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"ownDeptWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("ownDeptWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"ownDeptWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"ownDeptWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("ownDeptWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localProcTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"procType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"procType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("procType");
                                    }
                                

                                          if (localProcType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorDeptId");
                                    }
                                

                                          if (localProcessorDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorDeptName");
                                    }
                                

                                          if (localProcessorDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorName");
                                    }
                                

                                          if (localProcessorName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorPos");
                                    }
                                

                                          if (localProcessorPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReadDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pubReadDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pubReadDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pubReadDate");
                                    }
                                

                                          if (localPubReadDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPubReadDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReaderWSTracker){
                                    if (localPubReaderWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"pubReaderWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"pubReaderWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("pubReaderWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localPubReaderWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localPublicPostTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"publicPost", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"publicPost");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("publicPost");
                                    }
                                

                                          if (localPublicPost==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPublicPost);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReadRangeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"readRange", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"readRange");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("readRange");
                                    }
                                

                                          if (localReadRange==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReadRange);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvDeptCntTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvDeptCnt", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvDeptCnt");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvDeptCnt");
                                    }
                                
                                               if (localRecvDeptCnt==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("recvDeptCnt cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptCnt));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvDeptNamesTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvDeptNames", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvDeptNames");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvDeptNames");
                                    }
                                

                                          if (localRecvDeptNames==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvDeptNames);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRedraftDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"redraftDocId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"redraftDocId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("redraftDocId");
                                    }
                                

                                          if (localRedraftDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRedraftDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRelatedDocWSsTracker){
                                       if (localRelatedDocWSs!=null){
                                            for (int i = 0;i < localRelatedDocWSs.length;i++){
                                                if (localRelatedDocWSs[i] != null){
                                                 localRelatedDocWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedDocWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"relatedDocWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"relatedDocWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("relatedDocWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"relatedDocWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"relatedDocWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("relatedDocWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localRelatedRuleWSsTracker){
                                       if (localRelatedRuleWSs!=null){
                                            for (int i = 0;i < localRelatedRuleWSs.length;i++){
                                                if (localRelatedRuleWSs[i] != null){
                                                 localRelatedRuleWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedRuleWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"relatedRuleWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"relatedRuleWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("relatedRuleWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"relatedRuleWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"relatedRuleWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("relatedRuleWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localRequesterDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"requesterDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"requesterDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("requesterDeptId");
                                    }
                                

                                          if (localRequesterDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRequesterDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRequesterDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"requesterDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"requesterDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("requesterDeptName");
                                    }
                                

                                          if (localRequesterDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRequesterDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRequesterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"requesterId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"requesterId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("requesterId");
                                    }
                                

                                          if (localRequesterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRequesterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRequesterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"requesterName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"requesterName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("requesterName");
                                    }
                                

                                          if (localRequesterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRequesterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReturnDocYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"returnDocYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"returnDocYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("returnDocYn");
                                    }
                                

                                          if (localReturnDocYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReturnDocYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSealDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sealDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sealDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sealDate");
                                    }
                                

                                          if (localSealDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSealDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSealNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sealNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sealNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sealNumber");
                                    }
                                
                                               if (localSealNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("sealNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSealNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendInfoWSsTracker){
                                       if (localSendInfoWSs!=null){
                                            for (int i = 0;i < localSendInfoWSs.length;i++){
                                                if (localSendInfoWSs[i] != null){
                                                 localSendInfoWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendInfoWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"sendInfoWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"sendInfoWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("sendInfoWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"sendInfoWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"sendInfoWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("sendInfoWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localSenderCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderCompId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderCompId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderCompId");
                                    }
                                

                                          if (localSenderCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderCompNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderCompName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderCompName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderCompName");
                                    }
                                

                                          if (localSenderCompName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderCompName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderDeptId");
                                    }
                                

                                          if (localSenderDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderDeptName");
                                    }
                                

                                          if (localSenderDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderId");
                                    }
                                

                                          if (localSenderId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderName");
                                    }
                                

                                          if (localSenderName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderTitleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderTitle", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderTitle");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderTitle");
                                    }
                                

                                          if (localSenderTitle==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSerialNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"serialNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"serialNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("serialNumber");
                                    }
                                
                                               if (localSerialNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("serialNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSerialNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubserialNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"subserialNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"subserialNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("subserialNumber");
                                    }
                                
                                               if (localSubserialNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("subserialNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubserialNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSummaryTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"summary", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"summary");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("summary");
                                    }
                                

                                          if (localSummary==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSummary);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTitleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"title", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"title");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("title");
                                    }
                                

                                          if (localTitle==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTransferYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"transferYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"transferYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("transferYn");
                                    }
                                

                                          if (localTransferYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTransferYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUrgencyYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"urgencyYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"urgencyYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("urgencyYn");
                                    }
                                

                                          if (localUrgencyYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUrgencyYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAppLineWSsTracker){
                             if (localAppLineWSs!=null) {
                                 for (int i = 0;i < localAppLineWSs.length;i++){

                                    if (localAppLineWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "appLineWSs"));
                                         elementList.add(localAppLineWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "appLineWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "appLineWSs"));
                                        elementList.add(localAppLineWSs);
                                    
                             }

                        } if (localAppOptionWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "appOptionWS"));
                            
                            
                                    elementList.add(localAppOptionWS==null?null:
                                    localAppOptionWS);
                                } if (localAppRecvWSsTracker){
                             if (localAppRecvWSs!=null) {
                                 for (int i = 0;i < localAppRecvWSs.length;i++){

                                    if (localAppRecvWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "appRecvWSs"));
                                         elementList.add(localAppRecvWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "appRecvWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "appRecvWSs"));
                                        elementList.add(localAppRecvWSs);
                                    
                             }

                        } if (localApprovalDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approvalDate"));
                                 
                                         elementList.add(localApprovalDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApprovalDate));
                                    } if (localApproverDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverDeptId"));
                                 
                                         elementList.add(localApproverDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverDeptId));
                                    } if (localApproverDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverDeptName"));
                                 
                                         elementList.add(localApproverDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverDeptName));
                                    } if (localApproverIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverId"));
                                 
                                         elementList.add(localApproverId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverId));
                                    } if (localApproverNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverName"));
                                 
                                         elementList.add(localApproverName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverName));
                                    } if (localApproverPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "approverPos"));
                                 
                                         elementList.add(localApproverPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApproverPos));
                                    } if (localAttachCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "attachCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAttachCount));
                            } if (localAuditDivisionTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "auditDivision"));
                                 
                                         elementList.add(localAuditDivision==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuditDivision));
                                    } if (localAuditReadReasonTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "auditReadReason"));
                                 
                                         elementList.add(localAuditReadReason==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuditReadReason));
                                    } if (localAuditReadYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "auditReadYn"));
                                 
                                         elementList.add(localAuditReadYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuditReadYn));
                                    } if (localAuditYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "auditYn"));
                                 
                                         elementList.add(localAuditYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuditYn));
                                    } if (localAutoSendYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "autoSendYn"));
                                 
                                         elementList.add(localAutoSendYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAutoSendYn));
                                    } if (localBatchDraftNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "batchDraftNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBatchDraftNumber));
                            } if (localBatchDraftYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "batchDraftYn"));
                                 
                                         elementList.add(localBatchDraftYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBatchDraftYn));
                                    } if (localBindingIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindingId"));
                                 
                                         elementList.add(localBindingId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBindingId));
                                    } if (localBindingNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindingName"));
                                 
                                         elementList.add(localBindingName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBindingName));
                                    } if (localBizSystemCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bizSystemCode"));
                                 
                                         elementList.add(localBizSystemCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBizSystemCode));
                                    } if (localBizSystemNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bizSystemName"));
                                 
                                         elementList.add(localBizSystemName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBizSystemName));
                                    } if (localBizTypeCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bizTypeCode"));
                                 
                                         elementList.add(localBizTypeCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBizTypeCode));
                                    } if (localCategoryNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "categoryName"));
                                 
                                         elementList.add(localCategoryName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCategoryName));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localConserveTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "conserveType"));
                                 
                                         elementList.add(localConserveType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConserveType));
                                    } if (localCustomerWSsTracker){
                             if (localCustomerWSs!=null) {
                                 for (int i = 0;i < localCustomerWSs.length;i++){

                                    if (localCustomerWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "customerWSs"));
                                         elementList.add(localCustomerWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "customerWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "customerWSs"));
                                        elementList.add(localCustomerWSs);
                                    
                             }

                        } if (localDeleteYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deleteYn"));
                                 
                                         elementList.add(localDeleteYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteYn));
                                    } if (localDeptCategoryTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deptCategory"));
                                 
                                         elementList.add(localDeptCategory==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptCategory));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localDocSourceTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docSource"));
                                 
                                         elementList.add(localDocSource==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocSource));
                                    } if (localDocStateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docState"));
                                 
                                         elementList.add(localDocState==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocState));
                                    } if (localDocTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docType"));
                                 
                                         elementList.add(localDocType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocType));
                                    } if (localDoubleYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "doubleYn"));
                                 
                                         elementList.add(localDoubleYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDoubleYn));
                                    } if (localDraftDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "draftDate"));
                                 
                                         elementList.add(localDraftDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDraftDate));
                                    } if (localDrafterDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "drafterDeptId"));
                                 
                                         elementList.add(localDrafterDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDrafterDeptId));
                                    } if (localDrafterDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "drafterDeptName"));
                                 
                                         elementList.add(localDrafterDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDrafterDeptName));
                                    } if (localDrafterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "drafterId"));
                                 
                                         elementList.add(localDrafterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDrafterId));
                                    } if (localDrafterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "drafterName"));
                                 
                                         elementList.add(localDrafterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDrafterName));
                                    } if (localDrafterPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "drafterPos"));
                                 
                                         elementList.add(localDrafterPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDrafterPos));
                                    } if (localEditbodyYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "editbodyYn"));
                                 
                                         elementList.add(localEditbodyYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEditbodyYn));
                                    } if (localEditfileYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "editfileYn"));
                                 
                                         elementList.add(localEditfileYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEditfileYn));
                                    } if (localElectronDocYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "electronDocYn"));
                                 
                                         elementList.add(localElectronDocYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localElectronDocYn));
                                    } if (localEnfTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfType"));
                                 
                                         elementList.add(localEnfType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfType));
                                    } if (localExecDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "execDeptId"));
                                 
                                         elementList.add(localExecDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExecDeptId));
                                    } if (localExecDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "execDeptName"));
                                 
                                         elementList.add(localExecDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExecDeptName));
                                    } if (localFileWSsTracker){
                             if (localFileWSs!=null) {
                                 for (int i = 0;i < localFileWSs.length;i++){

                                    if (localFileWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "fileWSs"));
                                         elementList.add(localFileWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "fileWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "fileWSs"));
                                        elementList.add(localFileWSs);
                                    
                             }

                        } if (localHandoverYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "handoverYn"));
                                 
                                         elementList.add(localHandoverYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHandoverYn));
                                    } if (localLastUpdateDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lastUpdateDate"));
                                 
                                         elementList.add(localLastUpdateDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastUpdateDate));
                                    } if (localMobileYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "mobileYn"));
                                 
                                         elementList.add(localMobileYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMobileYn));
                                    } if (localNonElectronWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "nonElectronWS"));
                            
                            
                                    elementList.add(localNonElectronWS==null?null:
                                    localNonElectronWS);
                                } if (localOpenLevelTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "openLevel"));
                                 
                                         elementList.add(localOpenLevel==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenLevel));
                                    } if (localOpenReasonTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "openReason"));
                                 
                                         elementList.add(localOpenReason==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenReason));
                                    } if (localOriginDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "originDocId"));
                                 
                                         elementList.add(localOriginDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginDocId));
                                    } if (localOriginDocNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "originDocNumber"));
                                 
                                         elementList.add(localOriginDocNumber==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginDocNumber));
                                    } if (localOwnDeptWSsTracker){
                             if (localOwnDeptWSs!=null) {
                                 for (int i = 0;i < localOwnDeptWSs.length;i++){

                                    if (localOwnDeptWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "ownDeptWSs"));
                                         elementList.add(localOwnDeptWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "ownDeptWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "ownDeptWSs"));
                                        elementList.add(localOwnDeptWSs);
                                    
                             }

                        } if (localProcTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "procType"));
                                 
                                         elementList.add(localProcType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcType));
                                    } if (localProcessorDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorDeptId"));
                                 
                                         elementList.add(localProcessorDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorDeptId));
                                    } if (localProcessorDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorDeptName"));
                                 
                                         elementList.add(localProcessorDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorDeptName));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localProcessorNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorName"));
                                 
                                         elementList.add(localProcessorName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorName));
                                    } if (localProcessorPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorPos"));
                                 
                                         elementList.add(localProcessorPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorPos));
                                    } if (localPubReadDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReadDate"));
                                 
                                         elementList.add(localPubReadDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPubReadDate));
                                    } if (localPubReaderWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pubReaderWS"));
                            
                            
                                    elementList.add(localPubReaderWS==null?null:
                                    localPubReaderWS);
                                } if (localPublicPostTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "publicPost"));
                                 
                                         elementList.add(localPublicPost==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPublicPost));
                                    } if (localReadRangeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "readRange"));
                                 
                                         elementList.add(localReadRange==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadRange));
                                    } if (localRecvDeptCntTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvDeptCnt"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptCnt));
                            } if (localRecvDeptNamesTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvDeptNames"));
                                 
                                         elementList.add(localRecvDeptNames==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptNames));
                                    } if (localRedraftDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "redraftDocId"));
                                 
                                         elementList.add(localRedraftDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRedraftDocId));
                                    } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localRelatedDocWSsTracker){
                             if (localRelatedDocWSs!=null) {
                                 for (int i = 0;i < localRelatedDocWSs.length;i++){

                                    if (localRelatedDocWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedDocWSs"));
                                         elementList.add(localRelatedDocWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedDocWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedDocWSs"));
                                        elementList.add(localRelatedDocWSs);
                                    
                             }

                        } if (localRelatedRuleWSsTracker){
                             if (localRelatedRuleWSs!=null) {
                                 for (int i = 0;i < localRelatedRuleWSs.length;i++){

                                    if (localRelatedRuleWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedRuleWSs"));
                                         elementList.add(localRelatedRuleWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedRuleWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedRuleWSs"));
                                        elementList.add(localRelatedRuleWSs);
                                    
                             }

                        } if (localRequesterDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "requesterDeptId"));
                                 
                                         elementList.add(localRequesterDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequesterDeptId));
                                    } if (localRequesterDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "requesterDeptName"));
                                 
                                         elementList.add(localRequesterDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequesterDeptName));
                                    } if (localRequesterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "requesterId"));
                                 
                                         elementList.add(localRequesterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequesterId));
                                    } if (localRequesterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "requesterName"));
                                 
                                         elementList.add(localRequesterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequesterName));
                                    } if (localReturnDocYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "returnDocYn"));
                                 
                                         elementList.add(localReturnDocYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnDocYn));
                                    } if (localSealDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sealDate"));
                                 
                                         elementList.add(localSealDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSealDate));
                                    } if (localSealNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sealNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSealNumber));
                            } if (localSendInfoWSsTracker){
                             if (localSendInfoWSs!=null) {
                                 for (int i = 0;i < localSendInfoWSs.length;i++){

                                    if (localSendInfoWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "sendInfoWSs"));
                                         elementList.add(localSendInfoWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "sendInfoWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "sendInfoWSs"));
                                        elementList.add(localSendInfoWSs);
                                    
                             }

                        } if (localSenderCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderCompId"));
                                 
                                         elementList.add(localSenderCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderCompId));
                                    } if (localSenderCompNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderCompName"));
                                 
                                         elementList.add(localSenderCompName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderCompName));
                                    } if (localSenderDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderDeptId"));
                                 
                                         elementList.add(localSenderDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderDeptId));
                                    } if (localSenderDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderDeptName"));
                                 
                                         elementList.add(localSenderDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderDeptName));
                                    } if (localSenderIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderId"));
                                 
                                         elementList.add(localSenderId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderId));
                                    } if (localSenderNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderName"));
                                 
                                         elementList.add(localSenderName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderName));
                                    } if (localSenderTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderTitle"));
                                 
                                         elementList.add(localSenderTitle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderTitle));
                                    } if (localSerialNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "serialNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSerialNumber));
                            } if (localSubserialNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "subserialNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubserialNumber));
                            } if (localSummaryTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "summary"));
                                 
                                         elementList.add(localSummary==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSummary));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    } if (localTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "title"));
                                 
                                         elementList.add(localTitle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTitle));
                                    } if (localTransferYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "transferYn"));
                                 
                                         elementList.add(localTransferYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransferYn));
                                    } if (localUrgencyYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "urgencyYn"));
                                 
                                         elementList.add(localUrgencyYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUrgencyYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AppDocWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AppDocWS object =
                new AppDocWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AppDocWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AppDocWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                        java.util.ArrayList list3 = new java.util.ArrayList();
                    
                        java.util.ArrayList list26 = new java.util.ArrayList();
                    
                        java.util.ArrayList list46 = new java.util.ArrayList();
                    
                        java.util.ArrayList list55 = new java.util.ArrayList();
                    
                        java.util.ArrayList list72 = new java.util.ArrayList();
                    
                        java.util.ArrayList list73 = new java.util.ArrayList();
                    
                        java.util.ArrayList list81 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appLineWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list1.add(null);
                                                              reader.next();
                                                          } else {
                                                        list1.add(AppLineWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appLineWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list1.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list1.add(AppLineWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setAppLineWSs((AppLineWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                AppLineWS.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appOptionWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAppOptionWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAppOptionWS(AppOptionWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appRecvWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list3.add(null);
                                                              reader.next();
                                                          } else {
                                                        list3.add(AppRecvWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone3 = false;
                                                        while(!loopDone3){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone3 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","appRecvWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list3.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list3.add(AppRecvWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone3 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setAppRecvWSs((AppRecvWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                AppRecvWS.class,
                                                                list3));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approvalDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApprovalDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","approverPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApproverPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","attachCount").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAttachCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setAttachCount(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","auditDivision").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAuditDivision(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","auditReadReason").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAuditReadReason(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","auditReadYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAuditReadYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","auditYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAuditYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","autoSendYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAutoSendYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","batchDraftNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBatchDraftNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setBatchDraftNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","batchDraftYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBatchDraftYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindingId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBindingId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindingName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBindingName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bizSystemCode").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBizSystemCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bizSystemName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBizSystemName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bizTypeCode").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBizTypeCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","categoryName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCategoryName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","conserveType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setConserveType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","customerWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list26.add(null);
                                                              reader.next();
                                                          } else {
                                                        list26.add(CustomerWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone26 = false;
                                                        while(!loopDone26){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone26 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","customerWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list26.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list26.add(CustomerWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone26 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setCustomerWSs((CustomerWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                CustomerWS.class,
                                                                list26));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deleteYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeleteYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deptCategory").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeptCategory(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docSource").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocSource(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docState").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocState(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","doubleYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDoubleYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","draftDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDraftDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","drafterDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDrafterDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","drafterDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDrafterDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","drafterId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDrafterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","drafterName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDrafterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","drafterPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDrafterPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","editbodyYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEditbodyYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","editfileYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEditfileYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","electronDocYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setElectronDocYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","execDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExecDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","execDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExecDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list46.add(null);
                                                              reader.next();
                                                          } else {
                                                        list46.add(FileWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone46 = false;
                                                        while(!loopDone46){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone46 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list46.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list46.add(FileWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone46 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setFileWSs((FileWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                FileWS.class,
                                                                list46));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","handoverYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHandoverYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lastUpdateDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastUpdateDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","mobileYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMobileYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","nonElectronWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setNonElectronWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setNonElectronWS(NonElectronWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","openLevel").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenLevel(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","openReason").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenReason(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","originDocId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOriginDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","originDocNumber").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOriginDocNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list55.add(null);
                                                              reader.next();
                                                          } else {
                                                        list55.add(OwnDeptWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone55 = false;
                                                        while(!loopDone55){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone55 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list55.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list55.add(OwnDeptWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone55 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setOwnDeptWSs((OwnDeptWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                OwnDeptWS.class,
                                                                list55));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","procType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReadDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPubReadDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaderWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setPubReaderWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setPubReaderWS(PubReaderWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","publicPost").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPublicPost(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","readRange").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReadRange(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvDeptCnt").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvDeptCnt(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setRecvDeptCnt(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvDeptNames").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvDeptNames(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","redraftDocId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRedraftDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedDocWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list72.add(null);
                                                              reader.next();
                                                          } else {
                                                        list72.add(RelatedDocWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone72 = false;
                                                        while(!loopDone72){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone72 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedDocWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list72.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list72.add(RelatedDocWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone72 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setRelatedDocWSs((RelatedDocWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                RelatedDocWS.class,
                                                                list72));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedRuleWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list73.add(null);
                                                              reader.next();
                                                          } else {
                                                        list73.add(RelatedRuleWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone73 = false;
                                                        while(!loopDone73){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone73 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedRuleWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list73.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list73.add(RelatedRuleWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone73 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setRelatedRuleWSs((RelatedRuleWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                RelatedRuleWS.class,
                                                                list73));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","requesterDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRequesterDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","requesterDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRequesterDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","requesterId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRequesterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","requesterName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRequesterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","returnDocYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReturnDocYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sealDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSealDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sealNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSealNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setSealNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendInfoWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list81.add(null);
                                                              reader.next();
                                                          } else {
                                                        list81.add(SendInfoWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone81 = false;
                                                        while(!loopDone81){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone81 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendInfoWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list81.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list81.add(SendInfoWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone81 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setSendInfoWSs((SendInfoWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                SendInfoWS.class,
                                                                list81));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderCompId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderCompName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderCompName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderTitle").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","serialNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSerialNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setSerialNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","subserialNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubserialNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setSubserialNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","summary").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSummary(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","title").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","transferYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTransferYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","urgencyYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUrgencyYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class UpdateResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "updateResponse",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for _return
						 */

                        
                                    protected ResponseBean local_return ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean local_returnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ResponseBean
                           */
                           public  ResponseBean get_return(){
                               return local_return;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param _return
                               */
                               public void set_return(ResponseBean param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          local_returnTracker = true;
                                       } else {
                                          local_returnTracker = true;
                                              
                                       }
                                   
                                            this.local_return=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UpdateResponse.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":updateResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "updateResponse",
                           xmlWriter);
                   }

               
                   }
                if (local_returnTracker){
                                    if (local_return==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"return", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"return");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("return");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     local_return.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (local_returnTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "return"));
                            
                            
                                    elementList.add(local_return==null?null:
                                    local_return);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UpdateResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UpdateResponse object =
                new UpdateResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"updateResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UpdateResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.set_return(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.set_return(ResponseBean.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class AppRecvWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = AppRecvWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for AcceptDate
                        */

                        
                                    protected java.lang.String localAcceptDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAcceptDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAcceptDate(){
                               return localAcceptDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AcceptDate
                               */
                               public void setAcceptDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAcceptDateTracker = true;
                                       } else {
                                          localAcceptDateTracker = true;
                                              
                                       }
                                   
                                            this.localAcceptDate=param;
                                    

                               }
                            

                        /**
                        * field for AcceptDeptId
                        */

                        
                                    protected java.lang.String localAcceptDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAcceptDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAcceptDeptId(){
                               return localAcceptDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AcceptDeptId
                               */
                               public void setAcceptDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAcceptDeptIdTracker = true;
                                       } else {
                                          localAcceptDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localAcceptDeptId=param;
                                    

                               }
                            

                        /**
                        * field for AcceptDeptName
                        */

                        
                                    protected java.lang.String localAcceptDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAcceptDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAcceptDeptName(){
                               return localAcceptDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AcceptDeptName
                               */
                               public void setAcceptDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAcceptDeptNameTracker = true;
                                       } else {
                                          localAcceptDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localAcceptDeptName=param;
                                    

                               }
                            

                        /**
                        * field for AccepterId
                        */

                        
                                    protected java.lang.String localAccepterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccepterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccepterId(){
                               return localAccepterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccepterId
                               */
                               public void setAccepterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccepterIdTracker = true;
                                       } else {
                                          localAccepterIdTracker = true;
                                              
                                       }
                                   
                                            this.localAccepterId=param;
                                    

                               }
                            

                        /**
                        * field for AccepterName
                        */

                        
                                    protected java.lang.String localAccepterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccepterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccepterName(){
                               return localAccepterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccepterName
                               */
                               public void setAccepterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccepterNameTracker = true;
                                       } else {
                                          localAccepterNameTracker = true;
                                              
                                       }
                                   
                                            this.localAccepterName=param;
                                    

                               }
                            

                        /**
                        * field for AccepterPos
                        */

                        
                                    protected java.lang.String localAccepterPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccepterPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccepterPos(){
                               return localAccepterPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccepterPos
                               */
                               public void setAccepterPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccepterPosTracker = true;
                                       } else {
                                          localAccepterPosTracker = true;
                                              
                                       }
                                   
                                            this.localAccepterPos=param;
                                    

                               }
                            

                        /**
                        * field for Address
                        */

                        
                                    protected java.lang.String localAddress ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAddressTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAddress(){
                               return localAddress;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Address
                               */
                               public void setAddress(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAddressTracker = true;
                                       } else {
                                          localAddressTracker = true;
                                              
                                       }
                                   
                                            this.localAddress=param;
                                    

                               }
                            

                        /**
                        * field for ChargeDeptId
                        */

                        
                                    protected java.lang.String localChargeDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChargeDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChargeDeptId(){
                               return localChargeDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChargeDeptId
                               */
                               public void setChargeDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localChargeDeptIdTracker = true;
                                       } else {
                                          localChargeDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localChargeDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ChargeDeptName
                        */

                        
                                    protected java.lang.String localChargeDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChargeDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChargeDeptName(){
                               return localChargeDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChargeDeptName
                               */
                               public void setChargeDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localChargeDeptNameTracker = true;
                                       } else {
                                          localChargeDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localChargeDeptName=param;
                                    

                               }
                            

                        /**
                        * field for ChargeProcDate
                        */

                        
                                    protected java.lang.String localChargeProcDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChargeProcDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChargeProcDate(){
                               return localChargeProcDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChargeProcDate
                               */
                               public void setChargeProcDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localChargeProcDateTracker = true;
                                       } else {
                                          localChargeProcDateTracker = true;
                                              
                                       }
                                   
                                            this.localChargeProcDate=param;
                                    

                               }
                            

                        /**
                        * field for ChargerId
                        */

                        
                                    protected java.lang.String localChargerId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChargerIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChargerId(){
                               return localChargerId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChargerId
                               */
                               public void setChargerId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localChargerIdTracker = true;
                                       } else {
                                          localChargerIdTracker = true;
                                              
                                       }
                                   
                                            this.localChargerId=param;
                                    

                               }
                            

                        /**
                        * field for ChargerName
                        */

                        
                                    protected java.lang.String localChargerName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChargerNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChargerName(){
                               return localChargerName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChargerName
                               */
                               public void setChargerName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localChargerNameTracker = true;
                                       } else {
                                          localChargerNameTracker = true;
                                              
                                       }
                                   
                                            this.localChargerName=param;
                                    

                               }
                            

                        /**
                        * field for ChargerPos
                        */

                        
                                    protected java.lang.String localChargerPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChargerPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getChargerPos(){
                               return localChargerPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChargerPos
                               */
                               public void setChargerPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localChargerPosTracker = true;
                                       } else {
                                          localChargerPosTracker = true;
                                              
                                       }
                                   
                                            this.localChargerPos=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for ElectronDocYn
                        */

                        
                                    protected java.lang.String localElectronDocYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localElectronDocYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getElectronDocYn(){
                               return localElectronDocYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ElectronDocYn
                               */
                               public void setElectronDocYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localElectronDocYnTracker = true;
                                       } else {
                                          localElectronDocYnTracker = true;
                                              
                                       }
                                   
                                            this.localElectronDocYn=param;
                                    

                               }
                            

                        /**
                        * field for EnfState
                        */

                        
                                    protected java.lang.String localEnfState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfState(){
                               return localEnfState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfState
                               */
                               public void setEnfState(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfStateTracker = true;
                                       } else {
                                          localEnfStateTracker = true;
                                              
                                       }
                                   
                                            this.localEnfState=param;
                                    

                               }
                            

                        /**
                        * field for EnfType
                        */

                        
                                    protected java.lang.String localEnfType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfType(){
                               return localEnfType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfType
                               */
                               public void setEnfType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfTypeTracker = true;
                                       } else {
                                          localEnfTypeTracker = true;
                                              
                                       }
                                   
                                            this.localEnfType=param;
                                    

                               }
                            

                        /**
                        * field for Fax
                        */

                        
                                    protected java.lang.String localFax ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFaxTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFax(){
                               return localFax;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Fax
                               */
                               public void setFax(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFaxTracker = true;
                                       } else {
                                          localFaxTracker = true;
                                              
                                       }
                                   
                                            this.localFax=param;
                                    

                               }
                            

                        /**
                        * field for PostNumber
                        */

                        
                                    protected java.lang.String localPostNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPostNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPostNumber(){
                               return localPostNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PostNumber
                               */
                               public void setPostNumber(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPostNumberTracker = true;
                                       } else {
                                          localPostNumberTracker = true;
                                              
                                       }
                                   
                                            this.localPostNumber=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for ReSendRecvOrder
                        */

                        
                                    protected java.lang.String localReSendRecvOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReSendRecvOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReSendRecvOrder(){
                               return localReSendRecvOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReSendRecvOrder
                               */
                               public void setReSendRecvOrder(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReSendRecvOrderTracker = true;
                                       } else {
                                          localReSendRecvOrderTracker = true;
                                              
                                       }
                                   
                                            this.localReSendRecvOrder=param;
                                    

                               }
                            

                        /**
                        * field for ReceiveDate
                        */

                        
                                    protected java.lang.String localReceiveDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiveDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReceiveDate(){
                               return localReceiveDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiveDate
                               */
                               public void setReceiveDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReceiveDateTracker = true;
                                       } else {
                                          localReceiveDateTracker = true;
                                              
                                       }
                                   
                                            this.localReceiveDate=param;
                                    

                               }
                            

                        /**
                        * field for ReceiverOrder
                        */

                        
                                    protected int localReceiverOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiverOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getReceiverOrder(){
                               return localReceiverOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiverOrder
                               */
                               public void setReceiverOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localReceiverOrderTracker = false;
                                              
                                       } else {
                                          localReceiverOrderTracker = true;
                                       }
                                   
                                            this.localReceiverOrder=param;
                                    

                               }
                            

                        /**
                        * field for ReceiverType
                        */

                        
                                    protected java.lang.String localReceiverType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiverTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReceiverType(){
                               return localReceiverType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiverType
                               */
                               public void setReceiverType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReceiverTypeTracker = true;
                                       } else {
                                          localReceiverTypeTracker = true;
                                              
                                       }
                                   
                                            this.localReceiverType=param;
                                    

                               }
                            

                        /**
                        * field for RecvCompId
                        */

                        
                                    protected java.lang.String localRecvCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvCompId(){
                               return localRecvCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvCompId
                               */
                               public void setRecvCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvCompIdTracker = true;
                                       } else {
                                          localRecvCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localRecvCompId=param;
                                    

                               }
                            

                        /**
                        * field for RecvDeptId
                        */

                        
                                    protected java.lang.String localRecvDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvDeptId(){
                               return localRecvDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvDeptId
                               */
                               public void setRecvDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvDeptIdTracker = true;
                                       } else {
                                          localRecvDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRecvDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RecvDeptName
                        */

                        
                                    protected java.lang.String localRecvDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvDeptName(){
                               return localRecvDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvDeptName
                               */
                               public void setRecvDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvDeptNameTracker = true;
                                       } else {
                                          localRecvDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRecvDeptName=param;
                                    

                               }
                            

                        /**
                        * field for RecvSymbol
                        */

                        
                                    protected java.lang.String localRecvSymbol ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvSymbolTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvSymbol(){
                               return localRecvSymbol;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvSymbol
                               */
                               public void setRecvSymbol(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvSymbolTracker = true;
                                       } else {
                                          localRecvSymbolTracker = true;
                                              
                                       }
                                   
                                            this.localRecvSymbol=param;
                                    

                               }
                            

                        /**
                        * field for RecvUserId
                        */

                        
                                    protected java.lang.String localRecvUserId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvUserIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvUserId(){
                               return localRecvUserId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvUserId
                               */
                               public void setRecvUserId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvUserIdTracker = true;
                                       } else {
                                          localRecvUserIdTracker = true;
                                              
                                       }
                                   
                                            this.localRecvUserId=param;
                                    

                               }
                            

                        /**
                        * field for RecvUserName
                        */

                        
                                    protected java.lang.String localRecvUserName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecvUserNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecvUserName(){
                               return localRecvUserName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecvUserName
                               */
                               public void setRecvUserName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecvUserNameTracker = true;
                                       } else {
                                          localRecvUserNameTracker = true;
                                              
                                       }
                                   
                                            this.localRecvUserName=param;
                                    

                               }
                            

                        /**
                        * field for RefDeptId
                        */

                        
                                    protected java.lang.String localRefDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRefDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRefDeptId(){
                               return localRefDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RefDeptId
                               */
                               public void setRefDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRefDeptIdTracker = true;
                                       } else {
                                          localRefDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localRefDeptId=param;
                                    

                               }
                            

                        /**
                        * field for RefDeptName
                        */

                        
                                    protected java.lang.String localRefDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRefDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRefDeptName(){
                               return localRefDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RefDeptName
                               */
                               public void setRefDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRefDeptNameTracker = true;
                                       } else {
                                          localRefDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localRefDeptName=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
                        * field for SendDate
                        */

                        
                                    protected java.lang.String localSendDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendDate(){
                               return localSendDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendDate
                               */
                               public void setSendDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendDateTracker = true;
                                       } else {
                                          localSendDateTracker = true;
                                              
                                       }
                                   
                                            this.localSendDate=param;
                                    

                               }
                            

                        /**
                        * field for SendOpinion
                        */

                        
                                    protected java.lang.String localSendOpinion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendOpinionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendOpinion(){
                               return localSendOpinion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendOpinion
                               */
                               public void setSendOpinion(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendOpinionTracker = true;
                                       } else {
                                          localSendOpinionTracker = true;
                                              
                                       }
                                   
                                            this.localSendOpinion=param;
                                    

                               }
                            

                        /**
                        * field for SenderId
                        */

                        
                                    protected java.lang.String localSenderId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderId(){
                               return localSenderId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderId
                               */
                               public void setSenderId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderIdTracker = true;
                                       } else {
                                          localSenderIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderId=param;
                                    

                               }
                            

                        /**
                        * field for SenderName
                        */

                        
                                    protected java.lang.String localSenderName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderName(){
                               return localSenderName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderName
                               */
                               public void setSenderName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderNameTracker = true;
                                       } else {
                                          localSenderNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderName=param;
                                    

                               }
                            

                        /**
                        * field for Telephone
                        */

                        
                                    protected java.lang.String localTelephone ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTelephoneTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTelephone(){
                               return localTelephone;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Telephone
                               */
                               public void setTelephone(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTelephoneTracker = true;
                                       } else {
                                          localTelephoneTracker = true;
                                              
                                       }
                                   
                                            this.localTelephone=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       AppRecvWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AppRecvWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AppRecvWS",
                           xmlWriter);
                   }

               
                   }
                if (localAcceptDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"acceptDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"acceptDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("acceptDate");
                                    }
                                

                                          if (localAcceptDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAcceptDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAcceptDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"acceptDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"acceptDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("acceptDeptId");
                                    }
                                

                                          if (localAcceptDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAcceptDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAcceptDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"acceptDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"acceptDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("acceptDeptName");
                                    }
                                

                                          if (localAcceptDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAcceptDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccepterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"accepterId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"accepterId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("accepterId");
                                    }
                                

                                          if (localAccepterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccepterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccepterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"accepterName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"accepterName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("accepterName");
                                    }
                                

                                          if (localAccepterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccepterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccepterPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"accepterPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"accepterPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("accepterPos");
                                    }
                                

                                          if (localAccepterPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccepterPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAddressTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"address", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"address");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("address");
                                    }
                                

                                          if (localAddress==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAddress);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChargeDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"chargeDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"chargeDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("chargeDeptId");
                                    }
                                

                                          if (localChargeDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localChargeDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChargeDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"chargeDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"chargeDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("chargeDeptName");
                                    }
                                

                                          if (localChargeDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localChargeDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChargeProcDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"chargeProcDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"chargeProcDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("chargeProcDate");
                                    }
                                

                                          if (localChargeProcDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localChargeProcDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChargerIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"chargerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"chargerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("chargerId");
                                    }
                                

                                          if (localChargerId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localChargerId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChargerNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"chargerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"chargerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("chargerName");
                                    }
                                

                                          if (localChargerName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localChargerName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChargerPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"chargerPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"chargerPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("chargerPos");
                                    }
                                

                                          if (localChargerPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localChargerPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localElectronDocYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"electronDocYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"electronDocYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("electronDocYn");
                                    }
                                

                                          if (localElectronDocYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localElectronDocYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfStateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfState", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfState");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfState");
                                    }
                                

                                          if (localEnfState==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfState);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfType");
                                    }
                                

                                          if (localEnfType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFaxTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fax", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fax");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fax");
                                    }
                                

                                          if (localFax==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFax);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPostNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"postNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"postNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("postNumber");
                                    }
                                

                                          if (localPostNumber==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPostNumber);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReSendRecvOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"reSendRecvOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"reSendRecvOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("reSendRecvOrder");
                                    }
                                

                                          if (localReSendRecvOrder==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReSendRecvOrder);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiveDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiveDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiveDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiveDate");
                                    }
                                

                                          if (localReceiveDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReceiveDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiverOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiverOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiverOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiverOrder");
                                    }
                                
                                               if (localReceiverOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("receiverOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiverTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiverType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiverType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiverType");
                                    }
                                

                                          if (localReceiverType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReceiverType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvCompId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvCompId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvCompId");
                                    }
                                

                                          if (localRecvCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvDeptId");
                                    }
                                

                                          if (localRecvDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvDeptName");
                                    }
                                

                                          if (localRecvDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvSymbolTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvSymbol", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvSymbol");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvSymbol");
                                    }
                                

                                          if (localRecvSymbol==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvSymbol);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvUserIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvUserId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvUserId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvUserId");
                                    }
                                

                                          if (localRecvUserId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvUserId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecvUserNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recvUserName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recvUserName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recvUserName");
                                    }
                                

                                          if (localRecvUserName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecvUserName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRefDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"refDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"refDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("refDeptId");
                                    }
                                

                                          if (localRefDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRefDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRefDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"refDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"refDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("refDeptName");
                                    }
                                

                                          if (localRefDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRefDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendDate");
                                    }
                                

                                          if (localSendDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendOpinionTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendOpinion", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendOpinion");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendOpinion");
                                    }
                                

                                          if (localSendOpinion==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendOpinion);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderId");
                                    }
                                

                                          if (localSenderId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderName");
                                    }
                                

                                          if (localSenderName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTelephoneTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"telephone", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"telephone");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("telephone");
                                    }
                                

                                          if (localTelephone==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTelephone);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAcceptDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "acceptDate"));
                                 
                                         elementList.add(localAcceptDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptDate));
                                    } if (localAcceptDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "acceptDeptId"));
                                 
                                         elementList.add(localAcceptDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptDeptId));
                                    } if (localAcceptDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "acceptDeptName"));
                                 
                                         elementList.add(localAcceptDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptDeptName));
                                    } if (localAccepterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "accepterId"));
                                 
                                         elementList.add(localAccepterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccepterId));
                                    } if (localAccepterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "accepterName"));
                                 
                                         elementList.add(localAccepterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccepterName));
                                    } if (localAccepterPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "accepterPos"));
                                 
                                         elementList.add(localAccepterPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccepterPos));
                                    } if (localAddressTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "address"));
                                 
                                         elementList.add(localAddress==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
                                    } if (localChargeDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "chargeDeptId"));
                                 
                                         elementList.add(localChargeDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChargeDeptId));
                                    } if (localChargeDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "chargeDeptName"));
                                 
                                         elementList.add(localChargeDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChargeDeptName));
                                    } if (localChargeProcDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "chargeProcDate"));
                                 
                                         elementList.add(localChargeProcDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChargeProcDate));
                                    } if (localChargerIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "chargerId"));
                                 
                                         elementList.add(localChargerId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChargerId));
                                    } if (localChargerNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "chargerName"));
                                 
                                         elementList.add(localChargerName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChargerName));
                                    } if (localChargerPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "chargerPos"));
                                 
                                         elementList.add(localChargerPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChargerPos));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localElectronDocYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "electronDocYn"));
                                 
                                         elementList.add(localElectronDocYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localElectronDocYn));
                                    } if (localEnfStateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfState"));
                                 
                                         elementList.add(localEnfState==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfState));
                                    } if (localEnfTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfType"));
                                 
                                         elementList.add(localEnfType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfType));
                                    } if (localFaxTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fax"));
                                 
                                         elementList.add(localFax==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFax));
                                    } if (localPostNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "postNumber"));
                                 
                                         elementList.add(localPostNumber==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPostNumber));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localReSendRecvOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "reSendRecvOrder"));
                                 
                                         elementList.add(localReSendRecvOrder==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReSendRecvOrder));
                                    } if (localReceiveDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiveDate"));
                                 
                                         elementList.add(localReceiveDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiveDate));
                                    } if (localReceiverOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiverOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverOrder));
                            } if (localReceiverTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiverType"));
                                 
                                         elementList.add(localReceiverType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverType));
                                    } if (localRecvCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvCompId"));
                                 
                                         elementList.add(localRecvCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvCompId));
                                    } if (localRecvDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvDeptId"));
                                 
                                         elementList.add(localRecvDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptId));
                                    } if (localRecvDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvDeptName"));
                                 
                                         elementList.add(localRecvDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvDeptName));
                                    } if (localRecvSymbolTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvSymbol"));
                                 
                                         elementList.add(localRecvSymbol==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvSymbol));
                                    } if (localRecvUserIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvUserId"));
                                 
                                         elementList.add(localRecvUserId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvUserId));
                                    } if (localRecvUserNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recvUserName"));
                                 
                                         elementList.add(localRecvUserName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecvUserName));
                                    } if (localRefDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "refDeptId"));
                                 
                                         elementList.add(localRefDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefDeptId));
                                    } if (localRefDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "refDeptName"));
                                 
                                         elementList.add(localRefDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefDeptName));
                                    } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localSendDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendDate"));
                                 
                                         elementList.add(localSendDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendDate));
                                    } if (localSendOpinionTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendOpinion"));
                                 
                                         elementList.add(localSendOpinion==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendOpinion));
                                    } if (localSenderIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderId"));
                                 
                                         elementList.add(localSenderId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderId));
                                    } if (localSenderNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderName"));
                                 
                                         elementList.add(localSenderName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderName));
                                    } if (localTelephoneTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "telephone"));
                                 
                                         elementList.add(localTelephone==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTelephone));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AppRecvWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AppRecvWS object =
                new AppRecvWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AppRecvWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AppRecvWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","acceptDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAcceptDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","acceptDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAcceptDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","acceptDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAcceptDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","accepterId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccepterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","accepterName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccepterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","accepterPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccepterPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","address").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAddress(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","chargeDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChargeDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","chargeDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChargeDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","chargeProcDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChargeProcDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","chargerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChargerId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","chargerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChargerName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","chargerPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChargerPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","electronDocYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setElectronDocYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfState").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfState(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fax").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFax(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","postNumber").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPostNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","reSendRecvOrder").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReSendRecvOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiveDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiveDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiverOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiverOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setReceiverOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiverType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiverType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvCompId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvSymbol").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvSymbol(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvUserId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvUserId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recvUserName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecvUserName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","refDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRefDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","refDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRefDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendOpinion").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendOpinion(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","telephone").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTelephone(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class EnfDocWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = EnfDocWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for AcceptDate
                        */

                        
                                    protected java.lang.String localAcceptDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAcceptDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAcceptDate(){
                               return localAcceptDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AcceptDate
                               */
                               public void setAcceptDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAcceptDateTracker = true;
                                       } else {
                                          localAcceptDateTracker = true;
                                              
                                       }
                                   
                                            this.localAcceptDate=param;
                                    

                               }
                            

                        /**
                        * field for AcceptDeptId
                        */

                        
                                    protected java.lang.String localAcceptDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAcceptDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAcceptDeptId(){
                               return localAcceptDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AcceptDeptId
                               */
                               public void setAcceptDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAcceptDeptIdTracker = true;
                                       } else {
                                          localAcceptDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localAcceptDeptId=param;
                                    

                               }
                            

                        /**
                        * field for AcceptDeptName
                        */

                        
                                    protected java.lang.String localAcceptDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAcceptDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAcceptDeptName(){
                               return localAcceptDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AcceptDeptName
                               */
                               public void setAcceptDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAcceptDeptNameTracker = true;
                                       } else {
                                          localAcceptDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localAcceptDeptName=param;
                                    

                               }
                            

                        /**
                        * field for AccepterId
                        */

                        
                                    protected java.lang.String localAccepterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccepterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccepterId(){
                               return localAccepterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccepterId
                               */
                               public void setAccepterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccepterIdTracker = true;
                                       } else {
                                          localAccepterIdTracker = true;
                                              
                                       }
                                   
                                            this.localAccepterId=param;
                                    

                               }
                            

                        /**
                        * field for AccepterName
                        */

                        
                                    protected java.lang.String localAccepterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccepterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccepterName(){
                               return localAccepterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccepterName
                               */
                               public void setAccepterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccepterNameTracker = true;
                                       } else {
                                          localAccepterNameTracker = true;
                                              
                                       }
                                   
                                            this.localAccepterName=param;
                                    

                               }
                            

                        /**
                        * field for AccepterPos
                        */

                        
                                    protected java.lang.String localAccepterPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccepterPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccepterPos(){
                               return localAccepterPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccepterPos
                               */
                               public void setAccepterPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccepterPosTracker = true;
                                       } else {
                                          localAccepterPosTracker = true;
                                              
                                       }
                                   
                                            this.localAccepterPos=param;
                                    

                               }
                            

                        /**
                        * field for AttachCount
                        */

                        
                                    protected int localAttachCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAttachCountTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getAttachCount(){
                               return localAttachCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AttachCount
                               */
                               public void setAttachCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localAttachCountTracker = false;
                                              
                                       } else {
                                          localAttachCountTracker = true;
                                       }
                                   
                                            this.localAttachCount=param;
                                    

                               }
                            

                        /**
                        * field for BindingId
                        */

                        
                                    protected java.lang.String localBindingId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindingIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBindingId(){
                               return localBindingId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindingId
                               */
                               public void setBindingId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindingIdTracker = true;
                                       } else {
                                          localBindingIdTracker = true;
                                              
                                       }
                                   
                                            this.localBindingId=param;
                                    

                               }
                            

                        /**
                        * field for BindingName
                        */

                        
                                    protected java.lang.String localBindingName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindingNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBindingName(){
                               return localBindingName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindingName
                               */
                               public void setBindingName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindingNameTracker = true;
                                       } else {
                                          localBindingNameTracker = true;
                                              
                                       }
                                   
                                            this.localBindingName=param;
                                    

                               }
                            

                        /**
                        * field for CategoryName
                        */

                        
                                    protected java.lang.String localCategoryName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCategoryNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCategoryName(){
                               return localCategoryName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CategoryName
                               */
                               public void setCategoryName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCategoryNameTracker = true;
                                       } else {
                                          localCategoryNameTracker = true;
                                              
                                       }
                                   
                                            this.localCategoryName=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for ConserveType
                        */

                        
                                    protected java.lang.String localConserveType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localConserveTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getConserveType(){
                               return localConserveType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ConserveType
                               */
                               public void setConserveType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localConserveTypeTracker = true;
                                       } else {
                                          localConserveTypeTracker = true;
                                              
                                       }
                                   
                                            this.localConserveType=param;
                                    

                               }
                            

                        /**
                        * field for DeleteYn
                        */

                        
                                    protected java.lang.String localDeleteYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeleteYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeleteYn(){
                               return localDeleteYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeleteYn
                               */
                               public void setDeleteYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeleteYnTracker = true;
                                       } else {
                                          localDeleteYnTracker = true;
                                              
                                       }
                                   
                                            this.localDeleteYn=param;
                                    

                               }
                            

                        /**
                        * field for DeptCategory
                        */

                        
                                    protected java.lang.String localDeptCategory ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeptCategoryTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeptCategory(){
                               return localDeptCategory;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeptCategory
                               */
                               public void setDeptCategory(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeptCategoryTracker = true;
                                       } else {
                                          localDeptCategoryTracker = true;
                                              
                                       }
                                   
                                            this.localDeptCategory=param;
                                    

                               }
                            

                        /**
                        * field for DistributeDate
                        */

                        
                                    protected java.lang.String localDistributeDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributeDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributeDate(){
                               return localDistributeDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributeDate
                               */
                               public void setDistributeDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributeDateTracker = true;
                                       } else {
                                          localDistributeDateTracker = true;
                                              
                                       }
                                   
                                            this.localDistributeDate=param;
                                    

                               }
                            

                        /**
                        * field for DistributeNumber
                        */

                        
                                    protected int localDistributeNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributeNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getDistributeNumber(){
                               return localDistributeNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributeNumber
                               */
                               public void setDistributeNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localDistributeNumberTracker = false;
                                              
                                       } else {
                                          localDistributeNumberTracker = true;
                                       }
                                   
                                            this.localDistributeNumber=param;
                                    

                               }
                            

                        /**
                        * field for DistributeYn
                        */

                        
                                    protected java.lang.String localDistributeYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributeYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributeYn(){
                               return localDistributeYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributeYn
                               */
                               public void setDistributeYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributeYnTracker = true;
                                       } else {
                                          localDistributeYnTracker = true;
                                              
                                       }
                                   
                                            this.localDistributeYn=param;
                                    

                               }
                            

                        /**
                        * field for DistributorDeptId
                        */

                        
                                    protected java.lang.String localDistributorDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributorDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributorDeptId(){
                               return localDistributorDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributorDeptId
                               */
                               public void setDistributorDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributorDeptIdTracker = true;
                                       } else {
                                          localDistributorDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localDistributorDeptId=param;
                                    

                               }
                            

                        /**
                        * field for DistributorDeptName
                        */

                        
                                    protected java.lang.String localDistributorDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributorDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributorDeptName(){
                               return localDistributorDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributorDeptName
                               */
                               public void setDistributorDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributorDeptNameTracker = true;
                                       } else {
                                          localDistributorDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localDistributorDeptName=param;
                                    

                               }
                            

                        /**
                        * field for DistributorId
                        */

                        
                                    protected java.lang.String localDistributorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributorId(){
                               return localDistributorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributorId
                               */
                               public void setDistributorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributorIdTracker = true;
                                       } else {
                                          localDistributorIdTracker = true;
                                              
                                       }
                                   
                                            this.localDistributorId=param;
                                    

                               }
                            

                        /**
                        * field for DistributorName
                        */

                        
                                    protected java.lang.String localDistributorName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributorNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributorName(){
                               return localDistributorName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributorName
                               */
                               public void setDistributorName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributorNameTracker = true;
                                       } else {
                                          localDistributorNameTracker = true;
                                              
                                       }
                                   
                                            this.localDistributorName=param;
                                    

                               }
                            

                        /**
                        * field for DistributorPos
                        */

                        
                                    protected java.lang.String localDistributorPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDistributorPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDistributorPos(){
                               return localDistributorPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DistributorPos
                               */
                               public void setDistributorPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDistributorPosTracker = true;
                                       } else {
                                          localDistributorPosTracker = true;
                                              
                                       }
                                   
                                            this.localDistributorPos=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for DocNumber
                        */

                        
                                    protected java.lang.String localDocNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocNumber(){
                               return localDocNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocNumber
                               */
                               public void setDocNumber(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocNumberTracker = true;
                                       } else {
                                          localDocNumberTracker = true;
                                              
                                       }
                                   
                                            this.localDocNumber=param;
                                    

                               }
                            

                        /**
                        * field for DocState
                        */

                        
                                    protected java.lang.String localDocState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocState(){
                               return localDocState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocState
                               */
                               public void setDocState(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocStateTracker = true;
                                       } else {
                                          localDocStateTracker = true;
                                              
                                       }
                                   
                                            this.localDocState=param;
                                    

                               }
                            

                        /**
                        * field for DocType
                        */

                        
                                    protected java.lang.String localDocType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocType(){
                               return localDocType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocType
                               */
                               public void setDocType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocTypeTracker = true;
                                       } else {
                                          localDocTypeTracker = true;
                                              
                                       }
                                   
                                            this.localDocType=param;
                                    

                               }
                            

                        /**
                        * field for ElectronDocYn
                        */

                        
                                    protected java.lang.String localElectronDocYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localElectronDocYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getElectronDocYn(){
                               return localElectronDocYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ElectronDocYn
                               */
                               public void setElectronDocYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localElectronDocYnTracker = true;
                                       } else {
                                          localElectronDocYnTracker = true;
                                              
                                       }
                                   
                                            this.localElectronDocYn=param;
                                    

                               }
                            

                        /**
                        * field for EnfDocId
                        */

                        
                                    protected java.lang.String localEnfDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfDocId(){
                               return localEnfDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfDocId
                               */
                               public void setEnfDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfDocIdTracker = true;
                                       } else {
                                          localEnfDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localEnfDocId=param;
                                    

                               }
                            

                        /**
						 * field for EnfLineWS
						 */

                        
                                    protected EnfLineWS localEnfLineWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfLineWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return EnfLineWS
                           */
                           public  EnfLineWS getEnfLineWS(){
                               return localEnfLineWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfLineWS
                               */
                               public void setEnfLineWS(EnfLineWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfLineWSTracker = true;
                                       } else {
                                          localEnfLineWSTracker = true;
                                              
                                       }
                                   
                                            this.localEnfLineWS=param;
                                    

                               }
                            

                        /**
						 * field for EnfLineWSs This was an Array!
						 */

                        
                                    protected EnfLineWS[] localEnfLineWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfLineWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return EnfLineWS[]
                           */
                           public  EnfLineWS[] getEnfLineWSs(){
                               return localEnfLineWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for EnfLineWSs
                               */
                              protected void validateEnfLineWSs(EnfLineWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param EnfLineWSs
                              */
                              public void setEnfLineWSs(EnfLineWS[] param){
                              
                                   validateEnfLineWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localEnfLineWSsTracker = true;
                                          } else {
                                             localEnfLineWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localEnfLineWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param EnfLineWS
                             */
                             public void addEnfLineWSs(EnfLineWS param){
                                   if (localEnfLineWSs == null){
                                   localEnfLineWSs = new EnfLineWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localEnfLineWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localEnfLineWSs);
                               list.add(param);
                               this.localEnfLineWSs =
                             (EnfLineWS[])list.toArray(
                            new EnfLineWS[list.size()]);

                             }
                             

                        /**
						 * field for EnfRecvWSs This was an Array!
						 */

                        
                                    protected EnfRecvWS[] localEnfRecvWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfRecvWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return EnfRecvWS[]
                           */
                           public  EnfRecvWS[] getEnfRecvWSs(){
                               return localEnfRecvWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for EnfRecvWSs
                               */
                              protected void validateEnfRecvWSs(EnfRecvWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param EnfRecvWSs
                              */
                              public void setEnfRecvWSs(EnfRecvWS[] param){
                              
                                   validateEnfRecvWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localEnfRecvWSsTracker = true;
                                          } else {
                                             localEnfRecvWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localEnfRecvWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param EnfRecvWS
                             */
                             public void addEnfRecvWSs(EnfRecvWS param){
                                   if (localEnfRecvWSs == null){
                                   localEnfRecvWSs = new EnfRecvWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localEnfRecvWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localEnfRecvWSs);
                               list.add(param);
                               this.localEnfRecvWSs =
                             (EnfRecvWS[])list.toArray(
                            new EnfRecvWS[list.size()]);

                             }
                             

                        /**
                        * field for EnfType
                        */

                        
                                    protected java.lang.String localEnfType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfType(){
                               return localEnfType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfType
                               */
                               public void setEnfType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfTypeTracker = true;
                                       } else {
                                          localEnfTypeTracker = true;
                                              
                                       }
                                   
                                            this.localEnfType=param;
                                    

                               }
                            

                        /**
						 * field for FileWSs This was an Array!
						 */

                        
                                    protected FileWS[] localFileWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return FileWS[]
                           */
                           public  FileWS[] getFileWSs(){
                               return localFileWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for FileWSs
                               */
                              protected void validateFileWSs(FileWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param FileWSs
                              */
                              public void setFileWSs(FileWS[] param){
                              
                                   validateFileWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localFileWSsTracker = true;
                                          } else {
                                             localFileWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localFileWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param FileWS
                             */
                             public void addFileWSs(FileWS param){
                                   if (localFileWSs == null){
                                   localFileWSs = new FileWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localFileWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localFileWSs);
                               list.add(param);
                               this.localFileWSs =
                             (FileWS[])list.toArray(
                            new FileWS[list.size()]);

                             }
                             

                        /**
                        * field for HandoverYn
                        */

                        
                                    protected java.lang.String localHandoverYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHandoverYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHandoverYn(){
                               return localHandoverYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HandoverYn
                               */
                               public void setHandoverYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHandoverYnTracker = true;
                                       } else {
                                          localHandoverYnTracker = true;
                                              
                                       }
                                   
                                            this.localHandoverYn=param;
                                    

                               }
                            

                        /**
                        * field for LastUpdateDate
                        */

                        
                                    protected java.lang.String localLastUpdateDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastUpdateDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLastUpdateDate(){
                               return localLastUpdateDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastUpdateDate
                               */
                               public void setLastUpdateDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastUpdateDateTracker = true;
                                       } else {
                                          localLastUpdateDateTracker = true;
                                              
                                       }
                                   
                                            this.localLastUpdateDate=param;
                                    

                               }
                            

                        /**
                        * field for MobileYn
                        */

                        
                                    protected java.lang.String localMobileYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMobileYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMobileYn(){
                               return localMobileYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MobileYn
                               */
                               public void setMobileYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMobileYnTracker = true;
                                       } else {
                                          localMobileYnTracker = true;
                                              
                                       }
                                   
                                            this.localMobileYn=param;
                                    

                               }
                            

                        /**
                        * field for NoSerialYn
                        */

                        
                                    protected boolean localNoSerialYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNoSerialYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getNoSerialYn(){
                               return localNoSerialYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NoSerialYn
                               */
                               public void setNoSerialYn(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localNoSerialYnTracker = false;
                                              
                                       } else {
                                          localNoSerialYnTracker = true;
                                       }
                                   
                                            this.localNoSerialYn=param;
                                    

                               }
                            

                        /**
						 * field for NonElectronWS
						 */

                        
                                    protected NonElectronWS localNonElectronWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNonElectronWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return NonElectronWS
                           */
                           public  NonElectronWS getNonElectronWS(){
                               return localNonElectronWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NonElectronWS
                               */
                               public void setNonElectronWS(NonElectronWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNonElectronWSTracker = true;
                                       } else {
                                          localNonElectronWSTracker = true;
                                              
                                       }
                                   
                                            this.localNonElectronWS=param;
                                    

                               }
                            

                        /**
                        * field for OpenLevel
                        */

                        
                                    protected java.lang.String localOpenLevel ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenLevelTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenLevel(){
                               return localOpenLevel;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenLevel
                               */
                               public void setOpenLevel(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOpenLevelTracker = true;
                                       } else {
                                          localOpenLevelTracker = true;
                                              
                                       }
                                   
                                            this.localOpenLevel=param;
                                    

                               }
                            

                        /**
                        * field for OpenReason
                        */

                        
                                    protected java.lang.String localOpenReason ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenReasonTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenReason(){
                               return localOpenReason;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenReason
                               */
                               public void setOpenReason(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOpenReasonTracker = true;
                                       } else {
                                          localOpenReasonTracker = true;
                                              
                                       }
                                   
                                            this.localOpenReason=param;
                                    

                               }
                            

                        /**
                        * field for OriginCompId
                        */

                        
                                    protected java.lang.String localOriginCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOriginCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOriginCompId(){
                               return localOriginCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OriginCompId
                               */
                               public void setOriginCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOriginCompIdTracker = true;
                                       } else {
                                          localOriginCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localOriginCompId=param;
                                    

                               }
                            

                        /**
                        * field for OriginDocId
                        */

                        
                                    protected java.lang.String localOriginDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOriginDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOriginDocId(){
                               return localOriginDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OriginDocId
                               */
                               public void setOriginDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOriginDocIdTracker = true;
                                       } else {
                                          localOriginDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localOriginDocId=param;
                                    

                               }
                            

                        /**
						 * field for OwnDeptWSs This was an Array!
						 */

                        
                                    protected OwnDeptWS[] localOwnDeptWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnDeptWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return OwnDeptWS[]
                           */
                           public  OwnDeptWS[] getOwnDeptWSs(){
                               return localOwnDeptWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for OwnDeptWSs
                               */
                              protected void validateOwnDeptWSs(OwnDeptWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param OwnDeptWSs
                              */
                              public void setOwnDeptWSs(OwnDeptWS[] param){
                              
                                   validateOwnDeptWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localOwnDeptWSsTracker = true;
                                          } else {
                                             localOwnDeptWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localOwnDeptWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param OwnDeptWS
                             */
                             public void addOwnDeptWSs(OwnDeptWS param){
                                   if (localOwnDeptWSs == null){
                                   localOwnDeptWSs = new OwnDeptWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localOwnDeptWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localOwnDeptWSs);
                               list.add(param);
                               this.localOwnDeptWSs =
                             (OwnDeptWS[])list.toArray(
                            new OwnDeptWS[list.size()]);

                             }
                             

                        /**
                        * field for ProcessorDeptId
                        */

                        
                                    protected java.lang.String localProcessorDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorDeptId(){
                               return localProcessorDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorDeptId
                               */
                               public void setProcessorDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorDeptIdTracker = true;
                                       } else {
                                          localProcessorDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorDeptId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorDeptName
                        */

                        
                                    protected java.lang.String localProcessorDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorDeptName(){
                               return localProcessorDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorDeptName
                               */
                               public void setProcessorDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorDeptNameTracker = true;
                                       } else {
                                          localProcessorDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorDeptName=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorName
                        */

                        
                                    protected java.lang.String localProcessorName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorName(){
                               return localProcessorName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorName
                               */
                               public void setProcessorName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorNameTracker = true;
                                       } else {
                                          localProcessorNameTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorName=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorPos
                        */

                        
                                    protected java.lang.String localProcessorPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorPos(){
                               return localProcessorPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorPos
                               */
                               public void setProcessorPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorPosTracker = true;
                                       } else {
                                          localProcessorPosTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorPos=param;
                                    

                               }
                            

                        /**
						 * field for PubReaders This was an Array!
						 */

                        
                                    protected PubReaderWS[] localPubReaders ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPubReadersTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return PubReaderWS[]
                           */
                           public  PubReaderWS[] getPubReaders(){
                               return localPubReaders;
                           }

                           
                        


                               
                              /**
                               * validate the array for PubReaders
                               */
                              protected void validatePubReaders(PubReaderWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param PubReaders
                              */
                              public void setPubReaders(PubReaderWS[] param){
                              
                                   validatePubReaders(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localPubReadersTracker = true;
                                          } else {
                                             localPubReadersTracker = true;
                                                 
                                          }
                                      
                                      this.localPubReaders=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param PubReaderWS
                             */
                             public void addPubReaders(PubReaderWS param){
                                   if (localPubReaders == null){
                                   localPubReaders = new PubReaderWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localPubReadersTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localPubReaders);
                               list.add(param);
                               this.localPubReaders =
                             (PubReaderWS[])list.toArray(
                            new PubReaderWS[list.size()]);

                             }
                             

                        /**
                        * field for PublicPost
                        */

                        
                                    protected java.lang.String localPublicPost ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPublicPostTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPublicPost(){
                               return localPublicPost;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PublicPost
                               */
                               public void setPublicPost(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPublicPostTracker = true;
                                       } else {
                                          localPublicPostTracker = true;
                                              
                                       }
                                   
                                            this.localPublicPost=param;
                                    

                               }
                            

                        /**
                        * field for ReadRange
                        */

                        
                                    protected java.lang.String localReadRange ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReadRangeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReadRange(){
                               return localReadRange;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReadRange
                               */
                               public void setReadRange(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReadRangeTracker = true;
                                       } else {
                                          localReadRangeTracker = true;
                                              
                                       }
                                   
                                            this.localReadRange=param;
                                    

                               }
                            

                        /**
                        * field for ReceiveDate
                        */

                        
                                    protected java.lang.String localReceiveDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiveDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReceiveDate(){
                               return localReceiveDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiveDate
                               */
                               public void setReceiveDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReceiveDateTracker = true;
                                       } else {
                                          localReceiveDateTracker = true;
                                              
                                       }
                                   
                                            this.localReceiveDate=param;
                                    

                               }
                            

                        /**
                        * field for ReceiverOrder
                        */

                        
                                    protected int localReceiverOrder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiverOrderTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getReceiverOrder(){
                               return localReceiverOrder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReceiverOrder
                               */
                               public void setReceiverOrder(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localReceiverOrderTracker = false;
                                              
                                       } else {
                                          localReceiverOrderTracker = true;
                                       }
                                   
                                            this.localReceiverOrder=param;
                                    

                               }
                            

                        /**
                        * field for RegistDate
                        */

                        
                                    protected java.lang.String localRegistDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegistDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegistDate(){
                               return localRegistDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegistDate
                               */
                               public void setRegistDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegistDateTracker = true;
                                       } else {
                                          localRegistDateTracker = true;
                                              
                                       }
                                   
                                            this.localRegistDate=param;
                                    

                               }
                            

                        /**
                        * field for RegisterId
                        */

                        
                                    protected java.lang.String localRegisterId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterId(){
                               return localRegisterId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterId
                               */
                               public void setRegisterId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterIdTracker = true;
                                       } else {
                                          localRegisterIdTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterId=param;
                                    

                               }
                            

                        /**
                        * field for RegisterName
                        */

                        
                                    protected java.lang.String localRegisterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegisterNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegisterName(){
                               return localRegisterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RegisterName
                               */
                               public void setRegisterName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegisterNameTracker = true;
                                       } else {
                                          localRegisterNameTracker = true;
                                              
                                       }
                                   
                                            this.localRegisterName=param;
                                    

                               }
                            

                        /**
						 * field for RelatedDocWSs This was an Array!
						 */

                        
                                    protected RelatedDocWS[] localRelatedDocWSs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRelatedDocWSsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return RelatedDocWS[]
                           */
                           public  RelatedDocWS[] getRelatedDocWSs(){
                               return localRelatedDocWSs;
                           }

                           
                        


                               
                              /**
                               * validate the array for RelatedDocWSs
                               */
                              protected void validateRelatedDocWSs(RelatedDocWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param RelatedDocWSs
                              */
                              public void setRelatedDocWSs(RelatedDocWS[] param){
                              
                                   validateRelatedDocWSs(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localRelatedDocWSsTracker = true;
                                          } else {
                                             localRelatedDocWSsTracker = true;
                                                 
                                          }
                                      
                                      this.localRelatedDocWSs=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param RelatedDocWS
                             */
                             public void addRelatedDocWSs(RelatedDocWS param){
                                   if (localRelatedDocWSs == null){
                                   localRelatedDocWSs = new RelatedDocWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localRelatedDocWSsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localRelatedDocWSs);
                               list.add(param);
                               this.localRelatedDocWSs =
                             (RelatedDocWS[])list.toArray(
                            new RelatedDocWS[list.size()]);

                             }
                             

                        /**
						 * field for RelatedRules This was an Array!
						 */

                        
                                    protected RelatedRuleWS[] localRelatedRules ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRelatedRulesTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return RelatedRuleWS[]
                           */
                           public  RelatedRuleWS[] getRelatedRules(){
                               return localRelatedRules;
                           }

                           
                        


                               
                              /**
                               * validate the array for RelatedRules
                               */
                              protected void validateRelatedRules(RelatedRuleWS[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param RelatedRules
                              */
                              public void setRelatedRules(RelatedRuleWS[] param){
                              
                                   validateRelatedRules(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localRelatedRulesTracker = true;
                                          } else {
                                             localRelatedRulesTracker = true;
                                                 
                                          }
                                      
                                      this.localRelatedRules=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param RelatedRuleWS
                             */
                             public void addRelatedRules(RelatedRuleWS param){
                                   if (localRelatedRules == null){
                                   localRelatedRules = new RelatedRuleWS[]{};
                                   }

                            
                                 //update the setting tracker
                                localRelatedRulesTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localRelatedRules);
                               list.add(param);
                               this.localRelatedRules =
                             (RelatedRuleWS[])list.toArray(
                            new RelatedRuleWS[list.size()]);

                             }
                             

                        /**
                        * field for SendDate
                        */

                        
                                    protected java.lang.String localSendDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendDate(){
                               return localSendDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendDate
                               */
                               public void setSendDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendDateTracker = true;
                                       } else {
                                          localSendDateTracker = true;
                                              
                                       }
                                   
                                            this.localSendDate=param;
                                    

                               }
                            

                        /**
						 * field for SendInfoWS
						 */

                        
                                    protected SendInfoWS localSendInfoWS ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendInfoWSTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return SendInfoWS
                           */
                           public  SendInfoWS getSendInfoWS(){
                               return localSendInfoWS;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendInfoWS
                               */
                               public void setSendInfoWS(SendInfoWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendInfoWSTracker = true;
                                       } else {
                                          localSendInfoWSTracker = true;
                                              
                                       }
                                   
                                            this.localSendInfoWS=param;
                                    

                               }
                            

                        /**
                        * field for SendOpinion
                        */

                        
                                    protected java.lang.String localSendOpinion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendOpinionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendOpinion(){
                               return localSendOpinion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendOpinion
                               */
                               public void setSendOpinion(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendOpinionTracker = true;
                                       } else {
                                          localSendOpinionTracker = true;
                                              
                                       }
                                   
                                            this.localSendOpinion=param;
                                    

                               }
                            

                        /**
                        * field for SenderCompId
                        */

                        
                                    protected java.lang.String localSenderCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderCompId(){
                               return localSenderCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderCompId
                               */
                               public void setSenderCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderCompIdTracker = true;
                                       } else {
                                          localSenderCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderCompId=param;
                                    

                               }
                            

                        /**
                        * field for SenderCompName
                        */

                        
                                    protected java.lang.String localSenderCompName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderCompNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderCompName(){
                               return localSenderCompName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderCompName
                               */
                               public void setSenderCompName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderCompNameTracker = true;
                                       } else {
                                          localSenderCompNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderCompName=param;
                                    

                               }
                            

                        /**
                        * field for SenderDeptId
                        */

                        
                                    protected java.lang.String localSenderDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderDeptId(){
                               return localSenderDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderDeptId
                               */
                               public void setSenderDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderDeptIdTracker = true;
                                       } else {
                                          localSenderDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderDeptId=param;
                                    

                               }
                            

                        /**
                        * field for SenderDeptName
                        */

                        
                                    protected java.lang.String localSenderDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderDeptName(){
                               return localSenderDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderDeptName
                               */
                               public void setSenderDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderDeptNameTracker = true;
                                       } else {
                                          localSenderDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderDeptName=param;
                                    

                               }
                            

                        /**
                        * field for SenderId
                        */

                        
                                    protected java.lang.String localSenderId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderId(){
                               return localSenderId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderId
                               */
                               public void setSenderId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderIdTracker = true;
                                       } else {
                                          localSenderIdTracker = true;
                                              
                                       }
                                   
                                            this.localSenderId=param;
                                    

                               }
                            

                        /**
                        * field for SenderName
                        */

                        
                                    protected java.lang.String localSenderName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderName(){
                               return localSenderName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderName
                               */
                               public void setSenderName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderNameTracker = true;
                                       } else {
                                          localSenderNameTracker = true;
                                              
                                       }
                                   
                                            this.localSenderName=param;
                                    

                               }
                            

                        /**
                        * field for SenderPos
                        */

                        
                                    protected java.lang.String localSenderPos ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderPosTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderPos(){
                               return localSenderPos;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderPos
                               */
                               public void setSenderPos(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderPosTracker = true;
                                       } else {
                                          localSenderPosTracker = true;
                                              
                                       }
                                   
                                            this.localSenderPos=param;
                                    

                               }
                            

                        /**
                        * field for SerialNumber
                        */

                        
                                    protected int localSerialNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSerialNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getSerialNumber(){
                               return localSerialNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SerialNumber
                               */
                               public void setSerialNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localSerialNumberTracker = false;
                                              
                                       } else {
                                          localSerialNumberTracker = true;
                                       }
                                   
                                            this.localSerialNumber=param;
                                    

                               }
                            

                        /**
                        * field for SubserialNumber
                        */

                        
                                    protected int localSubserialNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubserialNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getSubserialNumber(){
                               return localSubserialNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubserialNumber
                               */
                               public void setSubserialNumber(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localSubserialNumberTracker = false;
                                              
                                       } else {
                                          localSubserialNumberTracker = true;
                                       }
                                   
                                            this.localSubserialNumber=param;
                                    

                               }
                            

                        /**
                        * field for Title
                        */

                        
                                    protected java.lang.String localTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTitle(){
                               return localTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Title
                               */
                               public void setTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTitleTracker = true;
                                       } else {
                                          localTitleTracker = true;
                                              
                                       }
                                   
                                            this.localTitle=param;
                                    

                               }
                            

                        /**
                        * field for TransferYn
                        */

                        
                                    protected java.lang.String localTransferYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransferYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTransferYn(){
                               return localTransferYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TransferYn
                               */
                               public void setTransferYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTransferYnTracker = true;
                                       } else {
                                          localTransferYnTracker = true;
                                              
                                       }
                                   
                                            this.localTransferYn=param;
                                    

                               }
                            

                        /**
                        * field for UrgencyYn
                        */

                        
                                    protected java.lang.String localUrgencyYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUrgencyYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUrgencyYn(){
                               return localUrgencyYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UrgencyYn
                               */
                               public void setUrgencyYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUrgencyYnTracker = true;
                                       } else {
                                          localUrgencyYnTracker = true;
                                              
                                       }
                                   
                                            this.localUrgencyYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       EnfDocWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":EnfDocWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "EnfDocWS",
                           xmlWriter);
                   }

               
                   }
                if (localAcceptDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"acceptDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"acceptDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("acceptDate");
                                    }
                                

                                          if (localAcceptDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAcceptDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAcceptDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"acceptDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"acceptDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("acceptDeptId");
                                    }
                                

                                          if (localAcceptDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAcceptDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAcceptDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"acceptDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"acceptDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("acceptDeptName");
                                    }
                                

                                          if (localAcceptDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAcceptDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccepterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"accepterId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"accepterId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("accepterId");
                                    }
                                

                                          if (localAccepterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccepterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccepterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"accepterName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"accepterName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("accepterName");
                                    }
                                

                                          if (localAccepterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccepterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccepterPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"accepterPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"accepterPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("accepterPos");
                                    }
                                

                                          if (localAccepterPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccepterPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAttachCountTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"attachCount", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"attachCount");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("attachCount");
                                    }
                                
                                               if (localAttachCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("attachCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAttachCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindingIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bindingId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bindingId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bindingId");
                                    }
                                

                                          if (localBindingId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBindingId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindingNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bindingName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bindingName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bindingName");
                                    }
                                

                                          if (localBindingName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBindingName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCategoryNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"categoryName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"categoryName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("categoryName");
                                    }
                                

                                          if (localCategoryName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCategoryName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localConserveTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"conserveType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"conserveType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("conserveType");
                                    }
                                

                                          if (localConserveType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localConserveType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeleteYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deleteYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deleteYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deleteYn");
                                    }
                                

                                          if (localDeleteYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeleteYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeptCategoryTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deptCategory", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deptCategory");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deptCategory");
                                    }
                                

                                          if (localDeptCategory==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeptCategory);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributeDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributeDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributeDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributeDate");
                                    }
                                

                                          if (localDistributeDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributeDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributeNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributeNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributeNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributeNumber");
                                    }
                                
                                               if (localDistributeNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("distributeNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributeNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributeYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributeYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributeYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributeYn");
                                    }
                                

                                          if (localDistributeYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributeYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributorDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributorDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributorDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributorDeptId");
                                    }
                                

                                          if (localDistributorDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributorDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributorDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributorDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributorDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributorDeptName");
                                    }
                                

                                          if (localDistributorDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributorDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributorId");
                                    }
                                

                                          if (localDistributorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributorNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributorName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributorName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributorName");
                                    }
                                

                                          if (localDistributorName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributorName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDistributorPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"distributorPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"distributorPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("distributorPos");
                                    }
                                

                                          if (localDistributorPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDistributorPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docNumber");
                                    }
                                

                                          if (localDocNumber==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocNumber);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocStateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docState", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docState");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docState");
                                    }
                                

                                          if (localDocState==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocState);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docType");
                                    }
                                

                                          if (localDocType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localElectronDocYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"electronDocYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"electronDocYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("electronDocYn");
                                    }
                                

                                          if (localElectronDocYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localElectronDocYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfDocId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfDocId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfDocId");
                                    }
                                

                                          if (localEnfDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfLineWSTracker){
                                    if (localEnfLineWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"enfLineWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"enfLineWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("enfLineWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEnfLineWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfLineWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localEnfLineWSsTracker){
                                       if (localEnfLineWSs!=null){
                                            for (int i = 0;i < localEnfLineWSs.length;i++){
                                                if (localEnfLineWSs[i] != null){
                                                 localEnfLineWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfLineWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"enfLineWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"enfLineWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("enfLineWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"enfLineWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"enfLineWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("enfLineWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localEnfRecvWSsTracker){
                                       if (localEnfRecvWSs!=null){
                                            for (int i = 0;i < localEnfRecvWSs.length;i++){
                                                if (localEnfRecvWSs[i] != null){
                                                 localEnfRecvWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfRecvWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"enfRecvWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"enfRecvWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("enfRecvWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"enfRecvWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"enfRecvWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("enfRecvWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localEnfTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfType");
                                    }
                                

                                          if (localEnfType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileWSsTracker){
                                       if (localFileWSs!=null){
                                            for (int i = 0;i < localFileWSs.length;i++){
                                                if (localFileWSs[i] != null){
                                                 localFileWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"fileWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"fileWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("fileWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"fileWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"fileWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("fileWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localHandoverYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"handoverYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"handoverYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("handoverYn");
                                    }
                                

                                          if (localHandoverYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHandoverYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastUpdateDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"lastUpdateDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"lastUpdateDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("lastUpdateDate");
                                    }
                                

                                          if (localLastUpdateDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLastUpdateDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMobileYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"mobileYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"mobileYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("mobileYn");
                                    }
                                

                                          if (localMobileYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMobileYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNoSerialYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"noSerialYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"noSerialYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("noSerialYn");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("noSerialYn cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoSerialYn));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNonElectronWSTracker){
                                    if (localNonElectronWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"nonElectronWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"nonElectronWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("nonElectronWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localNonElectronWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","nonElectronWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localOpenLevelTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"openLevel", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"openLevel");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("openLevel");
                                    }
                                

                                          if (localOpenLevel==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenLevel);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOpenReasonTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"openReason", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"openReason");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("openReason");
                                    }
                                

                                          if (localOpenReason==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenReason);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOriginCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"originCompId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"originCompId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("originCompId");
                                    }
                                

                                          if (localOriginCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOriginCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOriginDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"originDocId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"originDocId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("originDocId");
                                    }
                                

                                          if (localOriginDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOriginDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnDeptWSsTracker){
                                       if (localOwnDeptWSs!=null){
                                            for (int i = 0;i < localOwnDeptWSs.length;i++){
                                                if (localOwnDeptWSs[i] != null){
                                                 localOwnDeptWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"ownDeptWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"ownDeptWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("ownDeptWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"ownDeptWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"ownDeptWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("ownDeptWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localProcessorDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorDeptId");
                                    }
                                

                                          if (localProcessorDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorDeptName");
                                    }
                                

                                          if (localProcessorDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorName");
                                    }
                                

                                          if (localProcessorName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorPos");
                                    }
                                

                                          if (localProcessorPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPubReadersTracker){
                                       if (localPubReaders!=null){
                                            for (int i = 0;i < localPubReaders.length;i++){
                                                if (localPubReaders[i] != null){
                                                 localPubReaders[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaders"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"pubReaders", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"pubReaders");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("pubReaders");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"pubReaders", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"pubReaders");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("pubReaders");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localPublicPostTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"publicPost", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"publicPost");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("publicPost");
                                    }
                                

                                          if (localPublicPost==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPublicPost);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReadRangeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"readRange", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"readRange");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("readRange");
                                    }
                                

                                          if (localReadRange==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReadRange);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiveDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiveDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiveDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiveDate");
                                    }
                                

                                          if (localReceiveDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReceiveDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiverOrderTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receiverOrder", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receiverOrder");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receiverOrder");
                                    }
                                
                                               if (localReceiverOrder==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("receiverOrder cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverOrder));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegistDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registDate");
                                    }
                                

                                          if (localRegistDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegistDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerId");
                                    }
                                

                                          if (localRegisterId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegisterNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"registerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"registerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("registerName");
                                    }
                                

                                          if (localRegisterName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegisterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRelatedDocWSsTracker){
                                       if (localRelatedDocWSs!=null){
                                            for (int i = 0;i < localRelatedDocWSs.length;i++){
                                                if (localRelatedDocWSs[i] != null){
                                                 localRelatedDocWSs[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedDocWSs"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"relatedDocWSs", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"relatedDocWSs");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("relatedDocWSs");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"relatedDocWSs", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"relatedDocWSs");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("relatedDocWSs");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localRelatedRulesTracker){
                                       if (localRelatedRules!=null){
                                            for (int i = 0;i < localRelatedRules.length;i++){
                                                if (localRelatedRules[i] != null){
                                                 localRelatedRules[i].serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedRules"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                            // write null attribute
                                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                            if (! namespace2.equals("")) {
                                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                                if (prefix2 == null) {
                                                                    prefix2 = generatePrefix(namespace2);

                                                                    xmlWriter.writeStartElement(prefix2,"relatedRules", namespace2);
                                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace2,"relatedRules");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("relatedRules");
                                                            }

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();
                                                    
                                                }

                                            }
                                     } else {
                                        
                                                // write null attribute
                                                java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";
                                                if (! namespace2.equals("")) {
                                                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                    if (prefix2 == null) {
                                                        prefix2 = generatePrefix(namespace2);

                                                        xmlWriter.writeStartElement(prefix2,"relatedRules", namespace2);
                                                        xmlWriter.writeNamespace(prefix2, namespace2);
                                                        xmlWriter.setPrefix(prefix2, namespace2);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace2,"relatedRules");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("relatedRules");
                                                }

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();
                                        
                                    }
                                 } if (localSendDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendDate");
                                    }
                                

                                          if (localSendDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendInfoWSTracker){
                                    if (localSendInfoWS==null){

                                            java.lang.String namespace2 = "http://kdb.ws.dms.ion.net/xsd";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"sendInfoWS", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"sendInfoWS");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("sendInfoWS");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localSendInfoWS.serialize(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendInfoWS"),
                                        factory,xmlWriter);
                                    }
                                } if (localSendOpinionTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendOpinion", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendOpinion");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendOpinion");
                                    }
                                

                                          if (localSendOpinion==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendOpinion);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderCompId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderCompId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderCompId");
                                    }
                                

                                          if (localSenderCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderCompNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderCompName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderCompName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderCompName");
                                    }
                                

                                          if (localSenderCompName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderCompName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderDeptId");
                                    }
                                

                                          if (localSenderDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderDeptName");
                                    }
                                

                                          if (localSenderDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderId");
                                    }
                                

                                          if (localSenderId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderName");
                                    }
                                

                                          if (localSenderName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderPosTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderPos", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderPos");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderPos");
                                    }
                                

                                          if (localSenderPos==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderPos);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSerialNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"serialNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"serialNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("serialNumber");
                                    }
                                
                                               if (localSerialNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("serialNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSerialNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubserialNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"subserialNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"subserialNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("subserialNumber");
                                    }
                                
                                               if (localSubserialNumber==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("subserialNumber cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubserialNumber));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTitleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"title", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"title");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("title");
                                    }
                                

                                          if (localTitle==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTransferYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"transferYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"transferYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("transferYn");
                                    }
                                

                                          if (localTransferYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTransferYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUrgencyYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"urgencyYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"urgencyYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("urgencyYn");
                                    }
                                

                                          if (localUrgencyYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUrgencyYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAcceptDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "acceptDate"));
                                 
                                         elementList.add(localAcceptDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptDate));
                                    } if (localAcceptDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "acceptDeptId"));
                                 
                                         elementList.add(localAcceptDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptDeptId));
                                    } if (localAcceptDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "acceptDeptName"));
                                 
                                         elementList.add(localAcceptDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptDeptName));
                                    } if (localAccepterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "accepterId"));
                                 
                                         elementList.add(localAccepterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccepterId));
                                    } if (localAccepterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "accepterName"));
                                 
                                         elementList.add(localAccepterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccepterName));
                                    } if (localAccepterPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "accepterPos"));
                                 
                                         elementList.add(localAccepterPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccepterPos));
                                    } if (localAttachCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "attachCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAttachCount));
                            } if (localBindingIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindingId"));
                                 
                                         elementList.add(localBindingId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBindingId));
                                    } if (localBindingNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindingName"));
                                 
                                         elementList.add(localBindingName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBindingName));
                                    } if (localCategoryNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "categoryName"));
                                 
                                         elementList.add(localCategoryName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCategoryName));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localConserveTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "conserveType"));
                                 
                                         elementList.add(localConserveType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConserveType));
                                    } if (localDeleteYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deleteYn"));
                                 
                                         elementList.add(localDeleteYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteYn));
                                    } if (localDeptCategoryTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deptCategory"));
                                 
                                         elementList.add(localDeptCategory==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptCategory));
                                    } if (localDistributeDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributeDate"));
                                 
                                         elementList.add(localDistributeDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributeDate));
                                    } if (localDistributeNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributeNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributeNumber));
                            } if (localDistributeYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributeYn"));
                                 
                                         elementList.add(localDistributeYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributeYn));
                                    } if (localDistributorDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributorDeptId"));
                                 
                                         elementList.add(localDistributorDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributorDeptId));
                                    } if (localDistributorDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributorDeptName"));
                                 
                                         elementList.add(localDistributorDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributorDeptName));
                                    } if (localDistributorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributorId"));
                                 
                                         elementList.add(localDistributorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributorId));
                                    } if (localDistributorNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributorName"));
                                 
                                         elementList.add(localDistributorName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributorName));
                                    } if (localDistributorPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "distributorPos"));
                                 
                                         elementList.add(localDistributorPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDistributorPos));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localDocNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docNumber"));
                                 
                                         elementList.add(localDocNumber==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocNumber));
                                    } if (localDocStateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docState"));
                                 
                                         elementList.add(localDocState==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocState));
                                    } if (localDocTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docType"));
                                 
                                         elementList.add(localDocType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocType));
                                    } if (localElectronDocYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "electronDocYn"));
                                 
                                         elementList.add(localElectronDocYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localElectronDocYn));
                                    } if (localEnfDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfDocId"));
                                 
                                         elementList.add(localEnfDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfDocId));
                                    } if (localEnfLineWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfLineWS"));
                            
                            
                                    elementList.add(localEnfLineWS==null?null:
                                    localEnfLineWS);
                                } if (localEnfLineWSsTracker){
                             if (localEnfLineWSs!=null) {
                                 for (int i = 0;i < localEnfLineWSs.length;i++){

                                    if (localEnfLineWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "enfLineWSs"));
                                         elementList.add(localEnfLineWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "enfLineWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "enfLineWSs"));
                                        elementList.add(localEnfLineWSs);
                                    
                             }

                        } if (localEnfRecvWSsTracker){
                             if (localEnfRecvWSs!=null) {
                                 for (int i = 0;i < localEnfRecvWSs.length;i++){

                                    if (localEnfRecvWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "enfRecvWSs"));
                                         elementList.add(localEnfRecvWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "enfRecvWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "enfRecvWSs"));
                                        elementList.add(localEnfRecvWSs);
                                    
                             }

                        } if (localEnfTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfType"));
                                 
                                         elementList.add(localEnfType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfType));
                                    } if (localFileWSsTracker){
                             if (localFileWSs!=null) {
                                 for (int i = 0;i < localFileWSs.length;i++){

                                    if (localFileWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "fileWSs"));
                                         elementList.add(localFileWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "fileWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "fileWSs"));
                                        elementList.add(localFileWSs);
                                    
                             }

                        } if (localHandoverYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "handoverYn"));
                                 
                                         elementList.add(localHandoverYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHandoverYn));
                                    } if (localLastUpdateDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "lastUpdateDate"));
                                 
                                         elementList.add(localLastUpdateDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastUpdateDate));
                                    } if (localMobileYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "mobileYn"));
                                 
                                         elementList.add(localMobileYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMobileYn));
                                    } if (localNoSerialYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "noSerialYn"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoSerialYn));
                            } if (localNonElectronWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "nonElectronWS"));
                            
                            
                                    elementList.add(localNonElectronWS==null?null:
                                    localNonElectronWS);
                                } if (localOpenLevelTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "openLevel"));
                                 
                                         elementList.add(localOpenLevel==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenLevel));
                                    } if (localOpenReasonTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "openReason"));
                                 
                                         elementList.add(localOpenReason==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenReason));
                                    } if (localOriginCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "originCompId"));
                                 
                                         elementList.add(localOriginCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginCompId));
                                    } if (localOriginDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "originDocId"));
                                 
                                         elementList.add(localOriginDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginDocId));
                                    } if (localOwnDeptWSsTracker){
                             if (localOwnDeptWSs!=null) {
                                 for (int i = 0;i < localOwnDeptWSs.length;i++){

                                    if (localOwnDeptWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "ownDeptWSs"));
                                         elementList.add(localOwnDeptWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "ownDeptWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "ownDeptWSs"));
                                        elementList.add(localOwnDeptWSs);
                                    
                             }

                        } if (localProcessorDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorDeptId"));
                                 
                                         elementList.add(localProcessorDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorDeptId));
                                    } if (localProcessorDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorDeptName"));
                                 
                                         elementList.add(localProcessorDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorDeptName));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localProcessorNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorName"));
                                 
                                         elementList.add(localProcessorName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorName));
                                    } if (localProcessorPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorPos"));
                                 
                                         elementList.add(localProcessorPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorPos));
                                    } if (localPubReadersTracker){
                             if (localPubReaders!=null) {
                                 for (int i = 0;i < localPubReaders.length;i++){

                                    if (localPubReaders[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "pubReaders"));
                                         elementList.add(localPubReaders[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "pubReaders"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "pubReaders"));
                                        elementList.add(localPubReaders);
                                    
                             }

                        } if (localPublicPostTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "publicPost"));
                                 
                                         elementList.add(localPublicPost==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPublicPost));
                                    } if (localReadRangeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "readRange"));
                                 
                                         elementList.add(localReadRange==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadRange));
                                    } if (localReceiveDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiveDate"));
                                 
                                         elementList.add(localReceiveDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiveDate));
                                    } if (localReceiverOrderTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receiverOrder"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiverOrder));
                            } if (localRegistDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registDate"));
                                 
                                         elementList.add(localRegistDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistDate));
                                    } if (localRegisterIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerId"));
                                 
                                         elementList.add(localRegisterId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterId));
                                    } if (localRegisterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "registerName"));
                                 
                                         elementList.add(localRegisterName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegisterName));
                                    } if (localRelatedDocWSsTracker){
                             if (localRelatedDocWSs!=null) {
                                 for (int i = 0;i < localRelatedDocWSs.length;i++){

                                    if (localRelatedDocWSs[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedDocWSs"));
                                         elementList.add(localRelatedDocWSs[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedDocWSs"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedDocWSs"));
                                        elementList.add(localRelatedDocWSs);
                                    
                             }

                        } if (localRelatedRulesTracker){
                             if (localRelatedRules!=null) {
                                 for (int i = 0;i < localRelatedRules.length;i++){

                                    if (localRelatedRules[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedRules"));
                                         elementList.add(localRelatedRules[i]);
                                    } else {
                                        
                                                elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedRules"));
                                                elementList.add(null);
                                            
                                    }

                                 }
                             } else {
                                 
                                        elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                          "relatedRules"));
                                        elementList.add(localRelatedRules);
                                    
                             }

                        } if (localSendDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendDate"));
                                 
                                         elementList.add(localSendDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendDate));
                                    } if (localSendInfoWSTracker){
                            elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendInfoWS"));
                            
                            
                                    elementList.add(localSendInfoWS==null?null:
                                    localSendInfoWS);
                                } if (localSendOpinionTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendOpinion"));
                                 
                                         elementList.add(localSendOpinion==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendOpinion));
                                    } if (localSenderCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderCompId"));
                                 
                                         elementList.add(localSenderCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderCompId));
                                    } if (localSenderCompNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderCompName"));
                                 
                                         elementList.add(localSenderCompName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderCompName));
                                    } if (localSenderDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderDeptId"));
                                 
                                         elementList.add(localSenderDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderDeptId));
                                    } if (localSenderDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderDeptName"));
                                 
                                         elementList.add(localSenderDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderDeptName));
                                    } if (localSenderIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderId"));
                                 
                                         elementList.add(localSenderId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderId));
                                    } if (localSenderNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderName"));
                                 
                                         elementList.add(localSenderName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderName));
                                    } if (localSenderPosTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderPos"));
                                 
                                         elementList.add(localSenderPos==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderPos));
                                    } if (localSerialNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "serialNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSerialNumber));
                            } if (localSubserialNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "subserialNumber"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubserialNumber));
                            } if (localTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "title"));
                                 
                                         elementList.add(localTitle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTitle));
                                    } if (localTransferYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "transferYn"));
                                 
                                         elementList.add(localTransferYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransferYn));
                                    } if (localUrgencyYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "urgencyYn"));
                                 
                                         elementList.add(localUrgencyYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUrgencyYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static EnfDocWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            EnfDocWS object =
                new EnfDocWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"EnfDocWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (EnfDocWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                        java.util.ArrayList list30 = new java.util.ArrayList();
                    
                        java.util.ArrayList list31 = new java.util.ArrayList();
                    
                        java.util.ArrayList list33 = new java.util.ArrayList();
                    
                        java.util.ArrayList list43 = new java.util.ArrayList();
                    
                        java.util.ArrayList list49 = new java.util.ArrayList();
                    
                        java.util.ArrayList list57 = new java.util.ArrayList();
                    
                        java.util.ArrayList list58 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","acceptDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAcceptDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","acceptDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAcceptDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","acceptDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAcceptDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","accepterId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccepterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","accepterName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccepterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","accepterPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccepterPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","attachCount").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAttachCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setAttachCount(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindingId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBindingId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindingName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBindingName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","categoryName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCategoryName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","conserveType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setConserveType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deleteYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeleteYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deptCategory").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeptCategory(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributeDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributeDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributeNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributeNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setDistributeNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributeYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributeYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributorDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributorDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributorDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributorDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributorName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributorName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","distributorPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDistributorPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docNumber").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docState").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocState(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","electronDocYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setElectronDocYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfDocId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfLineWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEnfLineWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setEnfLineWS(EnfLineWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfLineWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list30.add(null);
                                                              reader.next();
                                                          } else {
                                                        list30.add(EnfLineWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone30 = false;
                                                        while(!loopDone30){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone30 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfLineWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list30.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list30.add(EnfLineWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone30 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setEnfLineWSs((EnfLineWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                EnfLineWS.class,
                                                                list30));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfRecvWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list31.add(null);
                                                              reader.next();
                                                          } else {
                                                        list31.add(EnfRecvWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone31 = false;
                                                        while(!loopDone31){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone31 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfRecvWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list31.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list31.add(EnfRecvWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone31 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setEnfRecvWSs((EnfRecvWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                EnfRecvWS.class,
                                                                list31));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list33.add(null);
                                                              reader.next();
                                                          } else {
                                                        list33.add(FileWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone33 = false;
                                                        while(!loopDone33){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone33 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fileWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list33.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list33.add(FileWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone33 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setFileWSs((FileWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                FileWS.class,
                                                                list33));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","handoverYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHandoverYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","lastUpdateDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastUpdateDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","mobileYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMobileYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","noSerialYn").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNoSerialYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","nonElectronWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setNonElectronWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setNonElectronWS(NonElectronWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","openLevel").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenLevel(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","openReason").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenReason(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","originCompId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOriginCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","originDocId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOriginDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list43.add(null);
                                                              reader.next();
                                                          } else {
                                                        list43.add(OwnDeptWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone43 = false;
                                                        while(!loopDone43){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone43 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list43.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list43.add(OwnDeptWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone43 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setOwnDeptWSs((OwnDeptWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                OwnDeptWS.class,
                                                                list43));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaders").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list49.add(null);
                                                              reader.next();
                                                          } else {
                                                        list49.add(PubReaderWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone49 = false;
                                                        while(!loopDone49){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone49 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pubReaders").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list49.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list49.add(PubReaderWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone49 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setPubReaders((PubReaderWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                PubReaderWS.class,
                                                                list49));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","publicPost").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPublicPost(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","readRange").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReadRange(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiveDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiveDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receiverOrder").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceiverOrder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setReceiverOrder(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegistDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","registerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegisterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedDocWSs").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list57.add(null);
                                                              reader.next();
                                                          } else {
                                                        list57.add(RelatedDocWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone57 = false;
                                                        while(!loopDone57){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone57 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedDocWSs").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list57.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list57.add(RelatedDocWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone57 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setRelatedDocWSs((RelatedDocWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                RelatedDocWS.class,
                                                                list57));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedRules").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list58.add(null);
                                                              reader.next();
                                                          } else {
                                                        list58.add(RelatedRuleWS.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone58 = false;
                                                        while(!loopDone58){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone58 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","relatedRules").equals(reader.getName())){
                                                                    
                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list58.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list58.add(RelatedRuleWS.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone58 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setRelatedRules((RelatedRuleWS[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                RelatedRuleWS.class,
                                                                list58));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendInfoWS").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setSendInfoWS(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setSendInfoWS(SendInfoWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendOpinion").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendOpinion(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderCompId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderCompName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderCompName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderPos").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderPos(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","serialNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSerialNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setSerialNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","subserialNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubserialNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setSubserialNumber(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","title").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","transferYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTransferYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","urgencyYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUrgencyYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class BindWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = BindWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Arrange
                        */

                        
                                    protected java.lang.String localArrange ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localArrangeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getArrange(){
                               return localArrange;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Arrange
                               */
                               public void setArrange(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localArrangeTracker = true;
                                       } else {
                                          localArrangeTracker = true;
                                              
                                       }
                                   
                                            this.localArrange=param;
                                    

                               }
                            

                        /**
                        * field for BindId
                        */

                        
                                    protected java.lang.String localBindId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBindId(){
                               return localBindId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindId
                               */
                               public void setBindId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindIdTracker = true;
                                       } else {
                                          localBindIdTracker = true;
                                              
                                       }
                                   
                                            this.localBindId=param;
                                    

                               }
                            

                        /**
                        * field for BindName
                        */

                        
                                    protected java.lang.String localBindName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBindName(){
                               return localBindName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BindName
                               */
                               public void setBindName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindNameTracker = true;
                                       } else {
                                          localBindNameTracker = true;
                                              
                                       }
                                   
                                            this.localBindName=param;
                                    

                               }
                            

                        /**
                        * field for Binding
                        */

                        
                                    protected java.lang.String localBinding ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBindingTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBinding(){
                               return localBinding;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Binding
                               */
                               public void setBinding(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBindingTracker = true;
                                       } else {
                                          localBindingTracker = true;
                                              
                                       }
                                   
                                            this.localBinding=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for CreateYear
                        */

                        
                                    protected java.lang.String localCreateYear ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreateYearTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreateYear(){
                               return localCreateYear;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreateYear
                               */
                               public void setCreateYear(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreateYearTracker = true;
                                       } else {
                                          localCreateYearTracker = true;
                                              
                                       }
                                   
                                            this.localCreateYear=param;
                                    

                               }
                            

                        /**
                        * field for Created
                        */

                        
                                    protected java.lang.String localCreated ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreated(){
                               return localCreated;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Created
                               */
                               public void setCreated(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedTracker = true;
                                       } else {
                                          localCreatedTracker = true;
                                              
                                       }
                                   
                                            this.localCreated=param;
                                    

                               }
                            

                        /**
                        * field for CreatedId
                        */

                        
                                    protected java.lang.String localCreatedId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedId(){
                               return localCreatedId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedId
                               */
                               public void setCreatedId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedIdTracker = true;
                                       } else {
                                          localCreatedIdTracker = true;
                                              
                                       }
                                   
                                            this.localCreatedId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedName
                        */

                        
                                    protected java.lang.String localCreatedName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedName(){
                               return localCreatedName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedName
                               */
                               public void setCreatedName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedNameTracker = true;
                                       } else {
                                          localCreatedNameTracker = true;
                                              
                                       }
                                   
                                            this.localCreatedName=param;
                                    

                               }
                            

                        /**
                        * field for CurrentTime
                        */

                        
                                    protected java.lang.String localCurrentTime ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCurrentTimeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCurrentTime(){
                               return localCurrentTime;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CurrentTime
                               */
                               public void setCurrentTime(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCurrentTimeTracker = true;
                                       } else {
                                          localCurrentTimeTracker = true;
                                              
                                       }
                                   
                                            this.localCurrentTime=param;
                                    

                               }
                            

                        /**
                        * field for DeptId
                        */

                        
                                    protected java.lang.String localDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeptId(){
                               return localDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeptId
                               */
                               public void setDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeptIdTracker = true;
                                       } else {
                                          localDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localDeptId=param;
                                    

                               }
                            

                        /**
                        * field for DeptName
                        */

                        
                                    protected java.lang.String localDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeptName(){
                               return localDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeptName
                               */
                               public void setDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeptNameTracker = true;
                                       } else {
                                          localDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localDeptName=param;
                                    

                               }
                            

                        /**
                        * field for DocCount
                        */

                        
                                    protected int localDocCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocCountTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getDocCount(){
                               return localDocCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocCount
                               */
                               public void setDocCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localDocCountTracker = false;
                                              
                                       } else {
                                          localDocCountTracker = true;
                                       }
                                   
                                            this.localDocCount=param;
                                    

                               }
                            

                        /**
                        * field for DocType
                        */

                        
                                    protected java.lang.String localDocType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocType(){
                               return localDocType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocType
                               */
                               public void setDocType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocTypeTracker = true;
                                       } else {
                                          localDocTypeTracker = true;
                                              
                                       }
                                   
                                            this.localDocType=param;
                                    

                               }
                            

                        /**
                        * field for ExpireYear
                        */

                        
                                    protected java.lang.String localExpireYear ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExpireYearTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExpireYear(){
                               return localExpireYear;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExpireYear
                               */
                               public void setExpireYear(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExpireYearTracker = true;
                                       } else {
                                          localExpireYearTracker = true;
                                              
                                       }
                                   
                                            this.localExpireYear=param;
                                    

                               }
                            

                        /**
                        * field for IsActive
                        */

                        
                                    protected java.lang.String localIsActive ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIsActiveTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIsActive(){
                               return localIsActive;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IsActive
                               */
                               public void setIsActive(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIsActiveTracker = true;
                                       } else {
                                          localIsActiveTracker = true;
                                              
                                       }
                                   
                                            this.localIsActive=param;
                                    

                               }
                            

                        /**
                        * field for Modified
                        */

                        
                                    protected java.lang.String localModified ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModified(){
                               return localModified;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modified
                               */
                               public void setModified(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedTracker = true;
                                       } else {
                                          localModifiedTracker = true;
                                              
                                       }
                                   
                                            this.localModified=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedId
                        */

                        
                                    protected java.lang.String localModifiedId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedId(){
                               return localModifiedId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedId
                               */
                               public void setModifiedId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedIdTracker = true;
                                       } else {
                                          localModifiedIdTracker = true;
                                              
                                       }
                                   
                                            this.localModifiedId=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedName
                        */

                        
                                    protected java.lang.String localModifiedName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedName(){
                               return localModifiedName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedName
                               */
                               public void setModifiedName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedNameTracker = true;
                                       } else {
                                          localModifiedNameTracker = true;
                                              
                                       }
                                   
                                            this.localModifiedName=param;
                                    

                               }
                            

                        /**
                        * field for NextBindId
                        */

                        
                                    protected java.lang.String localNextBindId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNextBindIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNextBindId(){
                               return localNextBindId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NextBindId
                               */
                               public void setNextBindId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNextBindIdTracker = true;
                                       } else {
                                          localNextBindIdTracker = true;
                                              
                                       }
                                   
                                            this.localNextBindId=param;
                                    

                               }
                            

                        /**
                        * field for Ordered
                        */

                        
                                    protected int localOrdered ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOrderedTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getOrdered(){
                               return localOrdered;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Ordered
                               */
                               public void setOrdered(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localOrderedTracker = false;
                                              
                                       } else {
                                          localOrderedTracker = true;
                                       }
                                   
                                            this.localOrdered=param;
                                    

                               }
                            

                        /**
                        * field for OrgBindId
                        */

                        
                                    protected java.lang.String localOrgBindId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOrgBindIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOrgBindId(){
                               return localOrgBindId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OrgBindId
                               */
                               public void setOrgBindId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOrgBindIdTracker = true;
                                       } else {
                                          localOrgBindIdTracker = true;
                                              
                                       }
                                   
                                            this.localOrgBindId=param;
                                    

                               }
                            

                        /**
                        * field for RetentionPeriod
                        */

                        
                                    protected java.lang.String localRetentionPeriod ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRetentionPeriodTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRetentionPeriod(){
                               return localRetentionPeriod;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RetentionPeriod
                               */
                               public void setRetentionPeriod(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRetentionPeriodTracker = true;
                                       } else {
                                          localRetentionPeriodTracker = true;
                                              
                                       }
                                   
                                            this.localRetentionPeriod=param;
                                    

                               }
                            

                        /**
                        * field for SendCreateYear
                        */

                        
                                    protected java.lang.String localSendCreateYear ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendCreateYearTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendCreateYear(){
                               return localSendCreateYear;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendCreateYear
                               */
                               public void setSendCreateYear(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendCreateYearTracker = true;
                                       } else {
                                          localSendCreateYearTracker = true;
                                              
                                       }
                                   
                                            this.localSendCreateYear=param;
                                    

                               }
                            

                        /**
                        * field for SendDeptId
                        */

                        
                                    protected java.lang.String localSendDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendDeptId(){
                               return localSendDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendDeptId
                               */
                               public void setSendDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendDeptIdTracker = true;
                                       } else {
                                          localSendDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localSendDeptId=param;
                                    

                               }
                            

                        /**
                        * field for SendDeptName
                        */

                        
                                    protected java.lang.String localSendDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendDeptName(){
                               return localSendDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendDeptName
                               */
                               public void setSendDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendDeptNameTracker = true;
                                       } else {
                                          localSendDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localSendDeptName=param;
                                    

                               }
                            

                        /**
                        * field for SendType
                        */

                        
                                    protected java.lang.String localSendType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendType(){
                               return localSendType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendType
                               */
                               public void setSendType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendTypeTracker = true;
                                       } else {
                                          localSendTypeTracker = true;
                                              
                                       }
                                   
                                            this.localSendType=param;
                                    

                               }
                            

                        /**
                        * field for SendUnitId
                        */

                        
                                    protected java.lang.String localSendUnitId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendUnitIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendUnitId(){
                               return localSendUnitId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendUnitId
                               */
                               public void setSendUnitId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendUnitIdTracker = true;
                                       } else {
                                          localSendUnitIdTracker = true;
                                              
                                       }
                                   
                                            this.localSendUnitId=param;
                                    

                               }
                            

                        /**
                        * field for SendUnitName
                        */

                        
                                    protected java.lang.String localSendUnitName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendUnitNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendUnitName(){
                               return localSendUnitName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendUnitName
                               */
                               public void setSendUnitName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendUnitNameTracker = true;
                                       } else {
                                          localSendUnitNameTracker = true;
                                              
                                       }
                                   
                                            this.localSendUnitName=param;
                                    

                               }
                            

                        /**
                        * field for Sended
                        */

                        
                                    protected java.lang.String localSended ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendedTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSended(){
                               return localSended;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Sended
                               */
                               public void setSended(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendedTracker = true;
                                       } else {
                                          localSendedTracker = true;
                                              
                                       }
                                   
                                            this.localSended=param;
                                    

                               }
                            

                        /**
                        * field for ShareCount
                        */

                        
                                    protected int localShareCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShareCountTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getShareCount(){
                               return localShareCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShareCount
                               */
                               public void setShareCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localShareCountTracker = false;
                                              
                                       } else {
                                          localShareCountTracker = true;
                                       }
                                   
                                            this.localShareCount=param;
                                    

                               }
                            

                        /**
                        * field for TargetId
                        */

                        
                                    protected java.lang.String localTargetId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTargetIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTargetId(){
                               return localTargetId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TargetId
                               */
                               public void setTargetId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTargetIdTracker = true;
                                       } else {
                                          localTargetIdTracker = true;
                                              
                                       }
                                   
                                            this.localTargetId=param;
                                    

                               }
                            

                        /**
                        * field for TotalCount
                        */

                        
                                    protected int localTotalCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTotalCountTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getTotalCount(){
                               return localTotalCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TotalCount
                               */
                               public void setTotalCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localTotalCountTracker = false;
                                              
                                       } else {
                                          localTotalCountTracker = true;
                                       }
                                   
                                            this.localTotalCount=param;
                                    

                               }
                            

                        /**
                        * field for UnitId
                        */

                        
                                    protected java.lang.String localUnitId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUnitIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUnitId(){
                               return localUnitId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UnitId
                               */
                               public void setUnitId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUnitIdTracker = true;
                                       } else {
                                          localUnitIdTracker = true;
                                              
                                       }
                                   
                                            this.localUnitId=param;
                                    

                               }
                            

                        /**
                        * field for UnitName
                        */

                        
                                    protected java.lang.String localUnitName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUnitNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUnitName(){
                               return localUnitName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UnitName
                               */
                               public void setUnitName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUnitNameTracker = true;
                                       } else {
                                          localUnitNameTracker = true;
                                              
                                       }
                                   
                                            this.localUnitName=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       BindWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":BindWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "BindWS",
                           xmlWriter);
                   }

               
                   }
                if (localArrangeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"arrange", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"arrange");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("arrange");
                                    }
                                

                                          if (localArrange==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localArrange);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bindId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bindId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bindId");
                                    }
                                

                                          if (localBindId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBindId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"bindName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"bindName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("bindName");
                                    }
                                

                                          if (localBindName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBindName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBindingTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"binding", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"binding");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("binding");
                                    }
                                

                                          if (localBinding==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBinding);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreateYearTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"createYear", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"createYear");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("createYear");
                                    }
                                

                                          if (localCreateYear==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreateYear);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"created", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"created");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("created");
                                    }
                                

                                          if (localCreated==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreated);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"createdId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"createdId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("createdId");
                                    }
                                

                                          if (localCreatedId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"createdName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"createdName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("createdName");
                                    }
                                

                                          if (localCreatedName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCurrentTimeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"currentTime", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"currentTime");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("currentTime");
                                    }
                                

                                          if (localCurrentTime==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCurrentTime);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deptId");
                                    }
                                

                                          if (localDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deptName");
                                    }
                                

                                          if (localDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocCountTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docCount", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docCount");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docCount");
                                    }
                                
                                               if (localDocCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("docCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docType");
                                    }
                                

                                          if (localDocType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExpireYearTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"expireYear", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"expireYear");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("expireYear");
                                    }
                                

                                          if (localExpireYear==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExpireYear);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIsActiveTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"isActive", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"isActive");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("isActive");
                                    }
                                

                                          if (localIsActive==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIsActive);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"modified", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"modified");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("modified");
                                    }
                                

                                          if (localModified==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModified);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"modifiedId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"modifiedId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("modifiedId");
                                    }
                                

                                          if (localModifiedId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"modifiedName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"modifiedName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("modifiedName");
                                    }
                                

                                          if (localModifiedName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNextBindIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"nextBindId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"nextBindId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("nextBindId");
                                    }
                                

                                          if (localNextBindId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNextBindId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOrderedTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ordered", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ordered");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ordered");
                                    }
                                
                                               if (localOrdered==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ordered cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrdered));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOrgBindIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"orgBindId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"orgBindId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("orgBindId");
                                    }
                                

                                          if (localOrgBindId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOrgBindId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRetentionPeriodTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"retentionPeriod", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"retentionPeriod");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("retentionPeriod");
                                    }
                                

                                          if (localRetentionPeriod==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRetentionPeriod);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendCreateYearTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendCreateYear", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendCreateYear");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendCreateYear");
                                    }
                                

                                          if (localSendCreateYear==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendCreateYear);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendDeptId");
                                    }
                                

                                          if (localSendDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendDeptName");
                                    }
                                

                                          if (localSendDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendType");
                                    }
                                

                                          if (localSendType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendUnitIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendUnitId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendUnitId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendUnitId");
                                    }
                                

                                          if (localSendUnitId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendUnitId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendUnitNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendUnitName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendUnitName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendUnitName");
                                    }
                                

                                          if (localSendUnitName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendUnitName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendedTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sended", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sended");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sended");
                                    }
                                

                                          if (localSended==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSended);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShareCountTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"shareCount", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"shareCount");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("shareCount");
                                    }
                                
                                               if (localShareCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("shareCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShareCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTargetIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"targetId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"targetId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("targetId");
                                    }
                                

                                          if (localTargetId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTargetId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTotalCountTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"totalCount", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"totalCount");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("totalCount");
                                    }
                                
                                               if (localTotalCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("totalCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotalCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUnitIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"unitId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"unitId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("unitId");
                                    }
                                

                                          if (localUnitId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUnitId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUnitNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"unitName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"unitName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("unitName");
                                    }
                                

                                          if (localUnitName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUnitName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localArrangeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "arrange"));
                                 
                                         elementList.add(localArrange==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localArrange));
                                    } if (localBindIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindId"));
                                 
                                         elementList.add(localBindId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBindId));
                                    } if (localBindNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "bindName"));
                                 
                                         elementList.add(localBindName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBindName));
                                    } if (localBindingTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "binding"));
                                 
                                         elementList.add(localBinding==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBinding));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localCreateYearTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "createYear"));
                                 
                                         elementList.add(localCreateYear==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreateYear));
                                    } if (localCreatedTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "created"));
                                 
                                         elementList.add(localCreated==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreated));
                                    } if (localCreatedIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "createdId"));
                                 
                                         elementList.add(localCreatedId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedId));
                                    } if (localCreatedNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "createdName"));
                                 
                                         elementList.add(localCreatedName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedName));
                                    } if (localCurrentTimeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "currentTime"));
                                 
                                         elementList.add(localCurrentTime==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCurrentTime));
                                    } if (localDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deptId"));
                                 
                                         elementList.add(localDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptId));
                                    } if (localDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "deptName"));
                                 
                                         elementList.add(localDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptName));
                                    } if (localDocCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocCount));
                            } if (localDocTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docType"));
                                 
                                         elementList.add(localDocType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocType));
                                    } if (localExpireYearTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "expireYear"));
                                 
                                         elementList.add(localExpireYear==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExpireYear));
                                    } if (localIsActiveTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "isActive"));
                                 
                                         elementList.add(localIsActive==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsActive));
                                    } if (localModifiedTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "modified"));
                                 
                                         elementList.add(localModified==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModified));
                                    } if (localModifiedIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "modifiedId"));
                                 
                                         elementList.add(localModifiedId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedId));
                                    } if (localModifiedNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "modifiedName"));
                                 
                                         elementList.add(localModifiedName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedName));
                                    } if (localNextBindIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "nextBindId"));
                                 
                                         elementList.add(localNextBindId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextBindId));
                                    } if (localOrderedTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "ordered"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrdered));
                            } if (localOrgBindIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "orgBindId"));
                                 
                                         elementList.add(localOrgBindId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrgBindId));
                                    } if (localRetentionPeriodTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "retentionPeriod"));
                                 
                                         elementList.add(localRetentionPeriod==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetentionPeriod));
                                    } if (localSendCreateYearTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendCreateYear"));
                                 
                                         elementList.add(localSendCreateYear==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendCreateYear));
                                    } if (localSendDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendDeptId"));
                                 
                                         elementList.add(localSendDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendDeptId));
                                    } if (localSendDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendDeptName"));
                                 
                                         elementList.add(localSendDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendDeptName));
                                    } if (localSendTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendType"));
                                 
                                         elementList.add(localSendType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendType));
                                    } if (localSendUnitIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendUnitId"));
                                 
                                         elementList.add(localSendUnitId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendUnitId));
                                    } if (localSendUnitNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendUnitName"));
                                 
                                         elementList.add(localSendUnitName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendUnitName));
                                    } if (localSendedTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sended"));
                                 
                                         elementList.add(localSended==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSended));
                                    } if (localShareCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "shareCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShareCount));
                            } if (localTargetIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "targetId"));
                                 
                                         elementList.add(localTargetId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTargetId));
                                    } if (localTotalCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "totalCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotalCount));
                            } if (localUnitIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "unitId"));
                                 
                                         elementList.add(localUnitId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnitId));
                                    } if (localUnitNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "unitName"));
                                 
                                         elementList.add(localUnitName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnitName));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static BindWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            BindWS object =
                new BindWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"BindWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (BindWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","arrange").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setArrange(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBindId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","bindName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBindName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","binding").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBinding(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","createYear").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreateYear(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","created").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreated(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","createdId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","createdName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","currentTime").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCurrentTime(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","deptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docCount").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setDocCount(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","expireYear").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExpireYear(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","isActive").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIsActive(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","modified").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModified(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","modifiedId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","modifiedName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","nextBindId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNextBindId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ordered").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOrdered(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setOrdered(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","orgBindId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOrgBindId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","retentionPeriod").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRetentionPeriod(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendCreateYear").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendCreateYear(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendUnitId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendUnitId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendUnitName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendUnitName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sended").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSended(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","shareCount").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShareCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setShareCount(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","targetId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTargetId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","totalCount").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTotalCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setTotalCount(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","unitId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUnitId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","unitName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUnitName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class CreateResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "createResponse",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for _return
						 */

                        
                                    protected ResponseBean local_return ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean local_returnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ResponseBean
                           */
                           public  ResponseBean get_return(){
                               return local_return;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param _return
                               */
                               public void set_return(ResponseBean param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          local_returnTracker = true;
                                       } else {
                                          local_returnTracker = true;
                                              
                                       }
                                   
                                            this.local_return=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       CreateResponse.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":createResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "createResponse",
                           xmlWriter);
                   }

               
                   }
                if (local_returnTracker){
                                    if (local_return==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"return", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"return");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("return");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     local_return.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (local_returnTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "return"));
                            
                            
                                    elementList.add(local_return==null?null:
                                    local_return);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static CreateResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            CreateResponse object =
                new CreateResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"createResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CreateResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.set_return(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.set_return(ResponseBean.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class Update
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "update",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for Vo
						 */

                        
                                    protected DocumentWS localVo ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localVoTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return DocumentWS
                           */
                           public  DocumentWS getVo(){
                               return localVo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Vo
                               */
                               public void setVo(DocumentWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localVoTracker = true;
                                       } else {
                                          localVoTracker = true;
                                              
                                       }
                                   
                                            this.localVo=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Update.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":update",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "update",
                           xmlWriter);
                   }

               
                   }
                if (localVoTracker){
                                    if (localVo==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"vo", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"vo");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("vo");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localVo.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","vo"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localVoTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "vo"));
                            
                            
                                    elementList.add(localVo==null?null:
                                    localVo);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Update parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Update object =
                new Update();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"update".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Update)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","vo").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setVo(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setVo(DocumentWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class NonElectronWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = NonElectronWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ApDty
                        */

                        
                                    protected java.lang.String localApDty ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApDtyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApDty(){
                               return localApDty;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApDty
                               */
                               public void setApDty(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApDtyTracker = true;
                                       } else {
                                          localApDtyTracker = true;
                                              
                                       }
                                   
                                            this.localApDty=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for EnfTarget
                        */

                        
                                    protected java.lang.String localEnfTarget ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnfTargetTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnfTarget(){
                               return localEnfTarget;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnfTarget
                               */
                               public void setEnfTarget(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnfTargetTracker = true;
                                       } else {
                                          localEnfTargetTracker = true;
                                              
                                       }
                                   
                                            this.localEnfTarget=param;
                                    

                               }
                            

                        /**
                        * field for EnforceDate
                        */

                        
                                    protected java.lang.String localEnforceDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnforceDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEnforceDate(){
                               return localEnforceDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnforceDate
                               */
                               public void setEnforceDate(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnforceDateTracker = true;
                                       } else {
                                          localEnforceDateTracker = true;
                                              
                                       }
                                   
                                            this.localEnforceDate=param;
                                    

                               }
                            

                        /**
                        * field for NoSerialYn
                        */

                        
                                    protected boolean localNoSerialYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNoSerialYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getNoSerialYn(){
                               return localNoSerialYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NoSerialYn
                               */
                               public void setNoSerialYn(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localNoSerialYnTracker = false;
                                              
                                       } else {
                                          localNoSerialYnTracker = true;
                                       }
                                   
                                            this.localNoSerialYn=param;
                                    

                               }
                            

                        /**
                        * field for PageCount
                        */

                        
                                    protected java.lang.String localPageCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageCountTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPageCount(){
                               return localPageCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageCount
                               */
                               public void setPageCount(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPageCountTracker = true;
                                       } else {
                                          localPageCountTracker = true;
                                              
                                       }
                                   
                                            this.localPageCount=param;
                                    

                               }
                            

                        /**
                        * field for RecSummary
                        */

                        
                                    protected java.lang.String localRecSummary ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecSummaryTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecSummary(){
                               return localRecSummary;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecSummary
                               */
                               public void setRecSummary(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecSummaryTracker = true;
                                       } else {
                                          localRecSummaryTracker = true;
                                              
                                       }
                                   
                                            this.localRecSummary=param;
                                    

                               }
                            

                        /**
                        * field for RecType
                        */

                        
                                    protected java.lang.String localRecType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecType(){
                               return localRecType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecType
                               */
                               public void setRecType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRecTypeTracker = true;
                                       } else {
                                          localRecTypeTracker = true;
                                              
                                       }
                                   
                                            this.localRecType=param;
                                    

                               }
                            

                        /**
                        * field for Receivers
                        */

                        
                                    protected java.lang.String localReceivers ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiversTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReceivers(){
                               return localReceivers;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Receivers
                               */
                               public void setReceivers(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReceiversTracker = true;
                                       } else {
                                          localReceiversTracker = true;
                                              
                                       }
                                   
                                            this.localReceivers=param;
                                    

                               }
                            

                        /**
                        * field for SpecialRec
                        */

                        
                                    protected java.lang.String localSpecialRec ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSpecialRecTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSpecialRec(){
                               return localSpecialRec;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SpecialRec
                               */
                               public void setSpecialRec(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSpecialRecTracker = true;
                                       } else {
                                          localSpecialRecTracker = true;
                                              
                                       }
                                   
                                            this.localSpecialRec=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       NonElectronWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":NonElectronWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "NonElectronWS",
                           xmlWriter);
                   }

               
                   }
                if (localApDtyTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"apDty", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"apDty");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("apDty");
                                    }
                                

                                          if (localApDty==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApDty);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnfTargetTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enfTarget", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enfTarget");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enfTarget");
                                    }
                                

                                          if (localEnfTarget==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnfTarget);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnforceDateTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"enforceDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"enforceDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("enforceDate");
                                    }
                                

                                          if (localEnforceDate==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEnforceDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNoSerialYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"noSerialYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"noSerialYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("noSerialYn");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("noSerialYn cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoSerialYn));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageCountTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"pageCount", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"pageCount");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("pageCount");
                                    }
                                

                                          if (localPageCount==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPageCount);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecSummaryTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recSummary", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recSummary");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recSummary");
                                    }
                                

                                          if (localRecSummary==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecSummary);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"recType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"recType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("recType");
                                    }
                                

                                          if (localRecType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiversTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receivers", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receivers");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receivers");
                                    }
                                

                                          if (localReceivers==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReceivers);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSpecialRecTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"specialRec", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"specialRec");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("specialRec");
                                    }
                                

                                          if (localSpecialRec==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSpecialRec);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localApDtyTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "apDty"));
                                 
                                         elementList.add(localApDty==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApDty));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localEnfTargetTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enfTarget"));
                                 
                                         elementList.add(localEnfTarget==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnfTarget));
                                    } if (localEnforceDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "enforceDate"));
                                 
                                         elementList.add(localEnforceDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnforceDate));
                                    } if (localNoSerialYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "noSerialYn"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoSerialYn));
                            } if (localPageCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "pageCount"));
                                 
                                         elementList.add(localPageCount==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageCount));
                                    } if (localRecSummaryTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recSummary"));
                                 
                                         elementList.add(localRecSummary==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecSummary));
                                    } if (localRecTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "recType"));
                                 
                                         elementList.add(localRecType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecType));
                                    } if (localReceiversTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receivers"));
                                 
                                         elementList.add(localReceivers==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceivers));
                                    } if (localSpecialRecTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "specialRec"));
                                 
                                         elementList.add(localSpecialRec==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSpecialRec));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static NonElectronWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            NonElectronWS object =
                new NonElectronWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"NonElectronWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (NonElectronWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","apDty").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApDty(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enfTarget").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnfTarget(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","enforceDate").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnforceDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","noSerialYn").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNoSerialYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","pageCount").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recSummary").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecSummary(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","recType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receivers").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceivers(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","specialRec").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSpecialRec(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class SendInfoWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = SendInfoWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Address
                        */

                        
                                    protected java.lang.String localAddress ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAddressTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAddress(){
                               return localAddress;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Address
                               */
                               public void setAddress(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAddressTracker = true;
                                       } else {
                                          localAddressTracker = true;
                                              
                                       }
                                   
                                            this.localAddress=param;
                                    

                               }
                            

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DisplayNameYn
                        */

                        
                                    protected java.lang.String localDisplayNameYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDisplayNameYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDisplayNameYn(){
                               return localDisplayNameYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DisplayNameYn
                               */
                               public void setDisplayNameYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDisplayNameYnTracker = true;
                                       } else {
                                          localDisplayNameYnTracker = true;
                                              
                                       }
                                   
                                            this.localDisplayNameYn=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for DocType
                        */

                        
                                    protected java.lang.String localDocType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocType(){
                               return localDocType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocType
                               */
                               public void setDocType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocTypeTracker = true;
                                       } else {
                                          localDocTypeTracker = true;
                                              
                                       }
                                   
                                            this.localDocType=param;
                                    

                               }
                            

                        /**
                        * field for Email
                        */

                        
                                    protected java.lang.String localEmail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEmailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEmail(){
                               return localEmail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Email
                               */
                               public void setEmail(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEmailTracker = true;
                                       } else {
                                          localEmailTracker = true;
                                              
                                       }
                                   
                                            this.localEmail=param;
                                    

                               }
                            

                        /**
                        * field for Fax
                        */

                        
                                    protected java.lang.String localFax ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFaxTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFax(){
                               return localFax;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Fax
                               */
                               public void setFax(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFaxTracker = true;
                                       } else {
                                          localFaxTracker = true;
                                              
                                       }
                                   
                                            this.localFax=param;
                                    

                               }
                            

                        /**
                        * field for FooterCamp
                        */

                        
                                    protected java.lang.String localFooterCamp ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFooterCampTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFooterCamp(){
                               return localFooterCamp;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FooterCamp
                               */
                               public void setFooterCamp(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFooterCampTracker = true;
                                       } else {
                                          localFooterCampTracker = true;
                                              
                                       }
                                   
                                            this.localFooterCamp=param;
                                    

                               }
                            

                        /**
                        * field for HeaderCamp
                        */

                        
                                    protected java.lang.String localHeaderCamp ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHeaderCampTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHeaderCamp(){
                               return localHeaderCamp;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HeaderCamp
                               */
                               public void setHeaderCamp(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHeaderCampTracker = true;
                                       } else {
                                          localHeaderCampTracker = true;
                                              
                                       }
                                   
                                            this.localHeaderCamp=param;
                                    

                               }
                            

                        /**
                        * field for Homepage
                        */

                        
                                    protected java.lang.String localHomepage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHomepageTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHomepage(){
                               return localHomepage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Homepage
                               */
                               public void setHomepage(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHomepageTracker = true;
                                       } else {
                                          localHomepageTracker = true;
                                              
                                       }
                                   
                                            this.localHomepage=param;
                                    

                               }
                            

                        /**
                        * field for PostNumber
                        */

                        
                                    protected java.lang.String localPostNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPostNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPostNumber(){
                               return localPostNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PostNumber
                               */
                               public void setPostNumber(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPostNumberTracker = true;
                                       } else {
                                          localPostNumberTracker = true;
                                              
                                       }
                                   
                                            this.localPostNumber=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for Receivers
                        */

                        
                                    protected java.lang.String localReceivers ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReceiversTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReceivers(){
                               return localReceivers;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Receivers
                               */
                               public void setReceivers(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReceiversTracker = true;
                                       } else {
                                          localReceiversTracker = true;
                                              
                                       }
                                   
                                            this.localReceivers=param;
                                    

                               }
                            

                        /**
                        * field for SealType
                        */

                        
                                    protected java.lang.String localSealType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSealTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSealType(){
                               return localSealType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SealType
                               */
                               public void setSealType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSealTypeTracker = true;
                                       } else {
                                          localSealTypeTracker = true;
                                              
                                       }
                                   
                                            this.localSealType=param;
                                    

                               }
                            

                        /**
                        * field for SendOrgName
                        */

                        
                                    protected java.lang.String localSendOrgName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendOrgNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSendOrgName(){
                               return localSendOrgName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendOrgName
                               */
                               public void setSendOrgName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendOrgNameTracker = true;
                                       } else {
                                          localSendOrgNameTracker = true;
                                              
                                       }
                                   
                                            this.localSendOrgName=param;
                                    

                               }
                            

                        /**
                        * field for SenderTitle
                        */

                        
                                    protected java.lang.String localSenderTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSenderTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSenderTitle(){
                               return localSenderTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SenderTitle
                               */
                               public void setSenderTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSenderTitleTracker = true;
                                       } else {
                                          localSenderTitleTracker = true;
                                              
                                       }
                                   
                                            this.localSenderTitle=param;
                                    

                               }
                            

                        /**
                        * field for Telephone
                        */

                        
                                    protected java.lang.String localTelephone ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTelephoneTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTelephone(){
                               return localTelephone;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Telephone
                               */
                               public void setTelephone(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTelephoneTracker = true;
                                       } else {
                                          localTelephoneTracker = true;
                                              
                                       }
                                   
                                            this.localTelephone=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

                        /**
                        * field for Via
                        */

                        
                                    protected java.lang.String localVia ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localViaTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getVia(){
                               return localVia;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Via
                               */
                               public void setVia(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localViaTracker = true;
                                       } else {
                                          localViaTracker = true;
                                              
                                       }
                                   
                                            this.localVia=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       SendInfoWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SendInfoWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SendInfoWS",
                           xmlWriter);
                   }

               
                   }
                if (localAddressTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"address", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"address");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("address");
                                    }
                                

                                          if (localAddress==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAddress);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDisplayNameYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"displayNameYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"displayNameYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("displayNameYn");
                                    }
                                

                                          if (localDisplayNameYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDisplayNameYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docType");
                                    }
                                

                                          if (localDocType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEmailTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"email", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"email");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("email");
                                    }
                                

                                          if (localEmail==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEmail);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFaxTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"fax", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"fax");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("fax");
                                    }
                                

                                          if (localFax==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFax);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFooterCampTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"footerCamp", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"footerCamp");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("footerCamp");
                                    }
                                

                                          if (localFooterCamp==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFooterCamp);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localHeaderCampTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"headerCamp", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"headerCamp");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("headerCamp");
                                    }
                                

                                          if (localHeaderCamp==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHeaderCamp);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localHomepageTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"homepage", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"homepage");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("homepage");
                                    }
                                

                                          if (localHomepage==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHomepage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPostNumberTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"postNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"postNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("postNumber");
                                    }
                                

                                          if (localPostNumber==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPostNumber);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReceiversTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"receivers", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"receivers");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("receivers");
                                    }
                                

                                          if (localReceivers==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReceivers);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSealTypeTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sealType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sealType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sealType");
                                    }
                                

                                          if (localSealType==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSealType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendOrgNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"sendOrgName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"sendOrgName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("sendOrgName");
                                    }
                                

                                          if (localSendOrgName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSendOrgName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSenderTitleTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"senderTitle", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"senderTitle");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("senderTitle");
                                    }
                                

                                          if (localSenderTitle==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSenderTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTelephoneTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"telephone", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"telephone");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("telephone");
                                    }
                                

                                          if (localTelephone==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTelephone);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localViaTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"via", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"via");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("via");
                                    }
                                

                                          if (localVia==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localVia);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localAddressTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "address"));
                                 
                                         elementList.add(localAddress==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
                                    } if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDisplayNameYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "displayNameYn"));
                                 
                                         elementList.add(localDisplayNameYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisplayNameYn));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localDocTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docType"));
                                 
                                         elementList.add(localDocType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocType));
                                    } if (localEmailTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "email"));
                                 
                                         elementList.add(localEmail==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEmail));
                                    } if (localFaxTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "fax"));
                                 
                                         elementList.add(localFax==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFax));
                                    } if (localFooterCampTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "footerCamp"));
                                 
                                         elementList.add(localFooterCamp==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFooterCamp));
                                    } if (localHeaderCampTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "headerCamp"));
                                 
                                         elementList.add(localHeaderCamp==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHeaderCamp));
                                    } if (localHomepageTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "homepage"));
                                 
                                         elementList.add(localHomepage==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHomepage));
                                    } if (localPostNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "postNumber"));
                                 
                                         elementList.add(localPostNumber==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPostNumber));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localReceiversTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "receivers"));
                                 
                                         elementList.add(localReceivers==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceivers));
                                    } if (localSealTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sealType"));
                                 
                                         elementList.add(localSealType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSealType));
                                    } if (localSendOrgNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "sendOrgName"));
                                 
                                         elementList.add(localSendOrgName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendOrgName));
                                    } if (localSenderTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "senderTitle"));
                                 
                                         elementList.add(localSenderTitle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderTitle));
                                    } if (localTelephoneTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "telephone"));
                                 
                                         elementList.add(localTelephone==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTelephone));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    } if (localViaTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "via"));
                                 
                                         elementList.add(localVia==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVia));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SendInfoWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SendInfoWS object =
                new SendInfoWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SendInfoWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SendInfoWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","address").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAddress(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","displayNameYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDisplayNameYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","email").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEmail(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","fax").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFax(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","footerCamp").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFooterCamp(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","headerCamp").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHeaderCamp(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","homepage").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHomepage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","postNumber").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPostNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","receivers").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReceivers(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sealType").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSealType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","sendOrgName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendOrgName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","senderTitle").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSenderTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","telephone").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTelephone(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","via").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setVia(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Exception
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = Exception
                Namespace URI = http://service.ws.dms.ion.net
                Namespace Prefix = ns4
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for Exception
                        */

                        
                                    protected java.lang.Object localException ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.Object
                           */
                           public  java.lang.Object getException(){
                               return localException;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exception
                               */
                               public void setException(java.lang.Object param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExceptionTracker = true;
                                       } else {
                                          localExceptionTracker = true;
                                              
                                       }
                                   
                                            this.localException=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Exception.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":Exception",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "Exception",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionTracker){
                            
                            if (localException!=null){
                                if (localException instanceof org.apache.axis2.databinding.ADBBean){
                                    ((org.apache.axis2.databinding.ADBBean)localException).serialize(
                                               new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),
                                               factory,xmlWriter,true);
                                 } else {
                                    java.lang.String namespace2 = "http://service.ws.dms.ion.net";
                                    if (! namespace2.equals("")) {
                                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                        if (prefix2 == null) {
                                            prefix2 = generatePrefix(namespace2);

                                            xmlWriter.writeStartElement(prefix2,"Exception", namespace2);
                                            xmlWriter.writeNamespace(prefix2, namespace2);
                                            xmlWriter.setPrefix(prefix2, namespace2);

                                        } else {
                                            xmlWriter.writeStartElement(namespace2,"Exception");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Exception");
                                    }
                                    org.apache.axis2.databinding.utils.ConverterUtil.serializeAnyType(localException, xmlWriter);
                                    xmlWriter.writeEndElement();
                                 }
                            } else {
                                
                                        // write null attribute
                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";
                                            if (! namespace2.equals("")) {
                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                if (prefix2 == null) {
                                                    prefix2 = generatePrefix(namespace2);

                                                    xmlWriter.writeStartElement(prefix2,"Exception", namespace2);
                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                } else {
                                                    xmlWriter.writeStartElement(namespace2,"Exception");
                                                }

                                            } else {
                                                xmlWriter.writeStartElement("Exception");
                                            }

                                           // write the nil attribute
                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                           xmlWriter.writeEndElement();
                                    
                            }


                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "Exception"));
                            
                            
                                    elementList.add(localException==null?null:
                                    localException);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Exception parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Exception object =
                new Exception();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"Exception".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Exception)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception").equals(reader.getName())){
                                
                                     object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,
                                                ExtensionMapper.class));
                                       
                                         reader.next();
                                     
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class ExceptionE
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "Exception",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for Exception
						 */

                        
                                    protected Exception localException ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return Exception
                           */
                           public  Exception getException(){
                               return localException;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exception
                               */
                               public void setException(Exception param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExceptionTracker = true;
                                       } else {
                                          localExceptionTracker = true;
                                              
                                       }
                                   
                                            this.localException=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ExceptionE.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":Exception",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "Exception",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionTracker){
                                    if (localException==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"Exception", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"Exception");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("Exception");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localException.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "Exception"));
                            
                            
                                    elementList.add(localException==null?null:
                                    localException);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ExceptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ExceptionE object =
                new ExceptionE();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                   if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                         // Skip the element and report the null value.  It cannot have subelements.
                         while (!reader.isEndElement())
                             reader.next();
                         
                                 return null;
                             

                   }
                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"Exception".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ExceptionE)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","Exception").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setException(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setException(Exception.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class RetrieveResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "retrieveResponse",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for _return
						 */

                        
                                    protected ResponseBean local_return ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean local_returnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ResponseBean
                           */
                           public  ResponseBean get_return(){
                               return local_return;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param _return
                               */
                               public void set_return(ResponseBean param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          local_returnTracker = true;
                                       } else {
                                          local_returnTracker = true;
                                              
                                       }
                                   
                                            this.local_return=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       RetrieveResponse.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":retrieveResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "retrieveResponse",
                           xmlWriter);
                   }

               
                   }
                if (local_returnTracker){
                                    if (local_return==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"return", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"return");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("return");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     local_return.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (local_returnTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "return"));
                            
                            
                                    elementList.add(local_return==null?null:
                                    local_return);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static RetrieveResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            RetrieveResponse object =
                new RetrieveResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"retrieveResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (RetrieveResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.set_return(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.set_return(ResponseBean.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ExtensionMapper{

          public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                       java.lang.String typeName,
                                                       javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "EnfDocWS".equals(typeName)){
                   
                            return  EnfDocWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "AppRecvWS".equals(typeName)){
                   
                            return  AppRecvWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "BindWS".equals(typeName)){
                   
                            return  BindWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "DocumentWS".equals(typeName)){
                   
                            return  DocumentWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "AppOptionWS".equals(typeName)){
                   
                            return  AppOptionWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "FileWS".equals(typeName)){
                   
                            return  FileWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "NonElectronWS".equals(typeName)){
                   
                            return  NonElectronWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "PubReaderWS".equals(typeName)){
                   
                            return  PubReaderWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "SendInfoWS".equals(typeName)){
                   
                            return  SendInfoWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "RelatedDocWS".equals(typeName)){
                   
                            return  RelatedDocWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://service.ws.dms.ion.net".equals(namespaceURI) &&
                  "Exception".equals(typeName)){
                   
                            return  Exception.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "EnfLineWS".equals(typeName)){
                   
                            return  EnfLineWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://io.java/xsd".equals(namespaceURI) &&
                  "InputStream".equals(typeName)){
                   
                            return  InputStream.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://bean.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "ResponseBean".equals(typeName)){
                   
                            return  ResponseBean.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "RelatedRuleWS".equals(typeName)){
                   
                            return  RelatedRuleWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "EnfRecvWS".equals(typeName)){
                   
                            return  EnfRecvWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "CustomerWS".equals(typeName)){
                   
                            return  CustomerWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "AppLineWS".equals(typeName)){
                   
                            return  AppLineWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "OwnDeptWS".equals(typeName)){
                   
                            return  OwnDeptWS.Factory.parse(reader);
                        

                  }

              
                  if (
                  "http://kdb.ws.dms.ion.net/xsd".equals(namespaceURI) &&
                  "AppDocWS".equals(typeName)){
                   
                            return  AppDocWS.Factory.parse(reader);
                        

                  }

              
             throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
          }

        }
    
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class Move
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "move",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for Before
						 */

                        
                                    protected BindWS localBefore ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBeforeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return BindWS
                           */
                           public  BindWS getBefore(){
                               return localBefore;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Before
                               */
                               public void setBefore(BindWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBeforeTracker = true;
                                       } else {
                                          localBeforeTracker = true;
                                              
                                       }
                                   
                                            this.localBefore=param;
                                    

                               }
                            

                        /**
						 * field for After
						 */

                        
                                    protected BindWS localAfter ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAfterTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return BindWS
                           */
                           public  BindWS getAfter(){
                               return localAfter;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param After
                               */
                               public void setAfter(BindWS param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAfterTracker = true;
                                       } else {
                                          localAfterTracker = true;
                                              
                                       }
                                   
                                            this.localAfter=param;
                                    

                               }
                            

                        /**
                        * field for DocIds
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localDocIds ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getDocIds(){
                               return localDocIds;
                           }

                           
                        


                               
                              /**
                               * validate the array for DocIds
                               */
                              protected void validateDocIds(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DocIds
                              */
                              public void setDocIds(java.lang.String[] param){
                              
                                   validateDocIds(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localDocIdsTracker = true;
                                          } else {
                                             localDocIdsTracker = true;
                                                 
                                          }
                                      
                                      this.localDocIds=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addDocIds(java.lang.String param){
                                   if (localDocIds == null){
                                   localDocIds = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localDocIdsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDocIds);
                               list.add(param);
                               this.localDocIds =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Move.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":move",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "move",
                           xmlWriter);
                   }

               
                   }
                if (localBeforeTracker){
                                    if (localBefore==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"before", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"before");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("before");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localBefore.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","before"),
                                        factory,xmlWriter);
                                    }
                                } if (localAfterTracker){
                                    if (localAfter==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"after", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"after");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("after");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAfter.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","after"),
                                        factory,xmlWriter);
                                    }
                                } if (localDocIdsTracker){
                             if (localDocIds!=null) {
                                   namespace = "http://service.ws.dms.ion.net";
                                   boolean emptyNamespace = namespace == null || namespace.length() == 0;
                                   prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
                                   for (int i = 0;i < localDocIds.length;i++){
                                        
                                            if (localDocIds[i] != null){
                                        
                                                if (!emptyNamespace) {
                                                    if (prefix == null) {
                                                        java.lang.String prefix2 = generatePrefix(namespace);

                                                        xmlWriter.writeStartElement(prefix2,"docIds", namespace);
                                                        xmlWriter.writeNamespace(prefix2, namespace);
                                                        xmlWriter.setPrefix(prefix2, namespace);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace,"docIds");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("docIds");
                                                }

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocIds[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // write null attribute
                                                            namespace = "http://service.ws.dms.ion.net";
                                                            if (! namespace.equals("")) {
                                                                prefix = xmlWriter.getPrefix(namespace);

                                                                if (prefix == null) {
                                                                    prefix = generatePrefix(namespace);

                                                                    xmlWriter.writeStartElement(prefix,"docIds", namespace);
                                                                    xmlWriter.writeNamespace(prefix, namespace);
                                                                    xmlWriter.setPrefix(prefix, namespace);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace,"docIds");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("docIds");
                                                            }
                                                            writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                            xmlWriter.writeEndElement();
                                                       
                                                }

                                   }
                             } else {
                                 
                                         // write the null attribute
                                        // write null attribute
                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";
                                            if (! namespace2.equals("")) {
                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                if (prefix2 == null) {
                                                    prefix2 = generatePrefix(namespace2);

                                                    xmlWriter.writeStartElement(prefix2,"docIds", namespace2);
                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                } else {
                                                    xmlWriter.writeStartElement(namespace2,"docIds");
                                                }

                                            } else {
                                                xmlWriter.writeStartElement("docIds");
                                            }

                                           // write the nil attribute
                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                           xmlWriter.writeEndElement();
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localBeforeTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "before"));
                            
                            
                                    elementList.add(localBefore==null?null:
                                    localBefore);
                                } if (localAfterTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "after"));
                            
                            
                                    elementList.add(localAfter==null?null:
                                    localAfter);
                                } if (localDocIdsTracker){
                            if (localDocIds!=null){
                                  for (int i = 0;i < localDocIds.length;i++){
                                      
                                         if (localDocIds[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                              "docIds"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocIds[i]));
                                          } else {
                                             
                                                    elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                              "docIds"));
                                                    elementList.add(null);
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                              "docIds"));
                                    elementList.add(null);
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Move parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Move object =
                new Move();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"move".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Move)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                        java.util.ArrayList list3 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","before").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setBefore(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setBefore(BindWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","after").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAfter(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAfter(BindWS.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","docIds").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                  list3.add(null);
                                                       
                                                  reader.next();
                                              } else {
                                            list3.add(reader.getElementText());
                                            }
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone3 = false;
                                            while(!loopDone3){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone3 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("http://service.ws.dms.ion.net","docIds").equals(reader.getName())){
                                                         
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list3.add(null);
                                                                   
                                                              reader.next();
                                                          } else {
                                                        list3.add(reader.getElementText());
                                                        }
                                                    }else{
                                                        loopDone3 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setDocIds((java.lang.String[])
                                                        list3.toArray(new java.lang.String[list3.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class CustomerWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CustomerWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for CustomerId
                        */

                        
                                    protected java.lang.String localCustomerId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCustomerIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCustomerId(){
                               return localCustomerId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CustomerId
                               */
                               public void setCustomerId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCustomerIdTracker = true;
                                       } else {
                                          localCustomerIdTracker = true;
                                              
                                       }
                                   
                                            this.localCustomerId=param;
                                    

                               }
                            

                        /**
                        * field for CustomerName
                        */

                        
                                    protected java.lang.String localCustomerName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCustomerNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCustomerName(){
                               return localCustomerName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CustomerName
                               */
                               public void setCustomerName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCustomerNameTracker = true;
                                       } else {
                                          localCustomerNameTracker = true;
                                              
                                       }
                                   
                                            this.localCustomerName=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for ProcessorId
                        */

                        
                                    protected java.lang.String localProcessorId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localProcessorIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getProcessorId(){
                               return localProcessorId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ProcessorId
                               */
                               public void setProcessorId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localProcessorIdTracker = true;
                                       } else {
                                          localProcessorIdTracker = true;
                                              
                                       }
                                   
                                            this.localProcessorId=param;
                                    

                               }
                            

                        /**
                        * field for TempYn
                        */

                        
                                    protected java.lang.String localTempYn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempYnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTempYn(){
                               return localTempYn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempYn
                               */
                               public void setTempYn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempYnTracker = true;
                                       } else {
                                          localTempYnTracker = true;
                                              
                                       }
                                   
                                            this.localTempYn=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       CustomerWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":CustomerWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "CustomerWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCustomerIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"customerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"customerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("customerId");
                                    }
                                

                                          if (localCustomerId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCustomerId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCustomerNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"customerName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"customerName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("customerName");
                                    }
                                

                                          if (localCustomerName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCustomerName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localProcessorIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"processorId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"processorId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("processorId");
                                    }
                                

                                          if (localProcessorId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localProcessorId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempYnTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"tempYn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"tempYn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("tempYn");
                                    }
                                

                                          if (localTempYn==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTempYn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localCustomerIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "customerId"));
                                 
                                         elementList.add(localCustomerId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCustomerId));
                                    } if (localCustomerNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "customerName"));
                                 
                                         elementList.add(localCustomerName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCustomerName));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localProcessorIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "processorId"));
                                 
                                         elementList.add(localProcessorId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessorId));
                                    } if (localTempYnTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "tempYn"));
                                 
                                         elementList.add(localTempYn==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempYn));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static CustomerWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            CustomerWS object =
                new CustomerWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"CustomerWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CustomerWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","customerId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCustomerId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","customerName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCustomerName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","processorId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setProcessorId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","tempYn").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempYn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        /**
		 * Class Name  : DocumentServiceStub.java <br> Description : 설명  <br> Modification Information <br> <br> 수 정  일 : 2012. 5. 23. <br> 수 정  자 : kimside  <br> 수정내용 :  <br>
		 * @author   kimside 
		 * @since  2012. 5. 23.
		 * @version  1.0 
		 * @see com.sds.acube.app.ws.client.document.DocumentServiceStub.java
		 */
        public static class RemoveResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "removeResponse",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
						 * field for _return
						 */

                        
                                    protected ResponseBean local_return ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean local_returnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ResponseBean
                           */
                           public  ResponseBean get_return(){
                               return local_return;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param _return
                               */
                               public void set_return(ResponseBean param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          local_returnTracker = true;
                                       } else {
                                          local_returnTracker = true;
                                              
                                       }
                                   
                                            this.local_return=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       RemoveResponse.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":removeResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "removeResponse",
                           xmlWriter);
                   }

               
                   }
                if (local_returnTracker){
                                    if (local_return==null){

                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";

                                        if (! namespace2.equals("")) {
                                            java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                            if (prefix2 == null) {
                                                prefix2 = generatePrefix(namespace2);

                                                xmlWriter.writeStartElement(prefix2,"return", namespace2);
                                                xmlWriter.writeNamespace(prefix2, namespace2);
                                                xmlWriter.setPrefix(prefix2, namespace2);

                                            } else {
                                                xmlWriter.writeStartElement(namespace2,"return");
                                            }

                                        } else {
                                            xmlWriter.writeStartElement("return");
                                        }


                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     local_return.serialize(new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return"),
                                        factory,xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (local_returnTracker){
                            elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "return"));
                            
                            
                                    elementList.add(local_return==null?null:
                                    local_return);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static RemoveResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            RemoveResponse object =
                new RemoveResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"removeResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (RemoveResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","return").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.set_return(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.set_return(ResponseBean.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class OwnDeptWS
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OwnDeptWS
                Namespace URI = http://kdb.ws.dms.ion.net/xsd
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://kdb.ws.dms.ion.net/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DocId
                        */

                        
                                    protected java.lang.String localDocId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDocId(){
                               return localDocId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DocId
                               */
                               public void setDocId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDocIdTracker = true;
                                       } else {
                                          localDocIdTracker = true;
                                              
                                       }
                                   
                                            this.localDocId=param;
                                    

                               }
                            

                        /**
                        * field for OwnDeptId
                        */

                        
                                    protected java.lang.String localOwnDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwnDeptId(){
                               return localOwnDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OwnDeptId
                               */
                               public void setOwnDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOwnDeptIdTracker = true;
                                       } else {
                                          localOwnDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localOwnDeptId=param;
                                    

                               }
                            

                        /**
                        * field for OwnDeptName
                        */

                        
                                    protected java.lang.String localOwnDeptName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnDeptNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwnDeptName(){
                               return localOwnDeptName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OwnDeptName
                               */
                               public void setOwnDeptName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localOwnDeptNameTracker = true;
                                       } else {
                                          localOwnDeptNameTracker = true;
                                              
                                       }
                                   
                                            this.localOwnDeptName=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       OwnDeptWS.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://kdb.ws.dms.ion.net/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":OwnDeptWS",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "OwnDeptWS",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"docId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"docId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("docId");
                                    }
                                

                                          if (localDocId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDocId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnDeptIdTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ownDeptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ownDeptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ownDeptId");
                                    }
                                

                                          if (localOwnDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwnDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnDeptNameTracker){
                                    namespace = "http://kdb.ws.dms.ion.net/xsd";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ownDeptName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ownDeptName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ownDeptName");
                                    }
                                

                                          if (localOwnDeptName==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwnDeptName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDocIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "docId"));
                                 
                                         elementList.add(localDocId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocId));
                                    } if (localOwnDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "ownDeptId"));
                                 
                                         elementList.add(localOwnDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwnDeptId));
                                    } if (localOwnDeptNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd",
                                                                      "ownDeptName"));
                                 
                                         elementList.add(localOwnDeptName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwnDeptName));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static OwnDeptWS parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            OwnDeptWS object =
                new OwnDeptWS();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"OwnDeptWS".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OwnDeptWS)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","docId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDocId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwnDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://kdb.ws.dms.ion.net/xsd","ownDeptName").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwnDeptName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class Remove
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://service.ws.dms.ion.net",
                "remove",
                "ns4");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("http://service.ws.dms.ion.net")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for CompId
                        */

                        
                                    protected java.lang.String localCompId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompId(){
                               return localCompId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompId
                               */
                               public void setCompId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompIdTracker = true;
                                       } else {
                                          localCompIdTracker = true;
                                              
                                       }
                                   
                                            this.localCompId=param;
                                    

                               }
                            

                        /**
                        * field for DeptId
                        */

                        
                                    protected java.lang.String localDeptId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeptIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDeptId(){
                               return localDeptId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DeptId
                               */
                               public void setDeptId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDeptIdTracker = true;
                                       } else {
                                          localDeptIdTracker = true;
                                              
                                       }
                                   
                                            this.localDeptId=param;
                                    

                               }
                            

                        /**
                        * field for DocIds
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localDocIds ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDocIdsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getDocIds(){
                               return localDocIds;
                           }

                           
                        


                               
                              /**
                               * validate the array for DocIds
                               */
                              protected void validateDocIds(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DocIds
                              */
                              public void setDocIds(java.lang.String[] param){
                              
                                   validateDocIds(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localDocIdsTracker = true;
                                          } else {
                                             localDocIdsTracker = true;
                                                 
                                          }
                                      
                                      this.localDocIds=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addDocIds(java.lang.String param){
                                   if (localDocIds == null){
                                   localDocIds = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localDocIdsTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDocIds);
                               list.add(param);
                               this.localDocIds =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       Remove.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://service.ws.dms.ion.net");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":remove",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "remove",
                           xmlWriter);
                   }

               
                   }
                if (localCompIdTracker){
                                    namespace = "http://service.ws.dms.ion.net";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"compId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"compId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("compId");
                                    }
                                

                                          if (localCompId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeptIdTracker){
                                    namespace = "http://service.ws.dms.ion.net";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"deptId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"deptId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("deptId");
                                    }
                                

                                          if (localDeptId==null){
                                              // write the nil attribute
                                              
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDeptId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDocIdsTracker){
                             if (localDocIds!=null) {
                                   namespace = "http://service.ws.dms.ion.net";
                                   boolean emptyNamespace = namespace == null || namespace.length() == 0;
                                   prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
                                   for (int i = 0;i < localDocIds.length;i++){
                                        
                                            if (localDocIds[i] != null){
                                        
                                                if (!emptyNamespace) {
                                                    if (prefix == null) {
                                                        java.lang.String prefix2 = generatePrefix(namespace);

                                                        xmlWriter.writeStartElement(prefix2,"docIds", namespace);
                                                        xmlWriter.writeNamespace(prefix2, namespace);
                                                        xmlWriter.setPrefix(prefix2, namespace);

                                                    } else {
                                                        xmlWriter.writeStartElement(namespace,"docIds");
                                                    }

                                                } else {
                                                    xmlWriter.writeStartElement("docIds");
                                                }

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocIds[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // write null attribute
                                                            namespace = "http://service.ws.dms.ion.net";
                                                            if (! namespace.equals("")) {
                                                                prefix = xmlWriter.getPrefix(namespace);

                                                                if (prefix == null) {
                                                                    prefix = generatePrefix(namespace);

                                                                    xmlWriter.writeStartElement(prefix,"docIds", namespace);
                                                                    xmlWriter.writeNamespace(prefix, namespace);
                                                                    xmlWriter.setPrefix(prefix, namespace);

                                                                } else {
                                                                    xmlWriter.writeStartElement(namespace,"docIds");
                                                                }

                                                            } else {
                                                                xmlWriter.writeStartElement("docIds");
                                                            }
                                                            writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                            xmlWriter.writeEndElement();
                                                       
                                                }

                                   }
                             } else {
                                 
                                         // write the null attribute
                                        // write null attribute
                                            java.lang.String namespace2 = "http://service.ws.dms.ion.net";
                                            if (! namespace2.equals("")) {
                                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                                                if (prefix2 == null) {
                                                    prefix2 = generatePrefix(namespace2);

                                                    xmlWriter.writeStartElement(prefix2,"docIds", namespace2);
                                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                                    xmlWriter.setPrefix(prefix2, namespace2);

                                                } else {
                                                    xmlWriter.writeStartElement(namespace2,"docIds");
                                                }

                                            } else {
                                                xmlWriter.writeStartElement("docIds");
                                            }

                                           // write the nil attribute
                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                           xmlWriter.writeEndElement();
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCompIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "compId"));
                                 
                                         elementList.add(localCompId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompId));
                                    } if (localDeptIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                      "deptId"));
                                 
                                         elementList.add(localDeptId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptId));
                                    } if (localDocIdsTracker){
                            if (localDocIds!=null){
                                  for (int i = 0;i < localDocIds.length;i++){
                                      
                                         if (localDocIds[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                              "docIds"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDocIds[i]));
                                          } else {
                                             
                                                    elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                              "docIds"));
                                                    elementList.add(null);
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    elementList.add(new javax.xml.namespace.QName("http://service.ws.dms.ion.net",
                                                                              "docIds"));
                                    elementList.add(null);
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Remove parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Remove object =
                new Remove();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"remove".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Remove)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                        java.util.ArrayList list3 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","compId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","deptId").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDeptId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://service.ws.dms.ion.net","docIds").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    
                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                  list3.add(null);
                                                       
                                                  reader.next();
                                              } else {
                                            list3.add(reader.getElementText());
                                            }
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone3 = false;
                                            while(!loopDone3){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone3 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("http://service.ws.dms.ion.net","docIds").equals(reader.getName())){
                                                         
                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list3.add(null);
                                                                   
                                                              reader.next();
                                                          } else {
                                                        list3.add(reader.getElementText());
                                                        }
                                                    }else{
                                                        loopDone3 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setDocIds((java.lang.String[])
                                                        list3.toArray(new java.lang.String[list3.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.Move param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Move.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.Create param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Create.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.Update param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Update.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.sds.acube.app.ws.client.document.DocumentServiceStub.Move param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Move.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.sds.acube.app.ws.client.document.DocumentServiceStub.Create param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Create.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.sds.acube.app.ws.client.document.DocumentServiceStub.Update param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(com.sds.acube.app.ws.client.document.DocumentServiceStub.Update.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             


        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.Move.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.Move.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.MoveResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.Remove.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.RemoveResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.Create.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.Create.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.CreateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.Retrieve.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.RetrieveResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.Update.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.Update.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.UpdateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.class.equals(type)){
                
                           return com.sds.acube.app.ws.client.document.DocumentServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }



    
   }
   