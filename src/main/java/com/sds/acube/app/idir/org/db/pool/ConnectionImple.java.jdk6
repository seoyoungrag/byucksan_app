package com.sds.acube.app.idir.org.db.pool;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//JDK 1.6이상 구현 부분. (JDK 1.5로 나갈 경우 주석 처리)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * ConnectionImpl.java
 * 2005. 5. 7
 *
 * DBConnectionPool에서 얻어진 Connection을 Wrapping하는 클래스
 *
 * @author Jack
 * @version 1.0.0.0
 *
 * Copyright 2001 Samsung SDS Co., Ltd. All rights reserved.
 */
public class ConnectionImpl implements Connection {
	
	ConnectionImpl(Connection conn, String poolName) {

		this.conn = conn;
		this.poolName = poolName;
	}

	public Statement createStatement() throws SQLException {

		return conn.createStatement();
	}
	
	public PreparedStatement prepareStatement(String sql) throws SQLException {

		return conn.prepareStatement(sql);
	}
	
	public CallableStatement prepareCall(String sql) throws SQLException {

		return conn.prepareCall(sql);
	}

	public String nativeSQL(String sql) throws SQLException {
		
		return conn.nativeSQL(sql);
	}
	
	public void setAutoCommit(boolean autoCommit) throws SQLException {

		conn.setAutoCommit(autoCommit);
	}
	
	public boolean getAutoCommit() throws SQLException {
		
		return conn.getAutoCommit();
	}
	
	public void commit() throws SQLException {
		
		conn.commit();
	}
	
	public void rollback() throws SQLException {
		
		conn.rollback();
	}

	/**
	 * DBConnectionPool에서 Connection이 Pool에 반환되어지도록 Override
	 */
	public void close() throws SQLException {
		
		DBConnectionPool instance = DBConnectionPool.getInstance();
		if (instance != null) {
			// AutoCommit이 false인 경우 Connection Pool에 반환하기 전에
			// 기존 Transaction을 rollback 처리한다.
			if ((conn != null) && (conn.getAutoCommit() == false)) {
				conn.rollback();
			}

			instance.freeConnection(poolName, conn);
		} else {
			System.out.println("[ConnectionImpl.close] Fail to get instance - DBConnectionPool");
		}
	}
	
	public boolean isClosed() throws SQLException {
		
		return conn.isClosed();
	}
	
	public DatabaseMetaData getMetaData() throws SQLException {

		return conn.getMetaData();
	}
	
	public void setReadOnly(boolean readOnly) throws SQLException {
		
		conn.setReadOnly(readOnly);
	}
	
	public boolean isReadOnly() throws SQLException {

		return conn.isReadOnly();
	}
	
	public void setCatalog(String catalog) throws SQLException {

		conn.setCatalog(catalog);
	}
	
	public String getCatalog() throws SQLException {

		return conn.getCatalog();
	}
	
	public void setTransactionIsolation(int level) throws SQLException {

		conn.setTransactionIsolation(level);
	}
	
	public int getTransactionIsolation() throws SQLException {
		
		return conn.getTransactionIsolation();
	}
	
	public SQLWarning getWarnings() throws SQLException {
		
		return conn.getWarnings();
	}
	
	public void clearWarnings() throws SQLException {
		
		conn.clearWarnings();
	}
	
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		
		return conn.createStatement(resultSetType, resultSetConcurrency);
	}
	
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		
		return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}
	
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		
		return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
	}
	
	public Map getTypeMap() throws SQLException {

		return conn.getTypeMap();
	}
	
	public void setTypeMap(Map map) throws SQLException {
		
		conn.setTypeMap(map);
	}
	
	// 조직은 JDK 1.3 기준이므로 추가 메서드 Comment
	
	public void setHoldability(int holdability) throws SQLException {
		
		conn.setHoldability(holdability);
	}
	
	public int getHoldability() throws SQLException {

		return conn.getHoldability();
	}
	
	public Savepoint setSavepoint() throws SQLException {
		
		return conn.setSavepoint();
	}
	
	public Savepoint setSavepoint(String name) throws SQLException {

		return conn.setSavepoint(name);
	}
	
	public void rollback(Savepoint savepoint) throws SQLException {

		conn.rollback(savepoint);
	}
	
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {

		conn.releaseSavepoint(savepoint);
	}
	
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {

		return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
	}
	
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {

		return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}
	
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		
		return prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability); 
	}
	
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		
		return conn.prepareStatement(sql, autoGeneratedKeys);
	}
	
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		
		return conn.prepareStatement(sql, columnIndexes);
	}
	
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		
		return conn.prepareStatement(sql, columnNames);
	}
	
	private Connection conn;
	String poolName;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //JDK 1.6이상 구현 부분. (JDK 1.5로 나갈 경우 주석 처리)
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public NClob createNClob() throws SQLException {
        
        return conn.createNClob(); 
    }
    
    public Blob createBlob() throws SQLException {
        
        return conn.createBlob();
    }
    
    public Clob createClob() throws SQLException {
        
        return conn.createClob();
    }
    
    public Properties getClientInfo() throws SQLException {
        
        return conn.getClientInfo();
    }
     
    public void setClientInfo(Properties  properties) throws SQLClientInfoException {
        
        conn.setClientInfo(properties);
    }
      
    public void setClientInfo(String  name, String  value) throws SQLClientInfoException {
        
        conn.setClientInfo(name, value);
    }

    public boolean isWrapperFor(Class <? > iface) throws SQLException {
        
        return conn.isWrapperFor(iface);
    }
    
    public boolean isValid (int timeout) throws SQLException {
        
        return conn.isValid(timeout);
    }
     
    public Struct createStruct (String  typeName, Object [] attributes) throws SQLException {
        
        return conn.createStruct(typeName, attributes);
    }
    
    public <T> T unwrap (Class <T> iface) throws SQLException {
        
        return conn.unwrap(iface);
    }
    
    public Array createArrayOf (String  typeName, Object [] elements) throws SQLException {
        
        return conn.createArrayOf(typeName, elements);
    }
    
    public String getClientInfo(String  name) throws SQLException {
        
        return conn.getClientInfo(name);
    }
    
    public SQLXML createSQLXML() throws SQLException {
        
        return conn.createSQLXML();
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
}
