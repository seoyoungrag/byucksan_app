package com.sds.acube.app.common.util;import java.util.HashMap;import java.util.Properties;import java.util.Vector;import org.jconfig.Category;import org.jconfig.Configuration;import org.jconfig.ConfigurationManager;import org.jconfig.DefaultConfiguration;import org.jconfig.handler.InputStreamHandler;public class AppConfig {    static final String CONFIG_NAME = "AppConfig";    static final String CONFIG_PATH = "/app/config/";    static final String CONFIG_FILE = "app_config.xml";        static final String CONFIG_LOAD = "INIT";    static final String CONFIG_RELOAD = "RELOAD";    private static Configuration appConfig = null;    private static Configuration compConfig[] = null;    private static String compId[] = null;        // 다국어 추가(현재 선택한 언어 타입    // 추가한 이유 : JSP 파일에서 Controller를 거치지 않고 바로 Service를 호출해서 다국어를 읽어오는 경우가 있는데    //            Service에서 session에 있는 언어 타입을 읽어 올 수 없으므로 어쩔수 없이 로그인할때 설정해서 읽어오게 함.    private static String CURRENT_LANG_TYPE = "ko";    private static final ConfigurationManager cm = ConfigurationManager.getInstance();    static {       try {	   loadConfig(CONFIG_LOAD);       } catch (Exception e) {           throw new RuntimeException("Could not initialize AppConfig. Cause: " + e);        }     }    /**     * config¸¦ reload 한다     */    public static void reload() {       try {	   loadConfig(CONFIG_RELOAD);       } catch (Exception e) {           throw new RuntimeException("Could not reload AppConfig. Cause: " + e);       }    }           public static void loadConfig(String load) throws Exception {	    try {	    	System.setProperty("jconfig.parser","org.jconfig.parser.NestedConfigParser");	    		    	InputStreamHandler handler = new InputStreamHandler();		    handler.setFileName(CONFIG_PATH + CONFIG_FILE);		    cm.load(handler,CONFIG_NAME);		    if (CONFIG_LOAD.equals(load)) {		    	appConfig = ConfigurationManager.getConfiguration(CONFIG_NAME);		    }		    else if (CONFIG_RELOAD.equals(load)) {				synchronized (appConfig) {				    appConfig = ConfigurationManager.getConfiguration(CONFIG_NAME);				}		    }		    		    compId = appConfig.getArray("compid", null, "companyinfo");		    		    if (compId != null) {				int compCount = compId.length;								if (compCount > 0) {					if (CONFIG_LOAD.equals(load)) { // 2012.06.11. INIT 시점에만 객체 생성 및 할당. edited by emptyColor.						compConfig = new DefaultConfiguration[compCount];					}				    				    for (int nLoop = 0; nLoop < compCount; ++nLoop) 				    {				    	String prefix = appConfig.getProperty("prefix", "file_", "companyinfo/configfile");						String compConfigFile = appConfig.getProperty(prefix + compId[nLoop], "", "companyinfo/configfile");						String compConfigName = CONFIG_NAME + compId[nLoop];												if (!"".equals(compConfigFile)) {						    if (CONFIG_LOAD.equals(load)) {						    	handler.setFileName(CONFIG_PATH + compConfigFile);								cm.load(handler, compConfigName);						    	compConfig[nLoop] = ConfigurationManager.getConfiguration(compConfigName);						    }						    else if (CONFIG_RELOAD.equals(load)) {								synchronized (compConfig[nLoop]) {									handler.setFileName(CONFIG_PATH + compConfigFile);									cm.load(handler, compConfigName);								    compConfig[nLoop] = ConfigurationManager.getConfiguration(compConfigName);								}						    }						}						else {						    if (CONFIG_LOAD.equals(load)) {						    	compConfig[nLoop] = null;						    }						    else if (CONFIG_RELOAD.equals(load)) {								synchronized (appConfig) {								    compConfig[nLoop] = null;								}						    }			    						}				    }				}		    }		} catch (Exception e) {		    throw e;		}    }        /**     * config로 사용되는 xml을 저장한다     *     */    public static void save() {       try {          save(CONFIG_NAME);          if (compId != null) {              int compCount = compId.length;              if (compCount > 0) {                  for (int nLoop = 0; nLoop < compCount; ++nLoop) {                      save(getConfigName(compId[nLoop]));                  }              }          }       } catch (Exception e) {           throw new RuntimeException("Could not save AppConfig. Cause: " + e);       }    }             /**     * configName으로 설정되어 있는 Configuration을 xml로 저장한다     *     */    public static void save(String configName) throws Exception {       try {	   cm.save(configName);       } catch (Exception e) {           throw e;       }    }             /**     * config로 사용되는 Configuration 객체를 반환한다      * @return Configuration     */    public static Configuration getConfigManager() {    	return appConfig;    }    /**     * session.compid에서 사용되는 Configuration 객체를 반환한다      * @return Configuration     */    private static Configuration getSessionConfigManager() {    	return getConfigManager((String) UtilRequest.getSessionAttrString("COMP_ID"));    }        /**     * session.compid에서 사용되는 Configuration 객체를 반환한다      * @return Configuration     */    private static Configuration getSessionConfigManager(String compId) {    	return getConfigManager(compId);    }    /**     * config로 사용되는 Configuration 객체를 반환한다      * @param compid     * @return Configuration     */    private static Configuration getConfigManager(String compid) {		Configuration cf = appConfig;				if (!"".equals(compid)) {		    if ((compId != null) && (compId.length > 0)) {				int nLoop = 0;				boolean exist = false;				for (; nLoop < compId.length; ++nLoop) {				    if (compId[nLoop].equals(compid)) {						exist = true;						break;				    }				}				if (exist) {				    cf = compConfig[nLoop];				}		    }		}		return cf;    }    public static String getConfigName(String compId) {	String value = "";	Configuration cf = getConfigManager(compId);	if (cf != null) {	    value = cf.getConfigName();	}	if ("".equals(value))	    value = appConfig.getConfigName();	return value;    }        public static String getEncoding() {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getEncoding();	}	if ("".equals(value))	    value = appConfig.getEncoding();	return value;    }        public static String[] getArray(String s) {	String value[] = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getArray(s);	}	if (value == null)	    value = appConfig.getArray(s);	return value;    }        public static String[] getArray(String s, String[] as) {	String value[] = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getArray(s, null);	}	if (value == null)	    value = appConfig.getArray(s, as);	return value;    }        public static String[] getArray(String s, String[] as, String s1) {	String value[] = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getArray(s, null, s1);	}	if (value == null)	    value = appConfig.getArray(s, as, s1);	return value;    }//    public static String getBaseConfiguration() {//	return appConfig.getBaseConfiguration();//    }    public static boolean getBooleanProperty(String s, boolean flag) {	boolean value = false;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getBooleanProperty(s, false);	}	if (!value)	    value = appConfig.getBooleanProperty(s, flag);	return value;    }    public static boolean getBooleanProperty(String s, boolean flag, String s1) {	boolean value = false;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getBooleanProperty(s, false, s1);	}	if (!value)	    value = appConfig.getBooleanProperty(s, flag, s1);	return value;    }    public static Category getCategory() {	Category value = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getCategory();	}	if (value == null)	    value = appConfig.getCategory();	return value;    }        public static Category getCategory(String s) {		Category value = null;		Configuration cf = getSessionConfigManager();		if (cf != null) {		    value = cf.getCategory(s);		}		if (value == null)		    value = appConfig.getCategory(s);		return value;    }        public static Category getCategory(String type, String compId, String s) {    	Category value = null;    	    	if ( type.equals("company") ) {	    	Configuration cf = getSessionConfigManager(compId);	    	if (cf != null) {	    		value = cf.getCategory(s);	    	}    	}    	else if (type.equals("common")) {    		value = appConfig.getCategory(s);    	}    	return value;    }    public static String[] getCategoryNames() {		String value[] = null;		Configuration cf = getSessionConfigManager();		if (cf != null) {		    value = cf.getCategoryNames();		}		if (value == null)		    value = appConfig.getCategoryNames();		return value;    }        public static String[] getCategoryNames(String type, String compId) {    	String value[] = null;    	    	if ( type.equals("company") ) {	    	Configuration cf = getSessionConfigManager(compId);	    	if (cf != null) {	    		value = cf.getCategoryNames();	    	}    	}    	else if (type.equals("common")) {    		value = appConfig.getCategoryNames();    	}    	    	return value;    }        public static char getCharProperty(String s, char c) {	char value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getCharProperty(s, (char) 0);	}	if (value == ((char) 0))	    value = appConfig.getCharProperty(s, c);	return value;    }    public static char getCharProperty(String s, char c, String s1) {	char value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getCharProperty(s, (char) 0, s1);	}	if (value == ((char) 0))	    value = appConfig.getCharProperty(s, c, s1);	return value;    }    public static double getDoubleProperty(String s, double d) {	double value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getDoubleProperty(s, (double) 0);	}	if (value == ((double) 0))	    value = appConfig.getDoubleProperty(s, d);	return value;    }    public static double getDoubleProperty(String s, double d, String s1) {	double value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getDoubleProperty(s, (double) 0, s1);	}	if (value == ((double) 0))	    value = appConfig.getDoubleProperty(s, d, s1);	return value;    }    public static Vector getIncludes() {	Vector value = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getIncludes();	}	if (value == null)	    value = appConfig.getIncludes();	return value;    }        public static int getIntProperty(String s, int i) {	int value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getIntProperty(s, 0);	}	if (value == 0)	    value = appConfig.getIntProperty(s, i);	return value;    }    public static int getIntProperty(String s, int i, String s1) {	int value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getIntProperty(s, 0, s1);	}	if (value == 0)	    value = appConfig.getIntProperty(s, i, s1);	return value;    }    public static long getLongProperty(String s, long i) {	long value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getLongProperty(s, (long) 0);	}	if (value == ((long) 0))	    value = appConfig.getLongProperty(s, i);	return value;    }        public static long getLongProperty(String s, long i, String s1) {	long value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getLongProperty(s, (long) 0, s1);	}	if (value == ((long) 0))	    value = appConfig.getLongProperty(s, i, s1);	return value;    }    public static String getMainCategoryName() {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getMainCategoryName();	}	if ("".equals(value))	    value = appConfig.getMainCategoryName();	return value;    }    public static int getNumberOfCategories() {	int value = 0;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getNumberOfCategories();	}	if (value == 0)	    value = appConfig.getNumberOfCategories();	return value;    }    public static Properties getProperties() {	Properties value = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getProperties();	}	if (value == null)	    value = appConfig.getProperties();	return value;    }    public static Properties getProperties(String s) {	Properties value = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getProperties(s);	}	if (value == null)	    value = appConfig.getProperties(s);	return value;    }    public static String getProperty(String s) {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getProperty(s);	}	if ("".equals(value))	    value = appConfig.getProperty(s);	return value;    }    public static String getProperty(String s, String s1) {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getProperty(s, "");	}	if ("".equals(value))	    value = appConfig.getProperty(s, s1);	return value;    }    public static String getProperty(String s, String s1, String s2) {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getProperty(s, "", s2);	}	if ("".equals(value))	    value = appConfig.getProperty(s, s1, s2);	return value;    }    public static String[] getPropertyNames(String s) {	String value[] = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getPropertyNames(s);	}	if (value == null)	    value = appConfig.getPropertyNames(s);	return value;    }    public static String getVariable(String s) {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getVariable(s);	}	if ("".equals(value))	    value = appConfig.getVariable(s);	return value;    }    public static HashMap getVariables() {	HashMap value = null;	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getVariables();	}	if (value == null)	    value = appConfig.getVariables();	return value;    }    public static String getXMLAsString() {	String value = "";	Configuration cf = getSessionConfigManager();	if (cf != null) {	    value = cf.getXMLAsString();	}	if ("".equals(value))	    value = appConfig.getXMLAsString();	return value;    }        public static void setCurrentLangType(String langType) {    	CURRENT_LANG_TYPE = langType;    }        public static String getCurrentLangType() {    	return CURRENT_LANG_TYPE;    }}