package com.sds.acube.app.common.util;import java.io.BufferedReader;import java.io.File;import java.io.FilePermission;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Method;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLConnection;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.Locale;import java.util.Map;import java.util.Random;import java.util.TimeZone;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.commons.lang.StringUtils;public class CommonUtil {    private static final String patternNow = "yyyyMMddHHmmss";    private static final String patternToday = "yyyyMMdd";    private static final String approverDate = "yyyy.MM.dd.";    private static int iCount = (new Random()).nextInt();    private synchronized static int getCount() {	++iCount;	iCount = (iCount >= 10000 || iCount < 1000) ? 1000 : iCount;	return iCount;    }    public static String generateId() {	return generateId("");    }    public static String generateId(String prefix) {	String id = "";	try {	    int count = getCount();	    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmssSSS", new Locale("ko", "KO"));	    String formattedValue = formatter.format(new Date());	    id = prefix + formattedValue + count;	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}	return id;    }    public static void scriptAlert(HttpServletResponse response, String script) {	scriptAlert(response, script, "");    }    public static void scriptAlert(HttpServletResponse response, String msg, String script) {	script(response, "alert(\"" + msg + "\");" + script);    }    public static void script(HttpServletResponse response, String script) {	response.setContentType("text/html;charset=UTF-8");	try {	    PrintWriter out = response.getWriter();	    out.write("<script type='text/javascript'>");	    out.write(script);	    out.write("</script>");	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}    }    public static void redirect(HttpServletResponse response, String url) {	try {	    PrintWriter out = response.getWriter();	    out.println("<script type='text/javascript'>");	    out.println("document.location.href = '" + url + "'");	    out.println("</script>");	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}    }    public static void println(HttpServletResponse response, String str) {	response.setContentType("text/html;charset=UTF-8");	try {	    PrintWriter out = response.getWriter();	    out.println(str);	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}    }    public static String getNow() {	SimpleDateFormat sdf = new SimpleDateFormat(patternNow, new Locale("ko"));	Date date = new Date();	String now = sdf.format(date);	return now;    }    public static String getToday() {	SimpleDateFormat sdf = new SimpleDateFormat(patternToday, new Locale("ko"));	Date date = new Date();	String today = sdf.format(date);	return today;    }        public static String getApproDate() {    	SimpleDateFormat sdf = new SimpleDateFormat(approverDate, new Locale("ko"));    	Date date = new Date();    	String today = sdf.format(date);    	return today;        }        public synchronized static Date toDate(String date) {	return toDate(date, patternNow);    }    public synchronized static Date toDate(String date, String pattern) {	if (date == null || date.equals("")) {	    return new Date();	}	Date retDate = null;	SimpleDateFormat sdf = new SimpleDateFormat(pattern, new Locale("ko"));	try {	    retDate = sdf.parse(date);	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}	return retDate;    }    public static String formatDate(Date date) {	return formatDate(date, patternNow);    }    public static String formatDate(Date date, String pattern) {	SimpleDateFormat sdf = new SimpleDateFormat(pattern, new Locale("ko"));	String strDate = "";	try {	    TimeZone tz = TimeZone.getTimeZone("Asia/Seoul");	    sdf.setTimeZone(tz);	    strDate = sdf.format(date);	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}	return strDate;    }    public static String formatDate(String date, String pattern) {	Date tmpDate = toDate(date);	return formatDate(tmpDate, pattern);    }    public static String nullTrim(String str) {    	return nullTrim(str,"");    }            public static String nullTrim(String str, String def) {    	if (str == null || str.equals("null")) {    	    return def;    	}    	return str.trim();    }    public static boolean isNullOrEmpty(String s) {	return nullTrim(s).equals("");    }    public static String getContent(String url) throws Exception {	return getContent(new URL(url));    }    public static String getContent(URL url) {	return getContent(url, "");    }    @SuppressWarnings("unchecked")    public static String getContent(URL url, String refer) {	HashMap map = new HashMap();	map.put("REFERER", refer);	return getContent(url, map, false);    }    @SuppressWarnings("unchecked")    public static String getContent(URL url, HashMap map, boolean useCache) {	int connectionTimeout = 10000;	String userAgent = (String) map.get("USER_AGENT");	String referer = (String) map.get("REFERER");	String charset = (String) map.get("CHARSET");	if (charset == null) {	    charset = "euc-kr";	}	String s = "";	InputStream is = null;	StringBuilder sb = new StringBuilder();	try {	    URLConnection conn = url.openConnection();	    if (userAgent != null) {		conn.setRequestProperty("User-Agent", userAgent);	    }	    if (referer != null) {		conn.setRequestProperty("REFERER", referer);	    }	    if (map != null) {		for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {		    Map.Entry entry = (Map.Entry) iter.next();		    String key = (String) entry.getKey();		    String value = (String) entry.getValue();		    conn.setRequestProperty(key, value);		}	    }	    conn.setConnectTimeout(connectionTimeout);	    is = conn.getInputStream();	    BufferedReader br = new BufferedReader(new InputStreamReader(is, charset));	    while ((s = br.readLine()) != null) {		sb.append(s + "\n");	    }	} catch (Exception e) {	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}	return sb.toString();    }    public static void sessionInit(HttpSession session) throws Exception {	session.removeAttribute("TENANT_ID");	session.removeAttribute("PORTAL_ID");	session.removeAttribute("LANG_TYPE");	session.removeAttribute("userProfile");	session.removeAttribute("adminProfile");    }    public static String escapeSpecialChar(String str) {	if (str == null)	    return "";	str = str.replaceAll("&", "&amp;");	str = str.replaceAll("<", "&lt;");	str = str.replaceAll(">", "&gt;");	str = str.replaceAll("\"", "&quot;");	str = str.replaceAll("'", "\\\'");	return str;    }        public static String escapeSpecialCharForJQuery(String str) {    	    	if (str == null)    		return "";    	    	    	str = str.replaceAll("\"", "&quot;");    	    	return str;    	    }    public static String decodeEscapedSpecialChar(String str) {	if (str == null)	    return "";	str = str.replaceAll("&amp;", "&");	str = str.replaceAll("&lt;", "<");	str = str.replaceAll("&gt;", ">");	str = str.replaceAll("&quot;", "\"");	str = str.replaceAll("\\\'", "'");	return str;    }    public static String nl2br(String str) {	if (str == null)	    return null;		str = str.replaceAll("\r\n", "<br />");	str = str.replaceAll("\n", "<br />");	str = str.replaceAll("\r", "<br />");	return str;    }    public static String url2Link(String url) {	String regex = "(https?://[^< \n\r\r\n]+)";	return url.replaceAll(regex, "<a href='$1' target='_blank'>$1</a>");    }    public static String getExt(String file) {	return file.substring(file.lastIndexOf(".") + 1).toLowerCase();    }    public static String cutString(String str, int length) {	if (str == null) {	    return "";	}	String token = "";	if (length >= str.length()) {	    length = str.length();	} else {	    token = "..";	}	return str.substring(0, length) + token;    }    public static String getFileSize(long bytes) {	if (bytes >= (1099511627776L)) {	    float size = ((float) bytes / (float) (1099511627776L));	    return String.format("%.2f %s", size, "TB");	} else if (bytes >= (1024 * 1024 * 1024)) {	    float size = ((float) bytes / (float) (1024 * 1024 * 1024));	    return String.format("%.2f %s", size, "GB");	} else if (bytes >= (1024 * 1024)) {	    float size = ((float) bytes / (float) (1024 * 1024));	    return String.format("%.2f %s", size, "MB");	} else if (bytes >= 1024) {	    float size = ((float) bytes / (float) 1024);	    return String.format("%.0f %s", size, "KB");	} else if (bytes > 0 & bytes < 1024) {	    float size = bytes;	    return String.format("%.0f %s", size, "B");	} else {	    return "0 " + " B";	}    }    public static String callURL(String url) {	return callURL(url, null);    }    public static String callURL(String url, String param) {	return callURL(url, param, null, null);    }    public static String callURL(String url, String param, String charset) {	return callURL(url, param, null, charset);    }    @SuppressWarnings("unchecked")    public static String callURL(String url, String param, HashMap map, String charset) {	String result = "";	try {	    URL targetURL = new URL(url);	    URLConnection urlcon = targetURL.openConnection();	    urlcon		    .setRequestProperty("User-Agent",		            "Mozilla/5.0 (Windows; U; Windows NT 6.1; ko; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8");	    urlcon.setRequestProperty("REFERER", "http://sds.samsung.com");	    urlcon.setRequestProperty("X-Requested-With", "XMLHttpRequest");	    urlcon.setRequestProperty("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.7");	    urlcon.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=" + charset);	    if (map != null) {		for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {		    Map.Entry entry = (Map.Entry) iter.next();		    String key = (String) entry.getKey();		    String value = (String) entry.getValue();		    urlcon.setRequestProperty(key, value);		}	    }	    if (charset == null) {		charset = "euc-kr";	    }	    HttpURLConnection hurlc = (HttpURLConnection) urlcon;	    hurlc.setRequestMethod("GET");	    hurlc.setDoOutput(true);	    hurlc.setDoInput(true);	    hurlc.setUseCaches(false);	    hurlc.setDefaultUseCaches(false);	    if (param != null) {		PrintWriter out = new PrintWriter(hurlc.getOutputStream());		out.print(param);		out.close();	    }	    BufferedReader br = new BufferedReader(new InputStreamReader(hurlc.getInputStream(), charset));	    String temp = "";	    String strData = "";	    while ((temp = br.readLine()) != null) {		strData += temp;	    }	    result = strData.trim();	} catch (Exception e) {	    result = "Fail!!";	    LogWrapper.getLogger("com.sds.acube.app").error(e.getMessage());	}	return result;    }    public static boolean verifyPath(String path) {	boolean result = false;	File folder = new File(path);	if (folder.exists()) {	    result = true;	} else {	    result = folder.mkdir();	    if (result) {		try {		    String action = "read, write, delete";		    new FilePermission(path, action);		    result = true;		} catch (Exception e) {		}	    }	}	return result;    }    /**     * <pre> 	 *  입력된 날짜를  "null","",null을 체크하여 기본일자로 변환한다.	 * </pre>     *      * @param date     * @return     * @see     */    public static String toBasicDate(String date) {	if (date == null || date.equals("null") || nullTrim(date).equals("")) {	    return "9999-12-31 23:59:59";	}	return date;    }    /**     * <pre>     *      * </pre>     *      * @param date     * @return     * @see     */    public static String toBasicDate() {	return "9999-12-31 23:59:59";    }    /**     * <pre> 	     *  get method 를 읽어 동일한 이름의 set method 에 값을 invoke 시킨다.	     * </pre>     *      * @param obj1     * @param obj2     * @throws Exception     * @see     */    public static void copyObject(Object obj1, Object obj2) throws Exception {	if (obj1 != null) {	    Method[] methods = obj1.getClass().getDeclaredMethods();	    Method[] targets = obj2.getClass().getDeclaredMethods();	    Map<String, Method> methodMap = new HashMap<String, Method>();	    for (Method method : targets) {		methodMap.put(method.getName(), method);	    }	    for (Method method : methods) {		String name = method.getName();		if (name != null && name.length() > 3 && name.startsWith("get")) {		    String methodName = "set" + method.getName().substring(3);		    if (methodMap.containsKey(methodName)) {			Method target = methodMap.get(methodName);			target.invoke(obj2, method.invoke(obj1));		    }		}	    }	}    }    public static void copyStringOrInt(Object obj1, Object obj2) throws Exception {	if (obj1 != null) {	    Method[] methods = obj1.getClass().getDeclaredMethods();	    Method[] targets = obj2.getClass().getDeclaredMethods();	    Map<String, Method> methodMap = new HashMap<String, Method>();	    for (Method method : targets) {		methodMap.put(method.getName(), method);	    }	    for (Method method : methods) {		String name = method.getName();		if (name != null && name.length() > 3 && name.startsWith("get")) {		    if (method.getReturnType().equals(String.class)) {			String methodName = "set" + method.getName().substring(3);			if (methodMap.containsKey(methodName) || method.getReturnType().equals(int.class)) {			    Method target = methodMap.get(methodName);			    target.invoke(obj2, method.invoke(obj1));			}		    }		}	    }	}    }    public static String currency(double value) {	try {	    return new DecimalFormat("###,###,###,###,###.##").format(value);	} catch (Exception e) {	    return String.valueOf(value);	}    }    public static String getExceptionMessage(Exception e) {	String msg = e.getLocalizedMessage();	if (StringUtils.isEmpty(msg) || "null".equals(msg)) {	    msg = e.getMessage();	    if (StringUtils.isEmpty(msg) || "null".equals(msg)) {		msg = e.toString();	    }	}	return msg;    }    public static String ascTochar(int asc) {		char div = (char) asc;		return String.valueOf(div);    }        /**	 * 	 * <pre> 	 *  입력된 위치 하위폴더/파일들 삭제	 * </pre>	 * @param path	 * @param recursion	 * @return Boolean	 */	public static boolean deleteDirectory(File path, boolean recursion) {		if(!path.exists()) {			return false;		}		File[] files = path.listFiles();		for (File file : files) {			if (file.isDirectory()) {				deleteDirectory(file, false);			} else {				file.delete();			}		}				if(recursion) {			return recursion;		} else {			return path.delete();		}	}		/**	 * 	 * <pre> 	 *  입력한 파일의 확장자를 리턴한다.	 * </pre>	 * @param fileName	파일 이름 (확장자 포함)	 * @return 파일 확장자	 * @see  	 *	 */	public static String getFileExtentsion(String fileName) {		int findIndex = fileName.indexOf(".");		if (findIndex >= 0) {			return fileName.substring(findIndex + 1).trim();		}		return "";	}}