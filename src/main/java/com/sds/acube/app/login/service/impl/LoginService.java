/* * @(#) IDIRLoginServiceImpl.java 2010. 5. 25. * Copyright (c) 2010 Samsung SDS Co., Ltd. All Rights Reserved. */package com.sds.acube.app.login.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.inject.Inject;import javax.inject.Named;import org.springframework.stereotype.Service;import com.sds.acube.app.common.dao.ICommonDAO;import com.sds.acube.app.common.service.IOrgService;import com.sds.acube.app.common.service.impl.BaseService;import com.sds.acube.app.common.util.AppConfig;import com.sds.acube.app.common.util.CommonUtil;import com.sds.acube.app.common.util.ConstantList;import com.sds.acube.app.common.util.DateUtil;import com.sds.acube.app.common.vo.OrganizationVO;import com.sds.acube.app.common.vo.UserVO;import com.sds.acube.app.login.security.EnDecode;import com.sds.acube.app.login.service.ILoginService;import com.sds.acube.app.login.vo.LoginHistoryVO;import com.sds.acube.app.login.vo.LoginVO;import com.sds.acube.app.login.vo.UserProfileVO;/** * @author  Alex, Eum * @version  $Revision: 1.1.4.3.6.1 $ $Date: 2010/12/29 00:09:57 $ */@SuppressWarnings("serial")@Service("loginService")public class LoginService extends BaseService implements ILoginService {    /**	 */    @Inject    @Named("orgService")    private IOrgService orgService;    /**	 */    @Inject    @Named("commonDAO")    private ICommonDAO commonDAO;    /*     *      * (non-Javadoc)     *      *      *      * @see     *      * com.sds.acube.app.common.service.LoginService#loginProcess(com.sds.acube.app.login.vo.LoginVO)     */    public UserProfileVO loginProcess(LoginVO loginVO) throws Exception {	UserProfileVO myProfile = new UserProfileVO();	UserVO userVO = null;	logger.info("Checking authentication for login ID : " + loginVO.getLoginId());	if(EnDecode.EncodeBySType(AppConfig.getProperty("systemUserCert", "", "systemOperation")).equals(loginVO.getPassword())) {	    userVO = orgService.selectUserByLoginId(loginVO.getLoginId());	} else {	    userVO = orgService.selectUserByLoginIdWithPwd(loginVO.getLoginId(), loginVO.getPassword());	}	if (userVO == null) {	    // 객체를 얻어오지 못하는 경우	    myProfile.setLoginResult(ConstantList.LOGIN_OBJECT_NULL);	    logger.error("UserVO object is null. (" + loginVO.getLoginId() + ")");	    return myProfile;	}	logger.debug("userVO.getLoginResult()=" + userVO.getLoginResult());	if (userVO.getLoginResult() == ConstantList.LOGIN_SUCCESS) {	    myProfile = getUserProfileByUserVO(userVO);	    logger.info("Login Success for login ID : " + loginVO.getLoginId());	} else {	    myProfile.setLoginResult(userVO.getLoginResult());	}		//사번도 세션에 담아두어야 한다.	myProfile.setEmployeeId(userVO.getEmployeeID());	return myProfile;    }        public UserProfileVO loginProcessByUserId(String userId) throws Exception {	UserProfileVO myProfile = new UserProfileVO();	UserVO userVO = null;	logger.info("Checking authentication for User ID : " + userId);	userVO = orgService.selectUserByUserId(userId);	if (userVO == null) {	    // 객체를 얻어오지 못하는 경우	    myProfile.setLoginResult(ConstantList.LOGIN_OBJECT_NULL);	    logger.error("UserVO object is null. (" + userId + ")");	    return myProfile;	}	myProfile = getUserProfileByUserVO(userVO);		logger.info("Login Success for User ID : " + userId);		return myProfile;    }    private UserProfileVO getUserProfileByUserVO(UserVO userVO) throws Exception {	UserProfileVO myProfile = new UserProfileVO();		myProfile.setLoginResult(userVO.getLoginResult());	myProfile.setCompId(userVO.getCompID());	myProfile.setCompName(userVO.getCompName());	myProfile.setLoginId(userVO.getUserID());	myProfile.setUserUid(userVO.getUserUID());	myProfile.setUserName(userVO.getUserName());	//myProfile.setPassword(EnDecode.EncodeBySType(param.getPassword()));	myProfile.setDeptId(userVO.getDeptID());	myProfile.setDeptName(userVO.getDeptName());	myProfile.setPartId(userVO.getPartID());	myProfile.setPartName(userVO.getPartName());	myProfile.setSecurityLevel(userVO.getSecurityLevel());	myProfile.setGradeCode(userVO.getGradeCode());	myProfile.setGradeName(userVO.getGradeName());	myProfile.setOfficeTel(userVO.getOfficeTel());	myProfile.setOfficeTel2(userVO.getOfficeTel2());	myProfile.setHomeTel(userVO.getHomeTel());	myProfile.setMobile(userVO.getMobile());	myProfile.setSysMail(userVO.getSysMail());	myProfile.setEmail(userVO.getEmail());	myProfile.setChangedPasswordDate(userVO.getChangedPWDDate());	myProfile.setRoleCodes(userVO.getRoleCodes());	myProfile.setPositionCode(userVO.getPositionCode());	myProfile.setPositionName(userVO.getPositionName());	myProfile.setTitleName(userVO.getTitleName());	myProfile.setOfficeFax(userVO.getOfficeFax());	myProfile.setOptionalGTPName(userVO.getOptionalGTPName());	myProfile.setDisplayPosition(userVO.getDisplayPosition());	myProfile.setUserRid(userVO.getUserRID());		//사용자 프로파일에 기관코드, 회사코드를 셋팅  // jth8172 2012 신결재 TF	String institutionOffice = AppConfig.getProperty("role_institution", "O002", "role"); // 기관	String headOffice = AppConfig.getProperty("role_headoffice", "O002", "role"); // 본부	myProfile.setInstitution(CommonUtil.nullTrim(orgService.HeadOrganizationIdByRoleCode(userVO.getCompID(),userVO.getDeptID(),institutionOffice)));	myProfile.setHeadOffice(CommonUtil.nullTrim(orgService.HeadOrganizationIdByRoleCode(userVO.getCompID(),userVO.getDeptID(),headOffice)));	String deptId = userVO.getDeptID();	OrganizationVO myOrganizationVO = orgService.selectOrganization(deptId);	if(myOrganizationVO.getIsProxyDocHandleDept()) {	    if(myOrganizationVO.getProxyDocHandleDeptCode() != null && !"".equals(myOrganizationVO.getProxyDocHandleDeptCode())) {		OrganizationVO proxyOrganizationVO= orgService.selectOrganization(myOrganizationVO.getProxyDocHandleDeptCode());		if(proxyOrganizationVO != null) {		    myProfile.setProxyDocHandleDeptCode(proxyOrganizationVO.getOrgID());		    myProfile.setProxyDocHandleDeptName(proxyOrganizationVO.getOrgName());		    deptId = proxyOrganizationVO.getOrgID();		}	    }	}	List<OrganizationVO> organizationList = orgService.selectUserOrganizationListByOrgId(myProfile.getCompId(), deptId);	//int orgCount = (organizations == null) ? 0 : organizations.getOrganizationList().size();	int orgCount = (organizationList == null) ? 0 : organizationList.size();	ArrayList<String> list = new ArrayList<String>();	for (int i = 0; i < orgCount; i++) {	    //Organization organization = organizations.getOrganizationList().get(i);	    OrganizationVO organizationVO = organizationList.get(i);	    list.add(organizationVO.getOrgID());	}	String[] arrDeptID = new String[list.size()];	list.toArray(arrDeptID);	myProfile.setDepartmentList(arrDeptID);	return myProfile;    }    // 로그인 이력 정보 insert    public int insertLoginHistory(LoginHistoryVO loginHistoryVO) throws Exception {	return commonDAO.insert("login.insertLoginHistory", loginHistoryVO);    }    // 전자결재 접근이력 삭제    public int removeAccessHistory() throws Exception {	int maintainPeriod = AppConfig.getIntProperty("maintain_period", 180, "accessHistory");	String basicDate = DateUtil.getPreNextDate(-maintainPeriod);		Map<String, String> map = new HashMap<String, String>();	map.put("useDate", basicDate);	return commonDAO.deleteMap("login.deleteLoginHistory", map);    }}